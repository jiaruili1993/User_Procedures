#pragma rtGlobals=1		// Use modern global access method.#pragma version = 2.00#pragma ModuleName = norm#pragma IgorVersion = 5.0////////////////////////////////////////// Public functions////////////////////////////////////////// generate the panel// source data is selected from two list boxes:// one listbox for all possible DF's (default is 'root:carpets:rawData'). One and only one selection allowed// one listbox for all 2D waves in the DF. Any selections allowed.	//////////////////////////////////////////////////////////////////////////////////////////////Function norm_open(ctrlName)	String ctrlName	// initialize?	//if (! datafolderexists("root:internalUse:norm"))		norm_init()	//endif		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:norm	//WAVE w_image		DoWindow/K norm_panel	Display/K=1/W=(0, 0, 510, 565) as "norm. panel"	DoWindow/C norm_panel	utils_resizeWindow("norm_panel", 510, 565)	utils_autoPosWindow("norm_panel", win=127)	String cmd = "ControlBar 213"	execute cmd		Variable r=57000, g=57000, b=57000	// background color for the TabControl	ModifyGraph cbRGB=(42428,42428,42428)	ModifyGraph wbRGB=(63000,64000,55000),gbRGB=(63000,64000,55000)		// controls that do not depend on the tabs	panelcommon_srcListBoxInit()	listbox waves_lb, pos={16,37}, size={130,145}, listwave=root:internalUse:panelcommon:w_sourceNames, selwave=root:internalUse:panelcommon:w_sourceNamesSel, frame=2,mode=4, proc=panelcommon_srcListboxProc		CheckBox n_check0, pos={20,197}, title="suppress par. update"	CheckBox n_check1, pos={160,197}, title="lock DC-intensity scale", proc=panelcommon_checkBoxLockInt	CheckBox n_check2, pos={340,197}, title="integrate E", proc=panelcommon_checkBoxIntEorK	CheckBox n_check3, pos={420,197}, title="integrate k", proc=panelcommon_checkBoxIntEorK		// GroupBox-top = 35		// --------------------------tab-controls -----------------	// source tab	TabControl norm,proc=norm#tabControlChange,pos={8,6},size={494,190},tabLabel(0)="source",value=0,labelBack=(r,g,b), fsize=12	GroupBox sou_gb0, frame=1,labelBack=(r,g,b), pos={170,35}, size={240,149}, title="source folder", fsize=10	listbox sou_lb1, pos={180,60}, size={220,90}, listwave=root:internalUse:panelcommon:w_DF, selrow=0, frame=2,mode=1, proc=panelcommon_srcListboxProc,widths={200}		// dispersion tab	TabControl norm,tabLabel(3)="dispersion"	GroupBox dis_gb0, pos={160,35}, size={160,150}, title="dispersion wave", fsize=10, disable=1	listbox dis_lb1, pos={170,71}, size={140,72}, listwave=w_dispNames, selrow=1, frame=2,mode=1, disable=1, proc=norm#listBoxDispNames	CheckBox dis_c2, pos={170,54}, title="show wave",labelBack=(r,g,b), disable=1, proc=norm#checkBoxShowDisp		CheckBox dis_cbchannel, pos={170,148}, title="channel scale",labelBack=(r,g,b),value=1,mode=1, disable=1, proc=norm#checkBoxDispScaling	CheckBox dis_cbidx, pos={170,164}, title="index scale",labelBack=(r,g,b), mode=1, disable=1, proc=norm#checkBoxDispScaling		GroupBox dis_gb1, pos={330,35}, size={160,85}, title="energy scale", fsize=10, disable=1	CheckBox dis_cbEk, pos={340,52}, title="E_k",labelBack=(r,g,b), value=1,disable=1, proc=norm#checkBoxEiEk	CheckBox dis_cbEiDisp, pos={340,67}, title="E_i rel. to disp. wave",labelBack=(r,g,b), disable=1, proc=norm#checkBoxEiEk	CheckBox dis_cbEiFermi, pos={340,82}, title="E_i rel. to E_Fermi =",labelBack=(r,g,b), disable=1, proc=norm#checkBoxEiEk	SetVariable dis_sv0, pos={360,97},size={80,15}, title=" ", labelback=(r,g,b), value = gv_EF, limits={-inf,inf,0}, disable=1	Button dis_b0, pos={340,130},size={60,15}, labelback=(r,g,b),title="preview", disable=1, proc=norm#buttonPreviewDispCorr	Button dis_b1, pos={340,150},size={60,15}, labelback=(r,g,b),title="undo", disable=1, proc=norm#buttonUndoImage	Button dis_b2, pos={340,170},size={60,15}, labelback=(r,g,b),title="reset", disable=1, proc=norm_resetImage	Button dis_b3, pos={415,130},size={65,35}, labelback=(r,g,b),title="correct\r& save", disable=1, proc=norm#buttonSaveDispNorm	CheckBox dis_c6, pos={415,170},title="overwrite", labelBack=(r,g,b), disable=1		// tmf tab (uses the same list-box and checks as the dispersion tab	TabControl norm,tabLabel(2)="TMF"	CheckBox tmf_c0, pos={308,32}, title=" ",labelBack=(r,g,b), mode=1, disable=1, proc=norm#checkBoxTMF	GroupBox tmf_gb0, pos={160,35}, size={160,150}, title="transmission wave", fsize=10, disable=1	//CheckBox tmf_c2, pos={170,54}, title="show wave",labelBack=(r,g,b), mode=0, disable=1, proc=norm#checkBoxShowDisp	Button tmf_b0, pos={340,130},size={60,15}, labelback=(r,g,b),title="preview", disable=1, proc=norm#buttonPreviewTMFCorr	Button tmf_b1, pos={340,150},size={60,15}, labelback=(r,g,b),title="undo", disable=1, proc=norm#buttonUndoImage	Button tmf_b2, pos={340,170},size={60,15}, labelback=(r,g,b),title="reset", disable=1, proc=norm_resetImage	Button tmf_b3, pos={415,130},size={65,35}, labelback=(r,g,b),title="normalize\r& save", disable=1, proc=norm#buttonSaveTMFNorm		CheckBox tmf_c1, pos={478,32}, title=" ",labelBack=(r,g,b), mode=1, value=1, disable=1, proc=norm#checkBoxTMF	GroupBox tmf_gb1, pos={330,35}, size={160,85}, title="from data", fsize=10, disable=1	SetVariable tmf_sv0,labelBack=(r,g,b), pos={340,55},size={70,15}, limits={-inf,inf,0}, title="E:",frame=1,fsize=10,value= gv_tmfE0, disable=1	SetVariable tmf_sv1,labelBack=(r,g,b), pos={421,55},size={58,15}, limits={-inf,inf,0}, title=" ",frame=1,fsize=10,value= gv_tmfE1, disable=1	SetVariable tmf_sv2,labelBack=(r,g,b), pos={421,80},size={58,15}, limits={-inf,inf,0}, title="smooth",frame=1,fsize=10,value= gv_tmfSmooth, disable=1	Button tmf_b4, pos={340,80}, size={30,14}, labelback=(r,g,b), title="marquee", proc=norm#buttonReadMarquee, disable=1	Button tmf_blow, pos={340,100}, size={30,14}, labelback=(r,g,b), title="low", proc=norm#buttonDefaultE0E1, disable=1	Button tmf_bhigh, pos={450,100}, size={30,14}, labelback=(r,g,b), title="high", proc=norm#buttonDefaultE0E1, disable=1	TitleBox tmf_t5, pos={380,101}, size={80,12}, labelback=(r,g,b), frame=0,title="default range", disable=1			// angle calibration/cropping	TabControl norm,tabLabel(1)="cal./crop"	GroupBox cal_gb0, pos={157,35}, size={174,150}, title="crop", fsize=10, disable=1	NVAR p1 = gv_p1; NVAR q1 = gv_q1	SetVariable cal_sv0, pos={183,70},size={66,15}, title="p0:", labelback=(r,g,b), value = gv_p0, limits={0,inf,1}, proc=norm#setVariableLiveCrop, disable=1	// limits seem to be local variables	SetVariable cal_sv1, pos={254,70},size={66,15}, title="p1:", labelback=(r,g,b), value = gv_p1, limits={0,p1,1}, proc=norm#setVariableLiveCrop, disable=1	CheckBox cal_cbpEnabled, pos={162,70},title="", labelBack=(r,g,b), value=1, disable=1	SetVariable cal_sv2, pos={183,90},size={66,15}, title="q0:", labelback=(r,g,b), value = gv_q0, limits={0,inf,1}, proc=norm#setVariableLiveCrop, disable=1	SetVariable cal_sv3, pos={254,90},size={66,15}, title="q1:", labelback=(r,g,b), value = gv_q1, limits={0,q1,1}, proc=norm#setVariableLiveCrop, disable=1	CheckBox cal_cbqEnabled, pos={163,90},title="", labelBack=(r,g,b), value=0, disable=1		Button cal_b0, pos={180,120}, size={130,18}, labelback=(r,g,b), title="crop & save", proc=norm#buttonSaveCrop, disable=1	CheckBox cal_cboverwriteCrop, pos={190,148},title="overwrite", labelBack=(r,g,b), disable=1		GroupBox cal_gb1, pos={340,35}, size={150,150}, title="angle calibration", fsize=10, disable=1	SetVariable cal_sv4, pos={350,70},size={130,15}, title="center-channel:", labelback=(r,g,b), value = gv_ch0, limits={0,inf,0}, proc=norm#setVariableLiveRescale, disable=1	SetVariable cal_sv5, pos={350,90},size={130,15}, title="¡/channel:    ", labelback=(r,g,b), value = gv_d2c, limits={-inf,inf,0}, proc=norm#setVariableLiveRescale, disable=1	Button cal_b1, pos={350,120}, size={130,18}, labelback=(r,g,b), title="rescale & save", proc=norm#buttonSaveRescaled, disable=1	CheckBox cal_cboverwriteRescale, pos={360,148},title="overwrite", labelBack=(r,g,b), disable=1		panelcommon_addImage("norm_panel")	norm_panel_SLB_proc()		SetDataFolder $DFEnd// generate the globals and a copy of the actual image waveFunction norm_init()	String DF = GetDataFolder (1)	NewDataFolder/O/S root:carpets	NewDataFolder/o rawData	NewDataFolder/o/s normalized	NewDataFolder/o NormWaves		NewDataFolder/O/S root:internalUse	NewDataFolder/O/S norm		// everything goes in here		// textwaves for the source list-boxes	panelcommon_srcListBoxInit()	// generate the list-box waves	//SVAR path = root:internalUse:panelcommon:gs_TopItemPath	if(waveexists(root:internalUse:panelcommon:w_image)==0)		panelcommon_makeNaNWaves()	endif		// textwaves for the dispersion/tmf listboxes	String List = utils_getWaveList("root:carpets:normalized:NormWaves:", match="*_disp", dim=1)	utils_stringList2wave(List)	duplicate/o/t w_StringList w_dispNames		List = utils_getWaveList("root:carpets:normalized:NormWaves:", match="*_atmf", dim=1)	utils_stringList2wave(List)	duplicate/o/t w_StringList w_atmfNames		List = utils_getWaveList("root:carpets:normalized:NormWaves:", match="*_etmf", dim=1)	utils_stringList2wave(List)	duplicate/o/t w_StringList w_etmfNames			Variable/g v_fitoptions = 4 // no fit window in this folder		// panel globals	String/G gs_w_dispNameBase=""	String/G gs_TopDispPath = ""	Variable/G gv_tmfE0, gv_tmfE1, gv_tmfSmooth = 0	Variable/G gv_fp0, gv_fp1, gv_fp2, gv_fp3, gv_fp4, gv_fp5, gv_fp6	Variable/G gv_p0, gv_p1, gv_q0, gv_q1, gv_pmax, gv_qmax	Variable/G gv_d2c, gv_ch0	Variable/G gv_EF = trunc(mean($("root:carpets:normalized:NormWaves:"+w_dispnames[0]),-inf,inf)*1e6)/1e6	SetDataFolder $DFEndFunction norm_resetImage(ctrlName)	String ctrlName		String sDf = GetDataFolder (1)	SetDataFolder root:internalUse:panelcommon		String TopWin = StringFromList(0,winList("*",";",""))		Variable xPoint = xcsr(B,TopWin)	// store cursor position	Variable yPoint = vcsr(B,TopWin)		SVAR path = root:internalUse:panelcommon:gs_TopItemPath	Duplicate/o $path w_image			// reset		Cursor/I B, w_image, xPoint,yPoint		// conserve cursor position		Make/N=(dimsize(w_image,0))/O n_mdc, n_mdc2	Make/N=(dimsize(w_image,1))/O n_edc, n_edc2, n_edc_x	SetScale/I x, utils_x0(w_image),utils_x1(w_image), n_mdc, n_mdc2	SetScale/I x, utils_y0(w_image),utils_y1(w_image), n_edc, n_edc2, n_edc_x	n_edc_x = x	xPoint = pcsr(B,TopWin)	yPoint = qcsr(B,TopWin)	SetScale/I x utils_y0(w_image),utils_y1(w_image), n_edc_x	n_edc_x = x	n_mdc = w_image[p][yPoint]	n_edc = w_image[xPoint][p]		if (stringmatch(topWin,"process_panel"))		ControlInfo process		if (v_value == 2)			SVAR path = root:internaluse:process:gs_bkgPath			if (waveexists($path))				Duplicate/o $path root:internalUse:process:process_wave			endif		endif				process_defaults()	endif				SetDataFolder $sDFEnd// NOTE: this is vintage code. It will be replaced eventually.// This function is called from i_panelcommon, namely from panelcommon_srcListboxProc().// The function name is auto-generated; it needs to be composed out of// <windowname>_SLB_proc such that panelcommon_srcListboxProc()// can find it. This function updates the graph view.// executed whenever one or more cells in the source list-boxes are selectedFunction norm_panel_SLB_proc()		String pDF = GetDataFolder (1)	SetDataFolder root:internalUse:panelcommon	SVAR DF = root:internalUse:panelcommon:gs_currentDF	SVAR pList = root:internalUse:panelcommon:gs_sourcePathList	SVAR topPath = root:internalUse:panelcommon:gs_TopItemPath			//WAVE w_sourceNamesSel	if (strlen(pList) == 0)		Make/o/n=(10,10) w_image=nan	else		Duplicate/o $topPath w_image	endif	Make/N=(dimsize(w_image,0))/O n_mdc, n_mdc2	Make/N=(dimsize(w_image,1))/O n_edc, n_edc2, n_edc_x	SetScale/I x, utils_x0(w_image),utils_x1(w_image), n_mdc, n_mdc2	SetScale/I x, utils_y0(w_image),utils_y1(w_image), n_edc, n_edc2, n_edc_x	n_edc_x = x				Variable xPoint = pcsr(B,"norm_panel")	Variable yPoint = qcsr(B,"norm_panel")	n_mdc = w_image[p][yPoint]	n_edc = w_image[xPoint][p]			setToDefaults(w_image)	update_crop_limits(w_image)	// This is needed to call the CursorMovedHook() function to update the	// image info if the image changes:	Cursor/I B, w_image, utils_pnt2x(w_image, xPoint), utils_pnt2y(w_image, yPoint)	SetDataFolder $pDFEnd////////////////////////////////////////// Private functions: Control Callbacks////////////////////////////////////////Static constant kTabSource = 0		// to be used in the switch statement in the Tab-procedureStatic constant kTabDispersion = 4Static constant kTabTMF = 2Static constant kTabangleCal = 3Static constant kTabCrop = 1Static constant kTabFermi = 5// show/hide all controls which start with the first 3 letters of a Tab-title, followed by an underscore// e.g. "fer_c_0" for a checkbox in the "Fermi" tab// controls which do not start with this letter code are left alone// idea from Kevin R. BoyceStatic Function tabControlChange( name, tab )	String name	Variable tab		// Get the name of the current tab	ControlInfo $name	String tabStr = S_Value	tabStr = tabStr[0,2]		// Get a list of all the controls in the window	Variable i = 0	String all = ControlNameList( "norm_panel" )	String thisControl		do		thisControl = StringFromList( i, all )		if( strlen( thisControl ) <= 0 )			break		endif				// Found another control.  Does it start with two letters and an underscore?		if( !CmpStr( thisControl[3], "_" ) )			// If it matches the current tab, show it.  Otherwise, hide it			if( !CmpStr( thisControl[0,2], tabStr ) )				utils_setControlEnabled( thisControl, 0 )			else				utils_setControlEnabled( thisControl, 1)			endif		endif		i += 1	while( 1 )		String Df = GetDataFolder (1)		// tab-specific adjustments	if ( tab != kTabFermi )	// not on the Fermi-tab -> switch back to mdc-display		AppendToGraph root:internalUse:panelcommon:n_edc	// first append a dummy to avoid having no wave on the graph		RemoveFromGraph/Z n_Ffit_x, n_mdc, w_dispersion		RemoveFromGraph/Z w_dispersion_s, w_resolution		AppendToGraph root:internalUse:panelcommon:n_mdc		ModifyGraph rgb(n_mdc)=(1,16019,65535)		RemoveFromGraph/Z  n_EDC		//CheckBox fer_c_10, value=0		//CheckBox fer_c_11, value=0	endif		switch( tab )		case kTabTMF:				ListBox dis_lb1, disable = 0				CheckBox dis_cbchannel, disable = 0				CheckBox dis_cbidx, disable = 0				CheckBox dis_c2, disable = 0				CheckBox dis_c6, disable = 0				ControlInfo dis_c2				if(v_value)					AppendToGraph root:internalUse:panelcommon:n_edc					RemoveFromGraph/Z w_norm, n_mdc					AppendToGraph root:internalUse:norm:w_norm					RemoveFromGraph/Z n_edc				endif				ControlInfo tmf_c0				if(v_value)					Button tmf_b4, disable=2					Button tmf_blow, disable=2					Button tmf_bhigh, disable=2					GroupBox tmf_gb1, disable=2					GroupBox tmf_gb0, disable=0					//Listbox dis_lb1, disable=0					CheckBox dis_cbchannel, disable=0					CheckBox dis_cbidx, disable = 0					CheckBox dis_c2, disable=0				else					Button tmf_b4, disable=0					Button tmf_blow, disable=0					Button tmf_bhigh, disable=0					GroupBox tmf_gb1, disable=0					GroupBox tmf_gb0, disable=2					//Listbox dis_lb1, disable=2					CheckBox dis_cbchannel, disable=2					CheckBox dis_cbidx, disable = 2					CheckBox dis_c2, disable=2				endif				listBoxDispNames("dum",0,0,4)			break		case kTabDispersion:				ControlInfo dis_c2				if(v_value)					AppendToGraph root:internalUse:panelcommon:n_edc					RemoveFromGraph/Z w_norm, n_mdc					AppendToGraph root:internalUse:norm:w_norm					RemoveFromGraph/Z n_edc				endif			listBoxDispNames("dum",0,0,4)			break		case kTabFermi:				AppendToGraph root:internalUse:panelcommon:n_edc				RemoveFromGraph/Z w_norm, n_mdc				AppendToGraph root:internalUse:panelcommon:n_mdc				ModifyGraph rgb(n_mdc)=(1,16019,65535)				RemoveFromGraph/Z n_edc			break		case kTabangleCal:				AppendToGraph root:internalUse:panelcommon:n_edc				RemoveFromGraph/Z w_norm, n_mdc				AppendToGraph root:internalUse:panelcommon:n_mdc				ModifyGraph rgb(n_mdc)=(1,16019,65535)				RemoveFromGraph/Z n_edc			break		case kTabCrop:				AppendToGraph root:internalUse:panelcommon:n_edc				RemoveFromGraph/Z w_norm, n_mdc				AppendToGraph root:internalUse:panelcommon:n_mdc				ModifyGraph rgb(n_mdc)=(1,16019,65535)				RemoveFromGraph/Z n_edc				//WAVE M = root:internalUse:norm:w_image				//update_crop_limits(M)			break		case kTabSource:				AppendToGraph root:internalUse:panelcommon:n_edc				RemoveFromGraph/Z w_norm, n_mdc				AppendToGraph root:internalUse:panelcommon:n_mdc				ModifyGraph rgb(n_mdc)=(1,16019,65535)				RemoveFromGraph/Z n_edc			break	endswitch		SetDataFolder $DFEnd// normalize Scienta data to remove instrumental artifacts//										FB 07/22/03//---------------------------------------------------------------------------------------//// conventions:// norm-waves are stored in: 'root:carpets:normalized:NormWaves:'// suffices are '_disp' for dispersion waves, '_atmf' for angular transmission waves, '_etmf' for energy transmission waves// image wave and DC's in the panel are: 'w_image', 'n_edc', 'n_edc_x', 'n_mdc' in 'root:internalUse:norm'Static Function buttonUndoImage(ctrlName)	String ctrlName		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:panelcommon		WAVE w_image; WAVE w_image_u1			Duplicate/o w_image_u1 w_image		Duplicate/o w_image_u2 w_image_u1				// update the DC's		WAVE n_mdc, n_edc, n_edc_x		Variable xPoint, yPoint		xPoint = pcsr(B,"norm_panel")		yPoint = qcsr(B,"norm_panel")		SetScale/I x utils_y0(w_image),utils_y1(w_image), n_edc_x		n_edc_x = x		n_mdc = w_image[p][yPoint]		n_edc = w_image[xPoint][p]		SetDataFolder $DFEndStatic Constant SCALINGMODE_IDX = 0Static Constant SCALINGMODE_CHANNEL = 1// returns which check box is actually checked for the scaling mode for TMF/transmission wave// and for dispersion/transmission waveStatic Function getScalingMode()	ControlInfo dis_cbidx	if (V_Value == 1)		return SCALINGMODE_IDX	endif	return SCALINGMODE_CHANNELEnd// transmission-function normalization	FB 08/01/03////////////////////////////////////////////////////////////////////////////////////////////////////////// read the input from the panel, call 'tmf_norm' and update the wavenoteStatic Function buttonPreviewTMFCorr(ctrlName)	String ctrlName		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:norm		NVAR e0 = gv_tmfE0; NVAR e1 = gv_tmfE1	SVAR tmf_path = gs_TopDispPath	WAVE w_image = root:internalUse:panelcommon:w_image	WAVE w_image_u1 = root:internalUse:panelcommon:w_image_u1		Duplicate/o w_image_u1 root:internalUse:panelcommon:w_image_u2		Duplicate/o w_image root:internalUse:panelcommon:w_image_u1		String notestr = note(w_image)			ControlInfo tmf_c1; Variable data = v_value	switch (data)		case 1:	// 'from data'			utils_getWaveAvg(w_image,0,from=e0,to=e1)			Duplicate/o w_avg w_aTMF			NVAR gv_tmfSmooth			if (gv_tmfSmooth > 0)				Smooth gv_tmfSmooth, w_aTMF			endif						tmf_norm(w_image,w_aTMF,0)	// slice scaling						Note/K w_image			notestr = ReplaceNumberByKey("aTMFStartEnergy", notestr,e0,"=","\r")			notestr = ReplaceNumberByKey("aTMFEndEnergy", notestr,e1,"=","\r")			Note w_image, notestr			break		case 0:	// from wave			tmf_norm(w_image,$tmf_path,getScalingMode())			Note/K w_image			notestr = ReplaceStringByKey("aTMFWave", notestr,tmf_path,"=","\r")			Note w_image, notestr			break	endswitch		setDataFolder $DFEnd// read the input from the panel, call 'tmf_norm' and update the wavenoteStatic Function buttonSaveTMFNorm(ctrlName)	String ctrlName		String Path, wName, DestPath, DestPath0	// really go for it?	if (check_multiple_sel() == 2)		abort	endif		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:norm		NVAR e0 = gv_tmfE0; NVAR e1 = gv_tmfE1	SVAR tmf_path = gs_TopDispPath	SVAR path_List = root:internalUse:panelcommon:gs_sourcePathList	SVAR name_list = root:internalUse:panelcommon:gs_sourceNameList		Variable index = 0	do		Path = StringFromList(index, path_list)			wName = StringFromList(index, name_List)		if(strlen(Path)==0)			break		endif		WAVE M = $path		Duplicate/O M w_save		String notestr = note(w_save)				ControlInfo tmf_c1; Variable data = v_value		switch (data)			case 1:	// 'from data'				utils_getWaveAvg(w_save,0,from=e0,to=e1)				Duplicate/o w_avg w_aTMF				NVAR gv_tmfSmooth				if (gv_tmfSmooth > 0)					Smooth gv_tmfSmooth, w_aTMF				endif				tmf_norm(w_save,w_aTMF,0)	// slice scaling								Note/K w_save				notestr = ReplaceNumberByKey("aTMFStartEnergy", notestr,e0,"=","\r")				notestr = ReplaceNumberByKey("aTMFEndEnergy", notestr,e1,"=","\r")				Note w_save, notestr				break			case 0:	// from wave				tmf_norm(w_save,$tmf_path,getScalingMode())				Note/K w_save				notestr = ReplaceStringByKey("aTMFWave", notestr,tmf_path,"=","\r")				Note w_save, notestr				break		endswitch				//wName = StringByKey("WaveName", note(w_save),"=","\r")		//DestPath = "root:carpets:normalized:"+wName		ControlInfo dis_c6; Variable overwrite=v_value		DestPath0 = utils_uniqueName(w_save, "root:carpets:normalized:",wName, overwrite)		if (str2num(Destpath0) == -1)			index += 1		else			Duplicate/o w_save $DestPath0				switch_image_and_DCs(w_save)		endif			index+=1	while(index < ItemsInlist(path_list))	setDataFolder $DFEnd// data-rangeStatic Function buttonReadMarquee(ctrlName)	String ctrlName	NVAR e0 = root:internalUse:norm:gv_tmfE0	NVAR e1 = root:internalUse:norm:gv_tmfE1		GetMarquee/K image_en, image_m	if (v_flag == 0)		DoAlert 0, "You need to set a marquee first (this is the rectangle, you usually use to expand a graph)."	endif	e0 = V_bottom	e1 = V_topEndStatic Function buttonDefaultE0E1(ctrlname)	String ctrlname		Variable n = 30	// lowest or highest n-MDC's to average	WAVE M = root:internalUse:panelcommon:w_image	NVAR e0 = root:internalUse:norm:gv_tmfE0	NVAR e1 = root:internalUse:norm:gv_tmfE1		if(stringmatch(ctrlName, "tmf_blow"))		// low		e0 = dimoffset(M,1)		e1 = e0 + n * dimdelta(M,1)	elseif(stringmatch(ctrlName, "tmf_bhigh"))	// high		e0 = utils_y1(M) - n* dimdelta(M,1)		e1 = utils_y1(M)	endifEnd// dispersion correction	FB 07/28/03///////////////////////////////////////////////////////////////////////////////////////////////////////////Static Function buttonPreviewDispCorr(ctrlName)	String ctrlName		String Df = GetDataFolder (1)	String e_scale		SetDataFolder root:internalUse:norm	WAVE/T w_dispNames		WAVE w_image = root:internalUse:panelcommon:w_image	WAVE w_image_u1= root:internalUse:panelcommon:w_image_u1	//WAVE w_image_u2= root:internalUse:panelcommon:w_image_u2	// the 'undo' waves	Duplicate/o w_image_u1 root:internalUse:panelcommon:w_image_u2	Duplicate/o w_image root:internalUse:panelcommon:w_image_u1		ControlInfo dis_lb1	String path = "root:carpets:normalized:NormWaves:" + w_dispNames[v_value]		WAVE w_disp = $path	// the dispersion wave			// get the Fermi-level		Variable Ef		ControlInfo dis_cbEk		if (v_value)			EF = 0			e_scale = "kinetic"		else			ControlInfo dis_cbEiDisp			if (v_value)				EF = mean(w_disp,-inf,inf)			else				ControlInfo dis_sv0; EF = v_value			endif			e_scale = "initial state"		endif		disp_corr(w_image,w_disp,EF,getScalingMode(), e_scale)		// EF = 0 for kinetic energy		WAVE n_mdc = root:internalUse:panelcommon:n_mdc	WAVE n_edc = root:internalUse:panelcommon:n_edc	WAVE n_edc_x = root:internalUse:panelcommon:n_edc_x	Variable xPoint = pcsr(B,"norm_panel")	Variable yPoint = qcsr(B,"norm_panel")	SetScale/I x utils_y0(w_image),utils_y1(w_image), n_edc_x	n_edc_x = x	n_mdc = w_image[p][yPoint]	n_edc = w_image[xPoint][p]		SetDataFolder $DFEndStatic Function buttonSaveDispNorm(ctrlName)	String ctrlName		String wName, path, DestPath, DestPath0	String e_scale		// really go for it?	if (check_multiple_sel() == 2)		abort	endif		// dispersion wave	WAVE/T w_dNames = root:internalUse:norm:w_dispNames	ControlInfo dis_lb1	String disp_path = "root:carpets:normalized:NormWaves:" + w_dNames[v_value]	WAVE w_disp = $disp_path		// get the Fermi-level		Variable Ef		ControlInfo dis_cbEk		if (v_value)			EF = 0			e_scale = "kinetic"		else			ControlInfo dis_cbEiDisp			if (v_value)				EF = mean(w_disp,-inf,inf)			else				ControlInfo dis_sv0; EF = v_value			endif			e_scale = "initial state"		endif		SVAR path_List = root:internalUse:panelcommon:gs_sourcePathList	SVAR name_list = root:internalUse:panelcommon:gs_sourceNameList	Variable i = 0	do		path = StringFromlist(i, path_list)		wName = StringFromList(i, name_List)		WAVE w = $path		Duplicate/O w w_save		//wName = StringByKey("WaveName", note(w),"=","\r")				disp_corr(w_save,w_disp,EF,getScalingMode(),e_scale)		//DestPath = "root:carpets:normalized:"+wName		ControlInfo dis_c6; Variable overwrite=v_value		DestPath0 = utils_uniqueName(w_save, "root:carpets:normalized:",wName, overwrite)		if (str2num(Destpath0) == -1)			i += 1		else			Duplicate/o w_save $DestPath0			switch_image_and_DCs(w_save)		endif	i += 1	while (i < ItemsInlist(path_list))		KillWaves/Z w_saveEnd// generate the text waves for the dispersion/tmf listbox// update 'w_norm', the current wave to be displayed in the mdc-graphStatic Function listBoxDispNames(ctrlname, row, col, event)	String ctrlName	Variable row	Variable col	Variable event		String suffix	ControlInfo norm	if (v_Flag > 0)		if (stringmatch(s_value,"TMF"))			suffix = "*_aTMF*"		else			suffix = "*_disp*"		endif	else		suffix = "*_disp"	endif			if (event == 1 || event == 4)	// update wave-list		String List = utils_getWaveList("root:carpets:normalized:NormWaves:", match=suffix, dim=1)		utils_stringList2wave(List)		duplicate/o w_StringList root:internalUse:norm:w_dispNames	endif		if (event == 4)	// update top-path and display-wave		SVAR topItem = root:internalUse:norm:gs_TopDispPath		topItem = "root:carpets:normalized:NormWaves:"+StringFromList(row,List)				WAVE w_norm = root:internalUse:norm:w_norm		WAVE temp = $topItem		if (waveexists(temp))			Duplicate/o temp root:internalUse:norm:w_norm		else			w_norm = NaN		endif	endif		KillWaves/Z w_StringList	return 0EndStatic Function checkBoxShowDisp(ctrlName,checked)	String ctrlName	Variable checked	WAVE w_norm = root:internalUse:norm:w_norm	WAVE  n_mdc = root:internalUse:panelcommon:n_mdc		if( checked )			Appendtograph w_norm			RemoveFromGraph/Z n_mdc		else			Appendtograph n_mdc			ModifyGraph rgb(n_mdc)=(1,16019,65535)			RemoveFromGraph/Z w_norm		//$nameofwave(w_disp)		endifEnd// cropping																	FB 09-23-03/////////////////////////////////////////////////////////////////////////////////////Static Function setVariableLiveCrop(ctrlName,varNum,varStr,varName)	String ctrlName	Variable varNum	String varStr	String varName	String DF = GetDataFolder (1)	SetDatafolder root:internalUse:norm:		SVAR path = root:internalUse:panelcommon:gs_TopItemPath	WAVE w_source = $path	NVAR p0 = gv_p0; NVAR p1 = gv_p1; NVAR q0 = gv_q0; NVAR q1 = gv_q1		ControlInfo cal_cbpEnabled	// 04-22-04: added p/q selection checkboxes. 	if (v_value == 0)		p0 = 0		p1 = dimsize(w_source,0)-1	endif	ControlInfo cal_cbqEnabled	if (v_value == 0)		q0 = 0		q1 = dimsize(w_source,1)-1	endif		Variable np = dimsize(w_source,0)	Variable nq = dimsize(w_source,1)		Duplicate/o/r=[p0,p1][q0,q1] w_source w_cropped		crop_note(w_cropped,p0,p1,q0,q1,np,nq)		switch_image_and_DCs(w_cropped)		SetDataFolder $DFEndStatic Function buttonSaveCrop(ctrlName)	String ctrlName	if (check_multiple_sel() == 2)		abort	endif		String DF = GetDataFolder (1)	SetDatafolder root:internalUse:norm:		String path, wName, destPath, destPath0	Variable np, nq		SVAR path_list = root:internalUse:panelcommon:gs_sourcePathList	SVAR name_list = root:internalUse:panelcommon:gs_sourceNameList	NVAR p0 = gv_p0; NVAR p1 = gv_p1; NVAR q0 = gv_q0; NVAR q1 = gv_q1			Variable index = 0	do		path = StringFromList(index, path_list)		wName = StringFromList(index, name_list)		WAVE w_source = $path					ControlInfo cal_cbpEnabled	// 04-22-04: added p/q selection checkboxes. 			if (v_value == 0)				p0 = 0				p1 = dimsize(w_source,0)-1			endif			ControlInfo cal_cbqEnabled			if (v_value == 0)				q0 = 0				q1 = dimsize(w_source,1)-1			endif			Duplicate/o/r=[p0,p1][q0,q1] w_source w_cropped				np = dimsize(w_source,0)		nq = dimsize(w_source,1)			crop_note(w_cropped,p0,p1,q0,q1,np,nq)				//wName = StringByKey("WaveName", note(w_cropped),"=","\r")	// this should be changed!! Get wavename from the globals (gs_sourceNameList)?		//DestPath = "root:carpets:normalized:"+wName		ControlInfo cal_cboverwriteCrop; Variable overwrite=v_value		DestPath0 = utils_uniqueName(w_cropped, "root:carpets:normalized:",wName, overwrite)		if (str2num(Destpath0) == -1)			index += 1		else			Duplicate/o w_cropped $DestPath0			switch_image_and_DCs(w_cropped)		endif	index += 1	while ( index < itemsinlist(path_list))	SetDataFolder $DFEnd// angle calibration																	FB 09-23-03/////////////////////////////////////////////////////////////////////////////////////Static Function setVariableLiveRescale(ctrlName,varNum,varStr,varName)	String ctrlName	Variable varNum	String varStr	String varName	String DF = GetDataFolder (1)	SetDatafolder root:internalUse:norm:		NVAR ch0 = gv_ch0	NVAR degPerCh = gv_d2c	SVAR path = root:internalUse:panelcommon:gs_TopItemPath	WAVE w_source = $path		Variable firstchannel = utils_getScientaChannel(w_source,0)	Variable lastchannel = utils_getScientaChannel(w_source,1)		Variable x0 = (firstchannel - ch0) * degPerCh	Variable x1 = (lastchannel - ch0) * degPerCh		SetScale/I x x0,x1,"" w_source		String notestr = note(w_source)	notestr = ReplaceNumberByKey("CCDXChannelZero",notestr, ch0,"=","\r")	notestr = ReplaceNumberByKey("CCDDegreePerChannel",notestr, degPerCh,"=","\r")	Note/K w_source	Note w_source, notestr			switch_image_and_DCs(w_source)	SetDataFolder $DFEndStatic Function buttonSaveRescaled(ctrlName)	String ctrlName	// really go for it?	if (check_multiple_sel() == 2)		abort	endif		String wName, path, destpath, destpath0		String DF = GetDataFolder (1)	SetDatafolder root:internalUse:norm:		NVAR ch0 = gv_ch0	NVAR degPerCh = gv_d2c	SVAR path_list = root:internalUse:panelcommon:gs_sourcePathList	SVAR name_list = root:internalUse:panelcommon:gs_sourceNameList		Variable index = 0	do		path = StringFromList(index,path_list)		wName = StringFromList(index, name_List)		WAVE w_source = $path		Duplicate/o w_source w_rescaled		Variable firstchannel = utils_getScientaChannel(w_source,0)		Variable lastchannel = utils_getScientaChannel(w_source,1)				Variable x0 = (firstchannel - ch0) * degPerCh		Variable x1 = (lastchannel - ch0) * degPerCh				SetScale/I x x0,x1,"" w_rescaled				String notestr = note(w_rescaled)		notestr = ReplaceNumberByKey("CCDXChannelZero",notestr, ch0,"=","\r")		notestr = ReplaceNumberByKey("CCDDegreePerChannel",notestr, degPerCh,"=","\r")		Note/K w_rescaled		Note w_rescaled, notestr			//wName = StringByKey("WaveName", note(w_source),"=","\r")		//DestPath = "root:carpets:normalized:"+wName		ControlInfo cal_cboverwriteRescale; Variable overwrite=v_value		DestPath0 = utils_uniqueName(w_rescaled, "root:carpets:normalized:",wName, overwrite)		if (str2num(Destpath0) == -1)	// '-1' means to skip this carpet			index += 1		else			Duplicate/o w_rescaled $DestPath0			switch_image_and_DCs(w_rescaled)		endif		index += 1	while ( index < itemsinlist(path_list))		SetDataFolder $DFEnd					// all the checkbox switches://///////////////////////////////////////////////////////////////////////////////////Static Function checkBoxDispScaling(name,value)	String name	Variable value		CheckBox dis_cbchannel, value=0	CheckBox dis_cbidx, value=0	CheckBox $name, value=1End// data/transmission wave switchStatic Function checkBoxTMF(name,value)	String name	Variable value		Variable bVal	strswitch (name)		case "tmf_c0":			bVal= 1			Button tmf_b4, disable=2			Button tmf_blow, disable=2			Button tmf_bhigh, disable=2			GroupBox tmf_gb1, disable=2			GroupBox tmf_gb0, disable=0			//Listbox dis_lb1, disable=0			CheckBox dis_cbchannel, disable=0			CheckBox dis_cbidx, disable=0			CheckBox dis_c2, disable=0			break		case "tmf_c1":			bVal= 2			Button tmf_b4, disable=0			Button tmf_blow, disable=0			Button tmf_bhigh, disable=0			GroupBox tmf_gb1, disable=0			GroupBox tmf_gb0, disable=2			//Listbox dis_lb1, disable=2			CheckBox dis_cbchannel, disable=2			CheckBox dis_cbidx, disable=2			CheckBox dis_c2, disable=2			break	endswitch	CheckBox tmf_c0,value= bVal==1	CheckBox tmf_c1,value= bVal==2End// energy scale on 'dispersion tab'Static Function checkBoxEiEk(name,value)	String name	Variable value		Variable checkVal	strswitch (name)		case "dis_cbEk":			checkVal= 3			break		case "dis_cbEiDisp":			checkVal= 4			break		case "dis_cbEiFermi":			checkVal= 5			break	endswitch	CheckBox dis_cbEk,value= checkVal==3	CheckBox dis_cbEiDisp,value= checkVal==4	CheckBox dis_cbEiFermi,value= checkVal==5End////////////////////////////////////////// Private functions// N.B.: the keyword "Static" in front of "Procedure" limits visibility to the containing Igor Procedure File only.////////////////////////////////////////// set the panel-globals to default values for the present waveStatic Function setToDefaults(w)	WAVE w	// suppress update?	ControlInfo n_check0	if(v_value)		return -1	endif		String notestr = note(w)		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:norm		// name for the dispersion wave	SVAR w_dispNameBase = gs_w_dispNameBase	w_dispNameBase = StringByKey("WaveName", notestr,"=","\r")				// cropping	NVAR p0 = gv_p0; p0 = 0	NVAR p1 = gv_p1; p1 = dimsize(w,0)-1	NVAR q0 = gv_q0; q0 = 0	NVAR q1 = gv_q1; q1 = dimsize(w,1)-1	NVAR pmax = gv_pmax; pmax = p1	NVAR qmax = gv_qmax; qmax = q1		// angle cal.:	NVAR ch0 = gv_ch0	ch0 = NumberByKey("CCDXChannelZero",notestr,"=","\r")	NVAR d2c = gv_d2c	d2c = NumberByKey("CCDDegreePerChannel",notestr,"=","\r")		SetDataFolder $DFEndStatic Function update_crop_limits(w)	WAVE w		Variable p1 = dimsize(w,0)-1	Variable q1 = dimsize(w,1)-1		SetVariable cal_sv0, limits={0,p1,1}	SetVariable cal_sv1, limits={0,p1,1}	SetVariable cal_sv2, limits={0,q1,1}	SetVariable cal_sv3, limits={0,q1,1}	EndStatic Function switch_image_and_DCs(M)	WAVE M		String sDf = GetDataFolder (1)	SetDataFolder root:internalUse:panelcommon			Duplicate/o M w_image		Make/o/n=(dimsize(M,0)) n_mdc		Make/o/n=(dimsize(M,1)) n_edc, n_edc_x		SetScale/I x utils_x0(M),utils_x1(M), n_mdc		SetScale/I x utils_y0(M),utils_y1(M), n_edc, n_edc_x		n_edc_x = x				//WAVE n_mdc, n_edc, n_edc_x		Variable xPoint, yPoint		xPoint = pcsr(B,"norm_panel")		yPoint = qcsr(B,"norm_panel")		//SetScale/I x utils_y0(w_image),utils_y1(w_image), n_edc_x		//n_edc_x = x		n_mdc = w_image[p][yPoint]		n_edc = w_image[xPoint][p]				//DoUpdate			SetDataFolder $sDFEnd// checks for point numbers and 'already corrected' but does not update the wave-noteStatic Function tmf_norm(w_image,w_aTMF,scalingMode)	WAVE w_image,w_aTMF	Variable scalingMode	Variable xpnt = dimsize(w_image,0)	String notestr = note(w_image)	String w_name = StringByKey("WaveName",notestr,"=","\r")	String str0		// already corrected?	String dum0 = StringByKey("aTMFStartEnergy",notestr,"=","\r")	Variable corr = strlen(StringByKey("aTMFStartEnergy",notestr,"=","\r")) > 0	corr += strlen(StringByKey("aTMFWave",notestr,"=","\r")) > 0		if (corr) 		DoAlert 1, "The image '"+w_name+"' has already been corrected.\rAdd second correction?"		if (v_flag == 2)			return -1		endif	endif		switch (scalingMode)		case SCALINGMODE_IDX:			// for index-scaling w_disp  and w_image must have the same number of points			if (dimsize(w_aTMF,0) != xpnt)				String errMsg = "Wrong number of points in the dispersion wave ("+num2str(dimsize(w_aTMF,0))+").\r"				errMsg += "'"+w_name+"' ("+num2str(xpnt)+" x-pnts) has not been corrected."				DoAlert 0,  errMsg				return -1			endif			Duplicate/o w_aTMF, internal_TMF			break		case SCALINGMODE_CHANNEL:			// for channel-scaling we have to interpolate w_disp to the channels of w_image			Variable ch0 = utils_getScientaChannel(w_image,0)			Variable ch1 = utils_getScientaChannel(w_image,1)						Make/O/N=(xpnt) internal_TMF			SetScale/I x ch0, ch1, internal_TMF			Interpolate2/A=0/I=3/T=1/Y=internal_TMF w_aTMF			break;	endswitch	WAVE internal_TMF	internal_TMF = 1/internal_TMF	WaveStats/q internal_TMF	internal_TMF /= v_avg	w_image *= internal_TMF[p]	//	KillWaves/Z internal_TMF, w_TMF_xEnd// EF = 0 for kinetic energy, ch = 1 for channel scaling (default)Static Function disp_corr(w_image,w_disp,EF,scalingMode, e_scale)	WAVE w_image,w_disp	Variable EF,scalingMode	String e_scale	Variable xpnt = dimsize(w_image,0)	String notestr = note(w_image)	String w_name = StringByKey("WaveName",notestr,"=","\r")		// already corrected?	if (strlen(StringByKey("DispersionCorrection",notestr,"=","\r")) > 0) 		DoAlert 1, "The image '"+w_name+"' has already been corrected.\rAdd second correction?"		if (v_flag == 2)			return -1		endif	endif		switch(scalingMode)		case SCALINGMODE_IDX:			// for index-scaling w_disp  and w_image must have the same number of points			if (dimsize(w_disp,0) != xpnt)				String errMsg = "Wrong number of points in the dispersion wave ("+num2str(xpnt)+").\r"				errMsg += "'"+w_name+"' ("+num2str(xpnt)+" x-pnts) has not been corrected."				DoAlert 0,  errMsg				return -1			endif			Duplicate/o w_disp, internal_disp			break		case SCALINGMODE_CHANNEL:			// for channel-scaling we have to interpolate w_disp to the channels of w_image			Variable ch0 = utils_getScientaChannel(w_image,0)			Variable ch1 = utils_getScientaChannel(w_image,1)			Make/O/N=(xpnt) internal_disp			SetScale/I x ch0, ch1, internal_disp			Interpolate2/A=0/I=3/T=1/Y=internal_disp w_disp			break	endswitch			shift_EF(w_image,internal_disp)	Note/K w_image	notestr = ReplaceStringByKey("DispersionCorrection",notestr, nameofwave(w_disp),"=","\r")	notestr = ReplaceStringByKey("EnergyScale",notestr, e_scale,"=","\r")	Note w_image, notestr		SetScale/I y utils_y0(w_image)-EF,utils_y1(w_image)-EF, w_image	KillWaves/Z internal_disp, w_disp_xEnd// interpolate all EDC's in 'w' on a corrected energy scale// EDC's are in the q/y dimension	FB 9/22/02Static Function shift_EF(w,w_ef)	Wave w, w_ef	Variable e0 = DimOffset(w, 1)	Variable e1 = DimOffset(w, 1) + (dimsize(w,1)-1) *DimDelta(w,1)	Variable estep = DimDelta(w,1)	Variable Ef = mean(w_ef,-inf,inf)		Make/O/N=(dimsize(w,1)) tempEDC, ekin, EDC_interp	SetScale/I x e0,e1, EDC_interp		Variable index = 0	do		tempEDC[]=w[index][p]		ekin = e0+estep*p + (Ef - w_ef[index])	// true kinetic energy of EDC		EDC_interp = interp(x,ekin,tempEDC)		//	ekin is the kinetic energy wave corresponding to tempEDC		w[index][]=EDC_interp[q]	index+=1	while (index < dimsize(w,0) )		KillWaves/Z tempEDC, ekin, EDC_interpEnd// returns 1 if ok.Static Function check_multiple_sel()	WAVE w= root:internalUse:panelcommon:w_sourceNamesSel	Variable num = sum(w,-inf,inf)		if (num > 1)		DoAlert 1, "You have more than one carpet selected. Normalize all?"	endif	return v_flagEndStatic Function getNumChannels(w,dim)	WAVE w; Variable dim		String notestr = note(w)	Variable firstYchannel = NumberByKey("CCDFirstYChannel",notestr,"=","\r")	Variable lastYchannel = NumberByKey("CCDLastYChannel",notestr,"=","\r")	Variable firstXchannel = NumberByKey("CCDFirstXChannel",notestr,"=","\r")	Variable lastXchannel = NumberByKey("CCDLastXChannel",notestr,"=","\r")	Variable NumberOfSlices = NumberByKey("NumberOfSlices", notestr,"=","\r")	Variable NumberOfEnergies = NumberByKey("NumberOfEnergies", notestr,"=","\r")		if(dim==0)		return (lastYchannel-firstYchannel+1)/NumberOfSlices	else		return (lastXchannel-firstXchannel+1)/NumberOfEnergies	endifEndStatic Function crop_note(w,p0,p1,q0,q1,np,nq)	WAVE w; Variable p0, p1, q0, q1, np, nq	// np, nq are the dimension sizes of the uncropped carpet		Variable channels_slice = getNumChannels(w,0)	String notestr = note(w)		// first/last Scienta-Y (angles)	Variable source_ch0 = NumberByKey("CCDFirstYChannel",notestr,"=","\r")	Variable source_ch1 = NumberByKey("CCDLastYChannel",notestr,"=","\r")	Variable ch0 = source_ch0 + p0 * getNumChannels(w,0)	Variable ch1 = source_ch1 - (np - 1 -p1) * getNumChannels(w,0)		// 04-22-04 added the -1	notestr = ReplaceNumberByKey("CCDFirstYChannel",notestr, ch0,"=","\r")	notestr = ReplaceNumberByKey("CCDLastYChannel",notestr, ch1,"=","\r")	Variable slices = p1 - p0 + 1						// 04-22-04 added cropped slice number	notestr = ReplaceNumberByKey("NumberOfSlices", notestr, slices, "=", "\r")		// first/last Scienta-X, makes only for fixed mode sense to update!//	Variable source_x0 = NumberByKey("CCDFirstXChannel",notestr,"=","\r")//	Variable source_x1 = NumberByKey("CCDLastXChannel",notestr,"=","\r")//	Variable x0 = source_x0 + q0 * getNumChannels(w,1)//	Variable x1 = source_x1 - (nq -q1) * getNumChannels(w,1)//	notestr = ReplaceNumberByKey("CCDFirstXChannel",notestr, x0,"=","\r")//	notestr = ReplaceNumberByKey("CCDLastXChannel",notestr, x1,"=","\r")		// crop-values	notestr = ReplaceNumberByKey("x0Crop",notestr, p0,"=","\r")	notestr = ReplaceNumberByKey("x1Crop",notestr, p1,"=","\r")	notestr = ReplaceNumberByKey("y0Crop",notestr, q0,"=","\r")	notestr = ReplaceNumberByKey("y1Crop",notestr, q1,"=","\r")	Note/K w	Note w, notestr		//print ch0, ch1, x0,x1End