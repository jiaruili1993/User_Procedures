#pragma rtGlobals = 1		// Use modern global access method.#pragma version = 3.00#pragma ModuleName = bzplanner#pragma IgorVersion = 5.0////////////////////////////////////////// Public functions////////////////////////////////////////Function bzplanner_open(ctrlname) : ButtonControl	String ctrlname		If (DataFolderExists("root:internalUse:bzplanner") == 0)		init()	EndIf		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner		DoWindow/K bzplanner_panel	Display/K=1 as "Brillouin Zone Display "	DoWindow/C bzplanner_panel	utils_resizeWindow("bzplanner_panel",510,410)	utils_autoPosWindow("bzplanner_panel",win=127)	String cmd = "ControlBar 180"	execute cmd	NVAR gv_theta_start, gv_theta_end, gv_theta_steps, gv_theta_off	NVAR gv_alpha_start, gv_alpha_end, gv_alpha_steps, gv_alpha_off	NVAR gv_phi_start, gv_phi_end, gv_phi_steps, gv_phi_off	NVAR gv_om_start, gv_om_end, gv_om_steps, gv_om_off	NVAR gv_beta_start, gv_beta_end, gv_beta_steps, gv_beta_off	NVAR gv_gamma_start, gv_gamma_end, gv_gamma_steps, gv_gamma_off	TabControl bzp0,proc=bzplanner#tabControlChange,pos={4,4},size={440,165},tabLabel(0)="Flip",value=0	SetVariable sv00_tab0,pos={20,24},size={90,18},limits={-inf,inf,1},title="th_start:", value=gv_theta_start	SetVariable sv01_tab0,pos={120,24},size={90,18},limits={-inf,inf,1},title="th_end:", value=gv_theta_end	SetVariable sv02_tab0,pos={220,24},size={90,18},limits={1,inf,1},title="th_steps:", value=gv_theta_steps	SetVariable sv03_tab0,pos={320,24},size={90,18},limits={-inf,inf,1},title="th_off:", value=gv_theta_off	SetVariable sv10_tab0,pos={20,44},size={90,18},limits={-inf,inf,1},title="al_start:", value=gv_alpha_start	SetVariable sv11_tab0,pos={120,44},size={90,18},limits={-inf,inf,1},title="al_end:", value=gv_alpha_end	SetVariable sv12_tab0,pos={220,44},size={90,18},limits={1,inf,1},title="al_steps:", value=gv_alpha_steps	SetVariable sv13_tab0,pos={320,44},size={90,18},limits={-inf,inf,1},title="al_off:", value=gv_alpha_off	SetVariable sv20_tab0,pos={20,64},size={90,18},limits={-inf,inf,1},title="ph_start:", value=gv_phi_start	SetVariable sv21_tab0,pos={120,64},size={90,18},limits={-inf,inf,1},title="ph_end:", value=gv_phi_end	SetVariable sv22_tab0,pos={220,64},size={90,18},limits={1,inf,1},title="ph_steps:", value=gv_phi_steps	SetVariable sv23_tab0,pos={320,64},size={90,18},limits={-inf,inf,1},title="ph_off:", value=gv_phi_off	SetVariable sv30_tab0,pos={20,84},size={90,18},limits={-inf,inf,1},title="om_start:", value=gv_om_start	SetVariable sv31_tab0,pos={120,84},size={90,18},limits={-inf,inf,1},title="om_end:", value=gv_om_end	SetVariable sv32_tab0,pos={220,84},size={90,18},limits={1,inf,1},title="om_steps:", value=gv_om_steps	SetVariable sv33_tab0,pos={320,84},size={90,18},limits={-inf,inf,1},title="om_off:", value=gv_om_off	SetVariable sv40_tab0,pos={20,104},size={90,18},limits={-inf,inf,1},title="b_start:", value=gv_beta_start	SetVariable sv41_tab0,pos={120,104},size={90,18},limits={-inf,inf,1},title="b_end:", value=gv_beta_end	SetVariable sv42_tab0,pos={220,104},size={90,18},limits={1,inf,1},title="b_steps:", value=gv_beta_steps	SetVariable sv43_tab0,pos={320,104},size={90,18},limits={-inf,inf,1},title="b_off:", value=gv_beta_off	SetVariable sv50_tab0,pos={20,124},size={90,18},limits={-inf,inf,1},title="g_start:", value=gv_gamma_start	SetVariable sv51_tab0,pos={120,124},size={90,18},limits={-inf,inf,1},title="g_end:", value=gv_gamma_end	SetVariable sv52_tab0,pos={220,124},size={90,18},limits={1,inf,1},title="g_steps:", value=gv_gamma_steps	SetVariable sv53_tab0,pos={320,124},size={90,18},limits={-inf,inf,1},title="g_off:", value=gv_gamma_off	Button addData_tab0, pos={20,144},size={90,18},proc=bzplanner#buttonAddData,title="add data"	Button clearData_tab0, pos={120,144},size={90,18},proc=bzplanner#buttonClearData,title="clear data"	PopupMenu pm0_tab0, pos={220, 144}, size={150,18},proc=bzplanner#popupMenuAnaDefaults,title="Presets",value=globals_knownExperiments	SetVariable sv60_tab0,pos={320,144},size={90,18},limits={-inf,inf,1},title="Ef:", value=gv_Ef	NVAR gv_theta_start, gv_theta_end, gv_theta_steps, gv_theta_off	NVAR gv_om_start, gv_om_end, gv_om_steps, gv_om_off	NVAR gv_sigma_start, gv_sigma_end, gv_sigma_steps, gv_sigma_off	NVAR gv_mu_start, gv_mu_end, gv_mu_steps, gv_mu_off	TabControl bzp0,tabLabel(1)="Berlin"	SetVariable sv00_tab1,pos={20,24},size={90,18},limits={-inf,inf,1},title="th_start:", value=gv_theta_start	SetVariable sv01_tab1,pos={120,24},size={90,18},limits={-inf,inf,1},title="th_end:", value=gv_theta_end	SetVariable sv02_tab1,pos={220,24},size={90,18},limits={1,inf,1},title="th_steps:", value=gv_theta_steps	SetVariable sv03_tab1,pos={320,24},size={90,18},limits={-inf,inf,1},title="th_off:", value=gv_theta_off	SetVariable sv10_tab1,pos={20,44},size={90,18},limits={-inf,inf,1},title="om_start:", value=gv_om_start	SetVariable sv11_tab1,pos={120,44},size={90,18},limits={-inf,inf,1},title="om_end:", value=gv_om_end	SetVariable sv12_tab1,pos={220,44},size={90,18},limits={1,inf,1},title="om_steps:", value=gv_om_steps	SetVariable sv13_tab1,pos={320,44},size={90,18},limits={-inf,inf,1},title="om_off:", value=gv_om_off	SetVariable sv20_tab1,pos={20,64},size={90,18},limits={-inf,inf,1},title="sig_start:", value=gv_sigma_start	SetVariable sv21_tab1,pos={120,64},size={90,18},limits={-inf,inf,1},title="sig_end:", value=gv_sigma_end	SetVariable sv22_tab1,pos={220,64},size={90,18},limits={1,inf,1},title="sig_steps:", value=gv_sigma_steps	SetVariable sv23_tab1,pos={320,64},size={90,18},limits={-inf,inf,1},title="sig_off:", value=gv_sigma_off	SetVariable sv30_tab1,pos={20,84},size={90,18},limits={-inf,inf,1},title="mu_start:", value=gv_mu_start	SetVariable sv31_tab1,pos={120,84},size={90,18},limits={-inf,inf,1},title="mu_end:", value=gv_mu_end	SetVariable sv32_tab1,pos={220,84},size={90,18},limits={1,inf,1},title="mu_steps:", value=gv_mu_steps	SetVariable sv33_tab1,pos={320,84},size={90,18},limits={-inf,inf,1},title="mu_off:", value=gv_mu_off	Button addData_tab1, pos={20,124},size={90,18},proc=bzplanner#buttonAddData,title="add data"	Button clearData_tab1, pos={120,124},size={90,18},proc=bzplanner#buttonClearData,title="clear data"	SetVariable sv40_tab1,pos={320,124},size={90,18},limits={-inf,inf,1},title="Ef:", value=gv_Ef	NVAR gv_Ef	NVAR gv_crystalAxisa, gv_crystalAxisb		TabControl bzp0, tabLabel(2)="setup"	GroupBox gb0_tab2,pos={20,24},size={110,110},title="Globals"	SetVariable sv3_tab2,pos={30,64},size={90,18},limits={-inf,inf,1},title="a:", value=gv_crystalAxisa	SetVariable sv4_tab2,pos={30,84},size={90,18},limits={-inf,inf,1},title="b:", value=gv_crystalAxisb	NVAR gv_flip_signs	GroupBox gb1_tab2,pos={140,24},size={200,110},title="Flip-specific: Sign conventions"	PopupMenu pmth_tab2, pos={150,44},size={90,18},title="theta",value="+;-",proc=bzplanner#popupMenuSignConv,mode=((gv_flip_signs&1)!=0)+1	PopupMenu pmal_tab2, pos={150,64},size={90,18},title="alpha",value="+;-",proc=bzplanner#popupMenuSignConv,mode=((gv_flip_signs&2)!=0)+1	PopupMenu pmph_tab2, pos={150,84},size={90,18},title="phi",value="+;-",proc=bzplanner#popupMenuSignConv,mode=((gv_flip_signs&4)!=0)+1	PopupMenu pmom_tab2, pos={250,44},size={90,18},title="omega",value="+;-",proc=bzplanner#popupMenuSignConv,mode=((gv_flip_signs&8)!=0)+1	PopupMenu pmbe_tab2, pos={250,64},size={90,18},title="beta",value="+;-",proc=bzplanner#popupMenuSignConv,mode=((gv_flip_signs&16)!=0)+1	PopupMenu pmga_tab2, pos={250,84},size={90,18},title="gamma",value="+;-",proc=bzplanner#popupMenuSignConv,mode=((gv_flip_signs&32)!=0)+1	SetVariable sv5_tab2,pos={150,104},size={150,18},limits={0,0,0},title="AngleSignConventions", value=gv_flip_signs,noedit=1	Button redrawBZ_tab2, pos={20,144},size={90,18},proc=bzplanner#buttonRedraw,title="redraw"		NVAR gv_numBZ	NVAR gv_BZ_azi	TabControl bzp0, tabLabel(3)="BZ display"	SetVariable sv0_tab3,pos={20,24},size={90,18},limits={-inf,inf,1},title="#BZ:", value=gv_numBZ	SetVariable sv1_tab3,pos={20,44},size={90,18},limits={-inf,inf,1},title="BZ azi:", value=gv_BZ_azi	Button redrawBZ_tab3, pos={130,24},size={90,18},proc=bzplanner#buttonRedraw,title="redraw"	SVAR gs_tightBind_Eq	NVAR gv_tightBind_start, gv_tightBind_inc, gv_tightBind_steps	NVAR gv_tightBind_autocontour	TabControl bzp0, tabLabel(4)="Tight Binding"	SetVariable sv0_tab4,pos={20,24},size={290,18},title="E(x,y) = ", value=gs_tightBind_Eq	SetVariable sv1_tab4,pos={20,44},size={90,18},limits={-inf,inf,1},title="E_start:", value=gv_tightBind_start	SetVariable sv2_tab4,pos={120,44},size={90,18},limits={-inf,inf,1},title="E_inc:", value=gv_tightBind_inc	SetVariable sv3_tab4,pos={220,44},size={90,18},limits={-inf,inf,1},title="E_steps:", value=gv_tightBind_steps	CheckBox cb0_tab4,pos={20,64},size={290,18},title="automatic contours",value=gv_tightBind_autocontour,variable=gv_tightBind_autocontour	Button addContour_tab4, pos={330,24},size={90,18},proc=bzplanner#buttonAddTightBinding,title="add tight binding"	Button clearContours_tab4, pos={330,44},size={90,18},proc=bzplanner#buttonClearTightBinding,title="clear tight binding"	NVAR gv_dataLive	SVAR gs_export_directory	TabControl bzp0, tabLabel(5)="Ex/Import"	GroupBox gb0_tab5,pos={20,24},size={160,110},title="Export"	SetVariable sv0_tab5,pos={30,44},size={140,18},title="directory", value=gs_export_directory	Button export_tab5, pos={30,64},size={140,18},proc=bzplanner#buttonExport,title="Export graph"	GroupBox gb1_tab5,pos={190,24},size={160,110},title="Import"	TitleBox tb_tab5,pos={200,44},size={140,54}, fsize=9, title="Import the cut from\rany of i_photo's\rDisplay panels",frame=0	CheckBox cb0_tab5,pos={200,84},size={140,18},title="live display from DC",value=gv_dataLive,variable=gv_dataLive,proc=bzplanner#checkBoxToggleDCLive	Button addFromData_tab5, pos={200,104}, size={140,18}, proc=bzplanner#buttonImport,title="Import from top graph"	WAVE/T w_dataList	WAVE/T w_tightbindList	TabControl bzp0, tabLabel(6)="Browse"	ListBox lbData_tab6, pos={20,24}, size={70,100}, mode=1, proc=bzplanner#listBoxClicked, listWave=root:internalUse:bzplanner:w_dataList	ListBox lbTightbind_tab6, pos={100,24}, size={90,100}, mode=1, proc=bzplanner#listBoxClicked, listWave=root:internalUse:bzplanner:w_tightbindList	TitleBox tbTightbind_tab6, pos={200,24}, size={200,100}, font="Helvetica", fsize=9, frame=2, variable=gs_dataTBInfo	Button del_tab6, pos={20,144},size={170,18},proc=bzplanner#buttonDelDataOrTB,title="delete selected"			populateDataAndTBList()	tabControlChange( "bzplanner_panel", 0 )		buttonRedraw("")//	ModifyGraph height={Aspect,1}	ModifyGraph height={Plan,1,left,bottom},width=0	SetDataFolder $DFEnd////////////////////////////////////////// Private functions: Control Callbacks////////////////////////////////////////Static Function checkBoxToggleDCLive(ctrlname,checked) : CheckBoxControl	String ctrlName	Variable checked			// 1 if selelcted, 0 if not	bzplanner_updateFromCommonPanel()EndStatic Function popupMenuSignConv(ctrlname, popNum, popStr) : PopupMenuControl	String ctrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string	NVAR gv_flip_signs = root:internalUse:bzplanner:gv_flip_signs	strswitch(ctrlname)		case "pmth_tab2": // theta			gv_flip_signs = (gv_flip_signs & (63-1)) | (popNum-1)*1			break		case "pmal_tab2": // alpha			gv_flip_signs = (gv_flip_signs & (63-2)) | (popNum-1)*2			break		case "pmph_tab2": // phi			gv_flip_signs = (gv_flip_signs & (63-4)) | (popNum-1)*4			break		case "pmom_tab2": // omega			gv_flip_signs = (gv_flip_signs & (63-8)) | (popNum-1)*8			break		case "pmga_tab2": // gamma			gv_flip_signs = (gv_flip_signs & (63-16)) | (popNum-1)*16			break		case "pmbe_tab2": // beta			gv_flip_signs = (gv_flip_signs & (63-32)) | (popNum-1)*32			break	endswitch	redraw()EndStatic Function buttonExport(ctrlname) : ButtonControl	String ctrlname	SVAR gs_export_directory = root:internalUse:bzplanner:gs_export_directory	// TODO: This is rather crude:	DuplicateDataFolder root:internalUse:bzplanner, $gs_export_directory	Display	redraw(directory=gs_export_directory, dontDrawImageData=1)	DoWindow/F bzplanner_panelEndFunction bzplanner_updateFromCommonPanel()	if (DataFolderExists("root:internalUse:bzplanner") == 0 || WinType("bzplanner_panel") == 0)		return 0	endif	String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner	NVAR gv_dataLive	WAVE w_image_data	String topWindow = WinName(0,1)	Variable focusChanged = 0	if (WaveExists(w_image_data))		DoWindow/F bzplanner_panel		focusChanged = 1		RemoveFromGraph w_image_data		KillWaves w_image_data	endif	if (gv_dataLive == 1)		DoWindow/F bzplanner_panel		focusChanged = 1		bzplanner_importFromCommonPanel(displayOnly=1, quiet=1)	endif	if (strlen(topWindow) != 0 && focusChanged == 1)		DoWindow/F $topWindow	endif	SetDataFolder $DF	EndFunction bzplanner_importFromCommonPanel([displayOnly, quiet])	Variable displayOnly, quiet	WAVE w_image = root:internalUse:panelcommon:w_image	if (WaveExists(w_image) == 0)		if (quiet == 0)			Abort "Top Image from internal panel not found. Try opening a DC panel..."		else			return 0		endif	endif	String notestr = note(w_image)	String manipulator = StringByKey("ManipulatorType", notestr, "=", "\r")	String eScale = StringByKey("EnergyScale", notestr, "=", "\r")	Variable gamma = NumberByKey("ScientaOrientation",notestr,"=","\r")	Variable al = NumberByKey("InitialAlphaAnalyzer", notestr, "=", "\r")	Variable th = NumberByKey("InitialThetaManipulator", notestr, "=", "\r")	Variable th_off  = NumberByKey("OffsetThetaManipulator", notestr, "=", "\r")	Variable ph = NumberByKey("InitialPhiManipulator", notestr, "=", "\r")	Variable ph_off = NumberByKey("OffsetPhiManipulator", notestr, "=", "\r")	Variable om = NumberByKey("InitialOmegaManipulator", notestr, "=", "\r")	Variable om_off = NumberByKey("OffsetOmegaManipulator", notestr, "=", "\r")	Variable EF = NumberByKey("FermiLevel", notestr, "=", "\r")	Variable hn = NumberByKey("PhotonEnergy", notestr, "=", "\r")	Variable workfunc = NumberByKey("WorkFunction", notestr, "=", "\r")	Variable signs = NumberByKey("AngleSignConventions", notestr, "=", "\r")	String wName = StringByKey("WaveName", notestr, "=", "\r")	// BUG FIX: It seems that somewhere in the (vintage part of) the macros, the	// WaveName keyword does not get copied, possibly in the process or normalize	// panels. So, if WaveName is empty, try as a fallback to set it to gs_topItemName 	// in root:internalUse:panelcommon	if (strlen(wName) == 0)		SVAR gs_TopItemName = root:internalUse:panelcommon:gs_TopItemName		wName = gs_TopItemName	endif	Variable energy = NaN	if (Stringmatch(eScale,"kinetic"))		energy = hn - EF - workfunc	elseif (stringmatch(eScale,"Initial*"))		energy = hn - workfunc	endif	if (numtype(gamma+al+th+th_off+ph+ph_off+om+om_off+EF+hn+workfunc+signs) != 0)		if (quiet == 0)			Abort "Not all info complete in order to graph the cut. Use the Filetable."		else			return 0		endif	endif		String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner	NVAR gv_BZ_azi	NVAR gv_flip_signs		if (gv_flip_signs != signs)		if (quiet == 0)			DoAlert 2, "Sign convention mismatch. Click yes to set bzplanner's sign convention to the current carpet's, no to keep it (cut may not be accurate)."			switch(V_Flag)				case 1:					gv_flip_signs = signs					break				case 2:					break				case 3:					SetDataFolder $DF					return 0					break			endswitch		else			gv_flip_signs = signs		endif	endif	String dataname	if (displayOnly == 0) // w_image is to be actually imported as a data set		Variable i		for( i = 0; exists("w_data"+num2str(i)); i += 1 )		endfor		dataname = "w_data"+num2str(i)	else		dataname = "w_image_data"		WAVE w = $dataname		if (WaveExists(w))			RemoveFromGraph w_image_data			KillWaves w_image_data		endif	endif	Make/O/N=(DimSize(w_image, 0),8) $dataname			Variable b	WAVE w = $dataname	Variable idx = 0	for (b = 0; b < DimSize(w_image, 0); b += 1)		w[idx][2] = th+th_off		w[idx][3] = al		w[idx][4] = ph+ph_off		w[idx][5] = om-gv_BZ_azi+om_off		w[idx][6] = utils_pnt2x(w_image, b)		w[idx][7] = gamma		idx += 1	endfor	notestr = "ManipulatorType="+manipulator+"\r"	sprintf notestr, "%sFermiEnergy=%e\r", notestr, energy	notestr += "Source="+wName+"\r"	sprintf notestr, "%sth=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, th, th, 1, th_off	sprintf notestr, "%sal=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, al, al, 1, 0	sprintf notestr, "%sph=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, ph, ph, 1, ph_off	sprintf notestr, "%som=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, om, om, 1, om_off	sprintf notestr, "%sbe=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, utils_x0(w_image), utils_x1(w_image), DimSize(w_image, 0), 0	sprintf notestr, "%sga=0:%.2f,1:%.2f,n:%d,off:%.2f", notestr, gamma, gamma, 1, 0	Note $dataname, notestr		if(displayOnly == 0)		drawDataSegment(dataname)	else		drawDataSegment(dataname, thick=2)	endif			SetDataFolder $DF	EndStatic Function buttonImport(ctrlname) : ButtonControl	String ctrlname	bzplanner_importFromCommonPanel(displayOnly=0)EndStatic Function buttonRedraw(ctrlname) : ButtonControl	String ctrlname	redraw()EndStatic Function buttonAddData(ctrlname) : ButtonControl	String ctrlname	String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner	NVAR gv_BZ_azi			Variable i	for( i = 0; exists("w_data"+num2str(i)); i += 1 )	endfor	String wname = "w_data"+num2str(i)	if (stringmatch(ctrlname,"addData_tab0")) // flip		NVAR gv_theta_start, gv_theta_end, gv_theta_steps, gv_theta_off		NVAR gv_alpha_start, gv_alpha_end, gv_alpha_steps, gv_alpha_off		NVAR gv_phi_start, gv_phi_end, gv_phi_steps, gv_phi_off		NVAR gv_om_start, gv_om_end, gv_om_steps, gv_om_off		NVAR gv_beta_start, gv_beta_end, gv_beta_steps, gv_beta_off		NVAR gv_gamma_start, gv_gamma_end, gv_gamma_steps, gv_gamma_off		NVAR gv_Ef		// wname[][0,1] are the kx, ky. 		// wname[][2,3,4,5,6,7] are {theta, alpha, phi, om, beta, gamma}.		Make/O/N=(gv_theta_steps*gv_phi_steps*gv_om_steps*gv_alpha_steps*gv_beta_steps*gv_gamma_steps,8) $wname				Variable t,a,p,o,b,g		Variable theta, alpha, phi, om, beta, gamma		WAVE w = $wname		Variable idx = 0		for (t = 0; t < gv_theta_steps; t += 1)		for (a = 0; a < gv_alpha_steps; a += 1)		for (p = 0; p < gv_phi_steps; p += 1)		for (o = 0; o < gv_om_steps; o += 1)		for (b = 0; b < gv_beta_steps; b += 1)		for (g = 0; g < gv_gamma_steps; g += 1)			theta = t * (gv_theta_end - gv_theta_start) / max(1, gv_theta_steps - 1) + gv_theta_start + gv_theta_off			alpha = a * (gv_alpha_end - gv_alpha_start) / max(1, gv_alpha_steps - 1) + gv_alpha_start + gv_alpha_off			phi = p * (gv_phi_end - gv_phi_start) / max(1, gv_phi_steps - 1) + gv_phi_start + gv_phi_off			om = o * (gv_om_end - gv_om_start) / max(1, gv_om_steps - 1) + gv_om_start + gv_om_off			beta = b * (gv_beta_end - gv_beta_start) / max(1, gv_beta_steps - 1) + gv_beta_start + gv_beta_off			gamma = g * (gv_gamma_end - gv_gamma_start) / max(1, gv_gamma_steps - 1) + gv_gamma_start + gv_gamma_off			w[idx][2] = theta			w[idx][3] = alpha			w[idx][4] = phi			w[idx][5] = om - gv_BZ_azi			w[idx][6] = beta			w[idx][7] = gamma			idx += 1		endfor		endfor		endfor		endfor		endfor		endfor		String notestr = "ManipulatorType=flip\r"		sprintf notestr, "%sFermiEnergy=%e\r", notestr, gv_Ef		notestr += "Source=\r"		sprintf notestr, "%sth=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_theta_start, gv_theta_end, gv_theta_steps, gv_theta_off		sprintf notestr, "%sal=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_alpha_start, gv_alpha_end, gv_alpha_steps, gv_alpha_off		sprintf notestr, "%sph=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_phi_start, gv_phi_end, gv_phi_steps, gv_phi_off		sprintf notestr, "%som=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_om_start, gv_om_end, gv_om_steps, gv_om_off		sprintf notestr, "%sbe=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_beta_start, gv_beta_end, gv_beta_steps, gv_beta_off		sprintf notestr, "%sga=0:%.2f,1:%.2f,n:%d,off:%.2f", notestr, gv_gamma_start, gv_gamma_end, gv_gamma_steps, gv_gamma_off		Note $wname, notestr	elseif (stringmatch(ctrlname,"addData_tab1")) // berlin		NVAR gv_theta_start, gv_theta_end, gv_theta_steps, gv_theta_off		NVAR gv_om_start, gv_om_end, gv_om_steps, gv_om_off		NVAR gv_sigma_start, gv_sigma_end, gv_sigma_steps, gv_sigma_off		NVAR gv_mu_start, gv_mu_end, gv_mu_steps, gv_mu_off		// wname[][0,1] are the kx, ky. 		// wname[][2,3,4,5] are {theta, om, sigma, mu}.		// wname[][7] is of type MANIP_TYPE (see above)		Make/O/N=(gv_theta_steps*gv_om_steps*gv_sigma_steps*gv_mu_steps,8) $wname				Variable s,m//,t,o		Variable sigma, mu//, theta, om		WAVE w = $wname		idx = 0		for (t = 0; t < gv_theta_steps; t += 1)		for (o = 0; o < gv_om_steps; o += 1)		for (s = 0; s < gv_sigma_steps; s += 1)		for (m = 0; m < gv_mu_steps; m += 1)			theta = t * (gv_theta_end - gv_theta_start) / max(1, gv_theta_steps - 1) + gv_theta_start + gv_theta_off			om = o * (gv_om_end - gv_om_start) / max(1, gv_om_steps - 1) + gv_om_start + gv_om_off			sigma = s * (gv_sigma_end - gv_sigma_start) / max(1, gv_sigma_steps - 1) + gv_sigma_start + gv_sigma_off			mu = m * (gv_mu_end - gv_mu_start) / max(1, gv_mu_steps - 1) + gv_mu_start + gv_mu_off			w[idx][2] = theta			w[idx][3] = om			w[idx][4] = sigma			// TODO: sign error? Why minus:			w[idx][5] = mu + gv_BZ_azi			w[idx][6,7] = NaN // unused			idx += 1		endfor		endfor		endfor		endfor		notestr = "ManipulatorType=berlin\r"		sprintf notestr, "%sFermiEnergy=%e\r", notestr, gv_Ef		notestr += "Source=\r"		sprintf notestr, "%sth=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_theta_start, gv_theta_end, gv_theta_steps, gv_theta_off		sprintf notestr, "%som=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_om_start, gv_om_end, gv_om_steps, gv_om_off		sprintf notestr, "%ssi=0:%.2f,1:%.2f,n:%d,off:%.2f\r", notestr, gv_sigma_start, gv_sigma_end, gv_sigma_steps, gv_sigma_off		sprintf notestr, "%smu=0:%.2f,1:%.2f,n:%d,off:%.2f", notestr, gv_mu_start, gv_mu_end, gv_mu_steps, gv_mu_off		Note $wname, notestr	else		Abort "manipulator type not recognized"	endif	drawDataSegment(wname)			SetDataFolder $DFEndStatic Function listBoxClicked(ctrlName,row,col,event) : ListboxControl	String ctrlName     // name of this control	Variable row        // row if click in interior, -1 if click in title	Variable col        // column number	Variable event      // event code	NVAR gv_selDataOld = root:internalUse:bzplanner:gv_selDataOld	NVAR gv_selTBOld = root:internalUse:bzplanner:gv_selTBOld	WAVE/T w_dataList = root:internalUse:bzplanner:w_dataList	WAVE/T w_tightbindList = root:internalUse:bzplanner:w_tightbindList	SVAR gs_dataTBInfo = root:internalUse:bzplanner:gs_dataTBInfo	Variable i		if (event == 4)		String cmd		if (gv_selDataOld != -1)			sprintf cmd, "ModifyGraph lSize(%s)=%f; DelayUpdate", w_dataList[gv_selDataOld], 1			Execute/Q/Z cmd		endif		if (gv_selTBOld != -1)			String contourName = ReplaceString("w_tightbind", w_tightbindList[gv_selTBOld], "w_rot_tightbind")			String contourList = TraceNameList("", ";", 2)			for (i = 0; i < ItemsInList(contourList); i += 1)				String contourTrace = StringFromList(i, contourList)				if (stringmatch(contourTrace, "*"+contourName+"*"))					sprintf cmd, "ModifyGraph lSize(%s)=%f; DelayUpdate", contourTrace, 1					Execute/Q/Z cmd							endif			endfor		endif		gs_dataTBInfo = ""		strswitch(ctrlname)			case "lbData_tab6":				ControlInfo lbData_tab6				if (V_Value != -1)					gv_selDataOld = V_Value					sprintf cmd, "ModifyGraph lSize(%s)=%f; DelayUpdate", w_dataList[V_Value], 3					Execute/Q/Z cmd					WAVE w = $("root:internalUse:bzplanner:"+w_dataList[V_Value])					gs_dataTBInfo = note(w)					ListBox lbTightbind_tab6, selRow=-1				endif				break			case "lbTightbind_tab6":				ControlInfo lbTightbind_tab6				if (V_Value != -1)					contourName = ReplaceString("w_tightbind", w_tightbindList[V_Value], "w_rot_tightbind")					gv_selTBOld = V_Value					contourList = TraceNameList("", ";", 2)					for (i = 0; i < ItemsInList(contourList); i += 1)						contourTrace = StringFromList(i, contourList)						if (stringmatch(contourTrace, "*"+contourName+"*"))							sprintf cmd, "ModifyGraph lSize(%s)=%f; DelayUpdate", contourTrace, 3							Execute/Q/Z cmd									endif					endfor					WAVE w = $("root:internalUse:bzplanner:"+w_tightbindList[V_Value])					gs_dataTBInfo = utils_wordWrap(note(w), 40)					ListBox lbData_tab6, selRow=-1				endif				break				break		endswitch	endif	DoUpdateEndStatic Function buttonDelDataOrTB(ctrlname) : ButtonControl	String ctrlName	WAVE/T w_dataList = root:internalUse:bzplanner:w_dataList	WAVE/T w_tightbindList = root:internalUse:bzplanner:w_tightbindList	ControlInfo lbData_tab6	if (V_Value != -1)		ListBox lbData_tab6, selRow=-1		listBoxClicked("lbData_tab6", -1, -1, 4)		redraw(dontDrawData = 1)		KillWaves/Z $("root:internalUse:bzplanner:"+w_dataList[V_Value])		redraw()		populateDataAndTBList()	endif	ControlInfo lbTightbind_tab6	if (V_Value != -1)		ListBox lbTightbind_tab6, selRow=-1		listBoxClicked("lbTightbind_tab6", -1, -1, 4)		String wname = ReplaceString("w_tightbind", w_tightbindList[V_Value], "w_rot_tightbind")		redraw(dontDrawData = 1)		KillWaves/Z $("root:internalUse:bzplanner:"+w_tightbindList[V_Value]), $wname		redraw()		populateDataAndTBList()	endifEndStatic Function popupMenuAnaDefaults(ctrlname, popNum, popStr) : PopupMenuControl	String ctrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string	String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner		NVAR gv_gamma_start, gv_gamma_end, gv_gamma_steps	gv_gamma_start = globals_getGamma(popStr)	gv_gamma_end = globals_getGamma(popStr)	gv_gamma_steps = 1	NVAR gv_beta_start, gv_beta_end, gv_beta_steps	gv_beta_start = globals_getStartBeta(popStr)	gv_beta_end = globals_getEndBeta(popStr)	gv_beta_steps = 50	NVAR gv_flip_signs	gv_flip_signs = globals_getSigns(popStr)	// Just as a side note, I need parentheses around this such that the right	// operator precedence is ensured (i.e. logical bitwise and BEFORE not equal)	// because Igor can't ensure the right operator precedence, that's how fucked up	// Igor really is	PopupMenu pmth_tab2 mode=((gv_flip_signs&1)!=0)+1	PopupMenu pmal_tab2 mode=((gv_flip_signs&2)!=0)+1	PopupMenu pmph_tab2 mode=((gv_flip_signs&4)!=0)+1	PopupMenu pmom_tab2 mode=((gv_flip_signs&8)!=0)+1	PopupMenu pmga_tab2 mode=((gv_flip_signs&16)!=0)+1	PopupMenu pmbe_tab2 mode=((gv_flip_signs&32)!=0)+1	ControlUpdate/W=bzplanner_panel pmth_tab2	ControlUpdate/W=bzplanner_panel pmal_tab2	ControlUpdate/W=bzplanner_panel pmph_tab2	ControlUpdate/W=bzplanner_panel pmom_tab2	ControlUpdate/W=bzplanner_panel pmga_tab2	ControlUpdate/W=bzplanner_panel pmbe_tab2	SetDataFolder $DFEndStatic Function buttonClearData(ctrlname) : ButtonControl	String ctrlname	String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner	Variable i	String traces = TraceNameList( "bzplanner_panel", ";", 1 )	Variable j	for (j = 0; j < ItemsInList(traces); j += 1)		String trace = StringFromList(j, traces)		if (stringmatch(trace, "w_data*"))			RemoveFromGraph/W=bzplanner_panel $trace		endif	endfor		String waves = WaveList("w_data*", ";", "DIMS:2")	for( i = 0; i < ItemsInList(waves); i += 1 )		KillWaves $(StringFromList(i, waves))	endfor	SetDataFolder $DFEndStatic Function buttonAddTightBinding(ctrlname) : ButtonControl	String ctrlname	String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner	SVAR gs_tightBind_Eq	NVAR gv_tightBind_start, gv_tightBind_inc, gv_tightBind_steps	NVAR gv_tightBind_autocontour	Variable i	for( i = 0; exists("w_tightbind"+num2str(i)); i += 1 )	endfor	String wname = "w_tightbind"+num2str(i)	String wname_rot = "w_rot_tightbind"+num2str(i)		NVAR gv_numBZ	NVAR gv_crystalAxisa	NVAR gv_crystalAxisb	// TODO: make those numbers adjustable? No?	NVAR gv_NumPntsKX, gv_NumPntsKY		//PSK 09-2007	Make/O/N=( (gv_NumPntsKX * (gv_numBZ*2-1)) , (gv_NumPntsKY * (gv_numBZ*2-1)) ) $wname //PSK09-2007	WAVE w = $wname	SetScale/I x, (- gv_numBZ * pi), (gv_numBZ * pi), w	SetScale/I y, (- gv_numBZ * pi), (gv_numBZ * pi), w	String execFormula = wname+"="+gs_tightBind_Eq	Execute execFormula	SetScale/I x, (- gv_numBZ * pi / gv_crystalAxisa), (gv_numBZ * pi / gv_crystalAxisa), w	SetScale/I y, (- gv_numBZ * pi / gv_crystalAxisb), (gv_numBZ * pi / gv_crystalAxisb), w	Note $wname, "Model: E = " + gs_tightBind_Eq		drawTightBinding(wname,wname_rot)		SetDataFolder $DFEndStatic Function buttonClearTightBinding(ctrlname) : ButtonControl	String ctrlname	String DF = GetDataFolder (1)	SetDataFolder root:internalUse:bzplanner	Variable i	String contours = ContourNameList( "bzplanner_panel", ";" )	for (i = 0; i < ItemsInList(contours); i += 1)		String contour = StringFromList(i,contours)		RemoveContour/W=bzplanner_panel $contour	endfor	String waves = WaveList("w_tightbind*", ";", "DIMS:2")	for( i = 0; i < ItemsInList(waves); i += 1 )		String wname_rot = ReplaceString("w_tightbind", StringFromList(i,waves), "w_rot_tightbind")		KillWaves/Z $(StringFromList(i,waves)), $wname_rot	//PSK 09-2007	endfor	SetDataFolder $DFEnd////////////////////////////////////////// Private functions// N.B.: the keyword "Static" in front of "Procedure" limits visibility to the containing Igor Procedure File only.////////////////////////////////////////Static Function init()	String DF = GetDataFolder (1)	NewDataFolder/O/S root:internalUse:bzplanner		Variable/G gv_BZ_azi = 0	Variable/G gv_theta_start = 0, gv_theta_end = 0, gv_theta_steps = 1, gv_theta_off = 0	Variable/G gv_alpha_start = 0, gv_alpha_end = 0, gv_alpha_steps = 1, gv_alpha_off = 0	Variable/G gv_phi_start = 0, gv_phi_end = 0, gv_phi_steps = 1, gv_phi_off = 0	Variable/G gv_om_start = 0, gv_om_end = 0, gv_om_steps = 1, gv_om_off = 0	Variable/G gv_beta_start = 0, gv_beta_end = 0, gv_beta_steps = 1, gv_beta_off = 0	Variable/G gv_gamma_start = 0, gv_gamma_end = 0, gv_gamma_steps = 1, gv_gamma_off = 0	Variable/G gv_sigma_start = 0, gv_sigma_end = 0, gv_sigma_steps = 1, gv_sigma_off = 0	Variable/G gv_mu_start = 0, gv_mu_end = 0, gv_mu_steps = 1, gv_mu_off = 0	Variable/G gv_flip_signs = 0	Variable/G gv_Ef = 17	Variable/G gv_crystalAxisa = 3.95, gv_crystalAxisb = 3.95	Variable/G gv_numBZ = 1		String/G gs_tightBind_Eq = "-.707 * ( cos(x) + cos(y) ) + .48 * ( cos(x) * cos(y) )"	Variable/G gv_tightBind_start = 0, gv_tightBind_inc = 1, gv_tightBind_steps = 1	Variable/G gv_tightBind_autocontour = 1	Variable/G gv_selDataOld = -1	Variable/G gv_selTBOld = -1	String/G gs_dataTBInfo = ""	Variable/G gv_dataLive = 0		Variable/G gv_NumPntsKX=200	//PSK 09-2007	Variable/G gv_NumPntsKY=200	//PSK 09-2007		String/G gs_export_directory = "root:BZPlannerGraph0"		Make/O/T/N=0 w_dataList, w_tightbindList		SetDataFolder $DFEndStatic Function populateDataAndTBList()	String DF = GetDataFolder(1)	SetDataFolder root:internalUse:bzplanner	WAVE/T w_dataList	WAVE/T w_tightbindList	utils_stringlist2wave(WaveList("w_data*", ";", "DIMS:2"))	WAVE/T W_StringList	Duplicate/O/T w_StringList, w_dataList	ListBox lbData_tab6, selRow=-1	utils_stringlist2wave(WaveList("w_tightbind*", ";", "DIMS:2"))	WAVE/T W_StringList	Duplicate/O/T w_StringList, w_tightbindList	ListBox lbTightbind_tab6, selRow=-1EndStatic Function redraw([directory, dontDrawData, dontDrawImageData])	String directory	Variable dontDrawData, dontDrawImageData		String DF = GetDataFolder (1)	if (ParamIsDefault(directory))		directory = "root:internalUse:bzplanner"	endif	SetDataFolder $directory	NVAR gv_crystalAxisa, gv_crystalAxisb	NVAR gv_BZ_azi	NVAR gv_numBZ	String traces = TraceNameList( "bzplanner_panel", ";", 1 )	Variable j	for (j = 0; j < ItemsInList(traces); j += 1)		String trace = StringFromList(j, traces)		RemoveFromGraph/W=bzplanner_panel $trace	endfor		String contours = ContourNameList( "bzplanner_panel", ";" )	for (j = 0; j < ItemsInList(contours); j += 1)		String contour = StringFromList(j,contours)		RemoveContour/W=bzplanner_panel $contour	endfor		Make/o/n=(3,3) Razi	Variable azim = gv_BZ_azi * pi / 180	Variable i	Razi = { {cos(azim),-sin(azim),0}, {sin(azim),cos(azim),0}, {0,0,1} }	Variable BZposx,BZposy, idx = 0	for (BZposx = - (gv_numBZ - 1); BZposx <=  (gv_numBZ - 1); BZposx += 1)	for (BZposy = - (gv_numBZ - 1); BZposy <=  (gv_numBZ - 1); BZposy += 1)		String wname_BZ_boundary = "w_BZ_boundary"+num2str(idx)		String wname_BZ_hcenterline = "w_BZ_hcenterline"+num2str(idx)		String wname_BZ_vcenterline = "w_BZ_vcenterline"+num2str(idx)		String wname_rot_BZ_boundary = "w_BZ_boundary"+num2str(idx)		String wname_rot_BZ_hcenterline = "w_BZ_hcenterline"+num2str(idx)		String wname_rot_BZ_vcenterline = "w_BZ_vcenterline"+num2str(idx)		Make/O/N=(5,2) $wname_BZ_boundary, $wname_rot_BZ_boundary		Make/O/N=(2,2) $wname_BZ_hcenterline, $wname_rot_BZ_hcenterline, $wname_BZ_vcenterline, $wname_rot_BZ_vcenterline		WAVE w_BZ_boundary = $wname_BZ_boundary, w_rot_BZ_boundary = $wname_rot_BZ_boundary		WAVE w_BZ_hcenterline = $wname_BZ_hcenterline, w_rot_BZ_hcenterline = $wname_rot_BZ_hcenterline		WAVE w_BZ_vcenterline = $wname_BZ_vcenterline, w_rot_BZ_vcenterline = $wname_rot_BZ_vcenterline		w_BZ_boundary[][] = { {-1, 1, 1, -1, -1}, {-1, -1, 1, 1, -1} }		w_BZ_hcenterline[][] = { {-1,1}, {0,0} }		w_BZ_vcenterline[][] = { {0,0}, {-1,1} }		w_BZ_hcenterline[][0] = ( w_BZ_hcenterline[p][0] + 2 * BZposx) * pi / gv_crystalAxisa		w_BZ_hcenterline[][1] = ( w_BZ_hcenterline[p][1] + 2 * BZposy) * pi / gv_crystalAxisb		w_BZ_vcenterline[][0] = ( w_BZ_vcenterline[p][0] + 2 * BZposx) * pi / gv_crystalAxisa		w_BZ_vcenterline[][1] = ( w_BZ_vcenterline[p][1] + 2 * BZposy) * pi / gv_crystalAxisb		w_BZ_boundary[][0] = ( w_BZ_boundary[p][0] + 2 * BZposx) * pi / gv_crystalAxisa		w_BZ_boundary[][1] = ( w_BZ_boundary[p][1] + 2 * BZposy) * pi / gv_crystalAxisb		for (i = 0; i < DimSize(w_BZ_boundary,0); i += 1)			Make/O/N=3 w_vector = 0			w_vector[0,1] = w_BZ_boundary[i][p]			MatrixMultiply Razi,w_vector			WAVE M_product			w_rot_BZ_boundary[i][] = M_product[q][0]		endfor				for (i = 0; i < DimSize(w_BZ_vcenterline,0); i += 1)			Make/O/N=3 w_vector = 0			w_vector[0,1] = w_BZ_vcenterline[i][p]			MatrixMultiply Razi,w_vector			WAVE M_product			w_rot_BZ_vcenterline[i][] = M_product[q][0]			Make/O/N=3 w_vector = 0			w_vector[0,1] = w_BZ_hcenterline[i][p]			MatrixMultiply Razi,w_vector			WAVE M_product			w_rot_BZ_hcenterline[i][] = M_product[q][0]		endfor		AppendToGraph w_rot_BZ_boundary[][0] vs w_rot_BZ_boundary[][1]		ModifyGraph lstyle($wname_rot_BZ_boundary)=0, rgb($wname_rot_BZ_boundary) = (0,0,0)		AppendToGraph w_rot_BZ_hcenterline[][0] vs w_rot_BZ_hcenterline[][1]		ModifyGraph lstyle($wname_rot_BZ_hcenterline)=7, rgb($wname_rot_BZ_hcenterline) = (0,0,0)		AppendToGraph w_rot_BZ_vcenterline[][0] vs w_rot_BZ_vcenterline[][1]		ModifyGraph lstyle($wname_rot_BZ_vcenterline)=7, rgb($wname_rot_BZ_vcenterline) = (0,0,0)		idx += 1	endfor	endfor	Label left "k\\By\\M[\\F'Symbol'p\\F'Arial'/a]"	Label bottom "k\\Bx\\M[\\F'Symbol'p\\F'Arial'/a]"	if (dontDrawData == 1)		SetDataFolder $DF		return 0	endif		String waves = WaveList("w_data*", ";", "DIMS:2")	for( i = 0; i < ItemsInList(waves); i += 1 )		drawDataSegment(StringFromList(i, waves), directory=directory)	endfor	waves = WaveList("w_tightbind*", ";", "DIMS:2")	for( i = 0; i < ItemsInList(waves); i += 1 )		String wname_rot = ReplaceString("w_tightbind", StringFromList(i,waves), "w_rot_tightbind")		drawTightBinding(StringFromList(i,waves),wname_rot, directory=directory)	endfor		WAVE w_image_data	if (WaveExists(w_image_data) && dontDrawImageData == 0)		drawDataSegment("w_image_data", thick=2)	endif	SetDataFolder $DFEndStatic Function tabControlChange( name, tab )	String name	Variable tab		String allControls = ControlNameList( "bzplanner_panel" )	String thisControl = StringFromList(0,allControls)	Variable i = 0	for (; strlen(thisControl)>0; )		if ( stringmatch(thisControl, "*_tab*"))			if ( stringmatch(thisControl, "*_tab" + num2str(tab)) )				utils_setControlEnabled( thisControl, 0 )			else				utils_setControlEnabled( thisControl, 1)			endif		endif		i+=1		thisControl = StringFromList(i,allControls)	endfor	if ( tab == 6 )		populateDataAndTBList()	else		ListBox lbData_tab6, selRow=-1		listBoxClicked("lbData_tab6", -1, -1, 4)		ListBox lbTightbind_tab6, selRow=-1		listBoxClicked("lbTightbind_tab6", -1, -1, 4)	endifEndStatic Function drawDataSegment(wname, [directory, thick])	String wname	String directory	Variable thick	if (paramIsDefault(thick))		thick = 1	endif	String DF = GetDataFolder (1)	if (ParamIsDefault(directory))		SetDataFolder root:internalUse:bzplanner	else		SetDataFolder $directory	endif	WAVE w = $wname	NVAR gv_BZ_azi	NVAR gv_Ef	NVAR gv_flip_signs		String wnote = note(w)	String manipType = StringByKey("ManipulatorType", wnote, "=", "\r")	Variable Ef = NumberByKey("FermiEnergy", wnote, "=", "\r")	Variable idx = 0	for (idx = 0; idx < DimSize(w,0); idx += 1)		strswitch(manipType)			case "flip":				/////// HERE				globals_flip_ang2k(w[idx][2], w[idx][3], w[idx][4],0+gv_BZ_azi+w[idx][5]+0, w[idx][6], w[idx][7], signs=gv_flip_signs)				break			case "berlin"://				fsmap_berlin_ang2k(0+gv_BZ_azi+w[idx][2]+0, w[idx][3],w[idx][4], w[idx][5])				// TODO: the minus sign in front of the BZ_azi seems spurious?!				globals_berlin_ang2k(w[idx][2], w[idx][3],w[idx][4], 0-gv_BZ_azi+w[idx][5]+0)				break			default:				Abort "unknown manip type"				break		endswitch		NVAR V_kx, V_ky		Variable energy = Ef*1.602e-19    //converted to joules		variable m = 9.1095e-31		variable hbar = 1.05459e-34		variable kvac = sqrt((2*m*energy)/hbar^2)*1e-10  // in inverse angstoms		w[idx][0] = V_kx * kvac		w[idx][1] = V_ky * kvac	endfor		AppendToGraph w[][1] vs w[][0]	ModifyGraph  mode($wname)=2, lSize($wname)=thick	SetDataFolder $DFEndStatic Function drawTightBinding(wname,wname_rot, [directory])	String wname	String wname_rot	String directory	String DF = GetDataFolder (1)	if (ParamIsDefault(directory))		SetDataFolder root:internalUse:bzplanner	else		SetDataFolder $directory	endif	NVAR gv_BZ_azi	WAVE w = $wname	NVAR gv_tightBind_start, gv_tightBind_inc, gv_tightBind_steps	NVAR gv_tightBind_autocontour		// the /Q (quiet operation) is there because otherwise it complains about "Zero rotation".	ImageRotate/Q/A=(gv_BZ_azi)/E=(NaN) w	WAVE M_RotatedImage	Duplicate/O M_RotatedImage, $wname_rot	WAVE w_rot = $wname_rot	// ImageRotate does not preserve the image scaling. -> apply the following bugfix:	// bugfix BEGIN	NVAR gv_numBZ	NVAR gv_crystalAxisa	NVAR gv_crystalAxisb	NVAR gv_NumPntsKX, gv_NumPntsKY	//PSK 09-2007	Variable scalef = DimSize(w_rot, 0) / gv_NumPntsKX	//PSK 09-2007	SetScale/I x, (- gv_numBZ * pi / gv_crystalAxisa*scalef), (gv_numBZ * pi / gv_crystalAxisa*scalef), w_rot	scalef = DimSize(w_rot, 1) / gv_NumPntsKY	//PSK 09-2007	SetScale/I y, (- gv_numBZ * pi / gv_crystalAxisb*scalef), (gv_numBZ * pi / gv_crystalAxisb*scalef), w_rot	// bugfix END	// So, the last fifteen lines are just to fix all the bugs and shit of ImageRotate. At this point I	// wonder why, oh why my workgroup had to choose Igor :(	AppendMatrixContour w_rot	if (gv_tightBind_autocontour == 0)		ModifyContour $wname_rot, manLevels= {gv_tightBind_start, gv_tightBind_inc, gv_tightBind_steps}	endif		SetDataFolder $DFEnd