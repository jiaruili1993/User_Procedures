#pragma rtGlobals=1		// Use modern global access method.#pragma version = 0.01Function re_loadfile(oldversion)	Variable oldversion		DFREF DF=GetDatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel		DFREF DFR_global=$DF_global	SetDatafolder DFR_global					switch(oldversion)		case 0:    			    			if (exists("gv_rawwaveexists")==0)   	 			Variable /G gv_rawwaveexists=0   			endif   			if (exists("gs_rawnotestr")==0)				String /G gs_rawnotestr=""			endif			if (exists("gv_Logfileflag")==0)				Variable /G gv_Logfileflag=0			endif			if (exists("gv_LogDataflag")==0)				Variable /G gv_LogDataflag=0			endif			if (exists("LoadWaveNotes")==0)				String /G LoadWaveNotes=""			endif			if (exists("LoadWaveList")==0)				String /G LoadWaveList=""			endif    			    			if (exists("Experimentlog")==0)				Make /o/n=(0,2)/T Experimentlog				Make /o/n=(0,2) /B Experimentlog_sel				Make /o/n=(2) /T Experimentlog_Title				Experimentlog_Title={"Time","Log"}				Experimentlog_sel[][1]=2			endif						newDatafolder /o Proc_wave	    			newDatafolder /o/s Data_log    	    			String /G Datatable_Strkey_to_num="dataname=0;WaveN=1;rawWaveN=2;Filename=3;FilePath=4;User=5;Sample=6;"			Datatable_Strkey_to_num+="instrument=7;measurementsoftware=8;AnalyzerSlit=9;Region=10;Sdate=11;Stime=12;LensMode=13;AcMode=14;Polarization=15;EnergyScale=16;"			Datatable_Strkey_to_num+="Comment=17;Leftnotes=18;tmfname=19;dispname=20;"				String /G Datatable_Varkey_to_num="LatticeA=0;LatticeB=1;LatticeC=2;LatticeAlpha=3;LatticeBeta=4;Latticegamma=5;LatticeType=6;InnerE=7;"			Datatable_Varkey_to_num+="gammaA=8;fYchannel=9;lYchannel=10;fXchannel=11;lXchannel=12;DegreeperChannel=13;EvperChannel=14;DwellTime=15;"			Datatable_Varkey_to_num+="PassE=16;Sweeps=17;SampleOrientation=18;Tem=19;PhotonE=20;WorkFn=21;BeamCurrent=22;AreaI=23;"			Datatable_Varkey_to_num+="LowEnergy=24;HighEnergy=25;NumEnergy=26;Estep=27;firstslice=28;lastslice=29;numslices=30;Degreeslices=31;"			Datatable_Varkey_to_num+="theta=32;thetaoff=33;phi=34;phioff=35;azi=36;azioff=37;ManiX=38;ManiY=39;ManiZ=40;"			Datatable_Varkey_to_num+="FermiN=41;Initialflag=42;DeflectorAngle=43"	    			Make /o/n=21/T Datatable_display			Make /o/n=43/T Datatable_left			Datatable_display[0,11]={"WaveN","theta","thetaoff","phi","phioff","azi","azioff", "ManiX","ManiY","ManiZ","Tem","Comment"}			Datatable_display[12,20]={"PhotonE","Polarization","PassE","Estep","LowEnergy","HighEnergy","Sweeps","Sdate","Stime"}				Datatable_left[0,10]={"BeamCurrent","AreaI","Region","AnalyzerSlit","EnergyScale","Initialflag","WorkFn","FermiN","tmfname","dispname","gammaA"}			Datatable_left[11,20]={"NumEnergy","firstslice","lastslice","numslices","Degreeslices","fYchannel","lYChannel","fXChannel","lXChannel","DegreeperChannel"}			Datatable_left[21,30]={"EvperChannel","DwellTime","SampleOrientation","LatticeA","LatticeB","LatticeC","LatticeAlpha","LatticeBeta","Latticegamma", "Latticetype"}			Datatable_left[31,42]={"InnerE","dataname","RawWaveN","Filename","FilePath","User","Sample","Instrument","measurementsoftware","LensMode","Acmode","Leftnotes"}				Make /T/o/n=21 titleStrs			Make /T/o/n=44 titleVars			titleStrs[0,10]={"dataname","WaveN","RawWaveN","Filename","FilePath","User","Sample", "Instrument","measurementsoftware","AnalyzerSlit","Region"}			titleStrs[11,20]={"Sdate","Stime","LensMode","Acmode","Polarization","EnergyScale","Comment","Leftnotes","tmfname","dispname"}			titleVars[0,9]={"LatticeA","LatticeB","LatticeC","LatticeAlpha","LatticeBeta","Latticegamma", "Latticetype","InnerE","gammaA","fYchannel"}			titleVars[10,19]={"lYChannel","fXChannel","lXChannel","DegreeperChannel","EvperChannel","DwellTime","PassE","Sweeps","SampleOrientation","Tem"}			titleVars[20,29]={"PhotonE","WorkFn","BeamCurrent","AreaI","LowEnergy","HighEnergy","NumEnergy","Estep","firstslice","lastslice"}			titleVars[30,39]={"numslices","Degreeslices","theta","thetaoff","phi","phioff","azi","azioff","ManiX","ManiY"}			titleVars[40,43]={"ManiZ","FermiN","Initialflag","DeflectorAngle"}					Make /T /o/n=21 KeywordStrs			Make /T /o/n=44 KeywordVars					KeywordStrs[0,10]={"","WaveName","RawWaveName","FileName","FilePath","User","Sample","Instrument","MeasurementSoftware","AnalyzerSlit","RegionName"}			KeywordStrs[11,20]={"StartDate","StartTime","LensMode","AcquisitionMode","Polarization","EnergyScale","Comments","LeftNots","tmfwave","dispwave"}					KeywordVars[0,9]={"LatticeA","LatticeB","LatticeC","LatticeAlpha","LatticeBeta","Latticegamma", "Latticetype","InnerPotential","ScientaOrientation","CCDFirstYchannel"}			KeywordVars[10,19]={"CCDLastYChannel","CCDFirstXChannel","CCDLastXChannel","CCDDegreeperChannel","CCDeVperChannel","DwellTime","PassEnergy","NumberOfSweeps","SampleOrientation","SampleTemperature"}			KeywordVars[20,29]={"PhotonEnergy","WorkFunction","BeamCurrent","AreaIntensity","FirstEnergy","LastEnergy","NumberOfEnergies","Energy Step","FirstSlice","LastSlice"}			KeywordVars[30,39]={"NumberofSlices","DegreeSlices","InitialThetaManipulator","OffsetThetaManipulator","InitialPhiManipulator","OffsetPhiManipulator","InitialAzimuthManipulator","OffsetAzimuthManipulator","X_Manipulator","Y_Manipulator"}			KeywordVars[40,43]={"Z_Manipulator","FermiEnergy","Initialflag","DeflectorAngle"}		case 100:			case 101:			SetDatafolder DFR_global:Data_log			String /G gs_samplename=""			String /G gs_samplecomment=""			String /G gs_previewcomment=""			String /G gs_location=""			String /G gs_user=""			String /G gs_expDate=""			variable /G gv_saveNBflag=0			String /G gs_Expcklist="Map=0;Tdep=0;Gap=0;kz=0;Cut=0;Sum=0;"			Variable /G gv_commentflag=0	endswitch			NVAR /Z gv_MacroVersion=DFR_global:gv_MacroVersion	if (NVAR_exists(gv_MacroVersion))		gv_MacroVersion=constant_Macro_Version	else		SetDatafolder DFR_global		Variable /G gv_MacroVersion=constant_Macro_Version	endif				Open_loadfile_Panel("recreate_window")			SetDatafolder DFEndFunction re_BZ(oldversion)	Variable oldversion		DFREF DF=GetDatafolderdFR()		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetDatafolder DFR_panel		switch(oldversion)		case 0:			Variable /G gv_autoFSMflag=0			String /G gs_autoFSMname=""		case 100:	endswitch		open_BZ_panel("recreate_window")		SetDatafolder DFEndFunction re_gold(oldversion)	Variable oldversion		DFREF DF=GetDatafolderdFR()		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_panel			switch(oldversion)		case 0:			SetDatafolder DFR_common			Variable /G gv_sampletem		case 100:			case 101:			Variable /G gv_polynum=3		case 102:	endswitch		open_gold_panel("recreate_window")		SetDatafolder DFEndFunction re_Analysis(oldversion)	Variable oldversion	DFREF DF=GetDatafolderdFR()		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetDatafolder DFR_panel		Open_Analysis_Panel("recreate_window")		SetDatafolder DFEndFunction re_fit(oldversion)	Variable oldversion		DFREF DF=GetDatafolderdFR()		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetDatafolder DFR_panel		switch(oldversion)		case 0:			Variable /G gv_ignorefitflag    			Variable /G gv_errorlevel=10    			    			Variable SC=Screensize(5)			DFREF DFR_prefs=$DF_prefs    			NVAR panelscale=DFR_prefs:gv_panelscale    			NVAR Dfontsize=DFR_prefs:gv_Dfontsize    	    			GroupBox source_gb0 fSize=DFontsize*SC			SetVariable source_sv0 fSize=DFontsize*SC			Button source_bt0 fSize=DFontsize*SC			Button source_bt1 fSize=DFontsize*SC			Button source_bt2 fSize=DFontsize*SC			Button source_bt3 fSize=DFontsize*SC		case 100:			 Variable /G gv_imageresultpnts=Nan			 variable /G gv_weightflag=0			 SetDatafolder Fit_data			 			 Wave FitFnName_list_sel			 Wave FitSave_DataWave						 redimension  /n=(-1,-1,3)  FitFnName_list_sel			 redimension  /n=(-1,-1,6)  FitSave_DataWave        			SetDimLabel 2,1,backColors,FitFnName_list_sel    			SetDimLabel 2,2,foreColors,FitFnName_list_sel    		case 102:    			SetDatafolder DFR_panel    			newDatafolder /O raw_Data	endswitch			open_fit_panel("recreate_window")		SetDatafolder DF	EndFunction re_mapper(oldversion)	Variable oldversion		DFREF DF=GetDatafolderdFR()		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_panel		switch(oldversion)		case 0:			Variable /G gv_curveflag    			Variable /G gv_proc_pnts=5			Variable /G gv_proc_times=2    			Variable /G  gv_proc_cfactor=0.01    			Variable /G gv_proc_flag=0    	    					Variable /G gv_autoFSMflag=0			String /G gs_autoFSM_panellist=""    	    			SetDatafolder DFR_common    			Variable /G gv_autolayerflag=0    			Variable /G gv_topprocnum    			NewDatafolder /o root:graphsave:Cubes    			    			RemoveFromGraph /Z n_edc_x#1,n_edc_x			Killcontrol FSMproc_b2			Killcontrol FSMproc_b21			Killcontrol FSMproc_b22			KillControl global_map			KillControl FSMproc_c3			KillControl options_c2						Setwindow $winname(0,65) hook(MyHook) = MypanelHook						Variable SC=Screensize(5)			DFREF DFR_prefs=$DF_prefs    			NVAR panelscale=DFR_prefs:gv_panelscale    			NVAR Dfontsize=DFR_prefs:gv_Dfontsize    				SetVariable source_sv0 fSize=DFontsize*SC			Button source_bt0 fSize=DFontsize*SC			Button source_bt1 fSize=DFontsize*SC			Button source_bt2 fSize=DFontsize*SC			GroupBox source_gb0 fSize=DFontsize*SC			Button settings_autoload fSize=DFontsize*SC		case 100:	    		case 101:    			Variable/G gv_wave_pA,gv_wave_pB,gv_wave_qA,gv_wave_qB			Variable/G gv_map_pA,gv_map_pB,gv_map_qA,gv_map_qB			Variable/G gv_changetabflag=0		case 102:			CheckBox global_ck10, pos={610*SC,200*SC}, title="lock aspect",value=1,proc=lock_aspect			    	endswitch							open_mapper_panel("recreate_window")			SetDatafolder DFEnd/////////////////auto process function /////////////////Function macro_autoprocess(wave_path,procstr,startlayernum,proclayernum,flag)	String wave_path,procstr	Variable startlayernum	Variable proclayernum	Variable flag		String layerstr	Wave data=$wave_path	Variable procdone=0,prosum=0	do 		layerstr= Getlayernotestr(procstr,proclayernum,1)		if (strlen(layerstr)==0)			break		endif		procdone=macro_processall(wave_path,startlayernum,layerstr,flag)		proclayernum+=1		startlayernum+=procdone		prosum+=procdone	while (1)	return prosumEndFunction macro_processall(wave_path,toplayernum,notestr,flag)	String wave_path	Variable &toplayernum	String notestr	Variable flag		Variable procnum=numberbykey("Processnumber",notestr,"=","\r")	Wave data=$wave_path	Variable appendflag=numberbykey("Appendflag",notestr,"=","\r")	Variable rawprocnum=numberbykey("RawProcNumber",notestr,"=","\r")	Variable rawlayernum=numberbykey("RawLayerNumber",notestr,"=","\r")			appendflag=(numtype(appendflag)==2)?(0):(appendflag)		if ((appendflag==1)||(flag==1))		if (numtype(rawprocnum)!=2)			Variable templayernum=Autofindsimilar_Layer(data,rawlayernum, rawprocnum)			if (templayernum>=0)				toplayernum=templayernum				appendflag=1			endif		endif	endif		Variable sv0,sv1,sv2,sv3,sv4,sv5,sv6,sv7,sv8,sv9,sv10	String ss0,ss1	Switch(procnum)	case 0:		break	case 1:		ss0=Stringbykey("Procstr",notestr,"=","\r")		sv0=numberbykey("bkgrange",notestr,"=","\r")		return macro_deadline_corr(wave_path,toplayernum,ss0,sv0,appendflag)		break	case 2:		ss0=StringByKey("TMFwave",notestr,"=","\r")		sv0=numberByKey("scaleflag",notestr,"=","\r")		return macro_tmf_corr(wave_path,toplayernum,0,0,ss0,sv0,appendflag)		break	case 3:		ss0=StringByKey("dispwave",notestr,"=","\r")		sv0=numberByKey("FermiEnergy",notestr,"=","\r")		sv1=numberByKey("normflag",notestr,"=","\r")		sv2=numberByKey("scaleflag",notestr,"=","\r")		return macro_disp_corr(wave_path,toplayernum,ss0,sv0,sv1,sv2,appendflag)		break	case 4:	case 41:		sv0=numberByKey("EnergyInitial",notestr,"=","\r")		sv1=numberByKey("EnergyFinal",notestr,"=","\r")		sv2=numberByKey("initialflag",notestr,"=","\r")		return macro_energy_rescale(wave_path,toplayernum,sv0,sv1,sv2,appendflag)		break	case 5:	case 51:	case 52:	case 53:	case 54:	case 55:		sv0=numberByKey("M0Initial",notestr,"=","\r")		sv1=numberByKey("M0Final",notestr,"=","\r")		sv2=numberByKey("M1Initial",notestr,"=","\r")		sv3=numberByKey("M1Final",notestr,"=","\r")		sv4=numberByKey("scaleflag",notestr,"=","\r")		sv5=numberByKey("scalechangeflag",notestr,"=","\r")		return macro_axes_rescale(wave_path,toplayernum,sv0,sv1,sv2,sv3,sv4,sv5,appendflag)		break	case 56:		sv4=numberByKey("scaleflag",notestr,"=","\r")		ss0=StringByKey("xprofile",notestr,"=","\r")		return macro_axes_rescale_profile(wave_path,toplayernum,$ss0,sv4,appendflag)		break	case 6: //mdc bkg	case 60: //edc bkg	case 601: // mdcwave	case 602: // edc wave	case 603:// 2d wave		sv0=numberByKey("Funcflag",notestr,"=","\r")		sv1=numberByKey("DCflag",notestr,"=","\r")		sv2=numberByKey("Range0",notestr,"=","\r")		sv3=numberByKey("Range1",notestr,"=","\r")		sv4=numberByKey("smoothflag",notestr,"=","\r")		sv5=numberByKey("smoothpnts",notestr,"=","\r")		sv6=numberByKey("smoothtimes",notestr,"=","\r")		ss0=StringByKey("CoefList",notestr,"=","\r")		sv7=numberByKey("Fermiflag",notestr,"=","\r")		sv8=numberByKey("bkgEF",notestr,"=","\r")		sv9=numberByKey("bkgT",notestr,"=","\r")		ss1=StringBykey("procwavepath",notestr,"=","\r")		wave w_NumberList=StringListToNumWave(ss0,0,";",Nan,Nan)		return macro_bkg_corr(wave_path,toplayernum,sv0,sv1,sv2,sv3,sv4,sv5,sv6,w_Numberlist,sv7,sv8,sv9,ss1,appendflag)		break	case 61: //mdc norm	case 611: //	case 612: //	case 613: //	case 614: //	case 615: //	case 616: //	case 617: //	case 618: //	case 619: //		sv0=numberByKey("Procflag",notestr,"=","\r")		sv1=numberByKey("Funcflag",notestr,"=","\r")		sv2=numberByKey("DCflag",notestr,"=","\r")		sv3=numberByKey("Range0",notestr,"=","\r")		sv4=numberByKey("Range1",notestr,"=","\r")		sv5=numberByKey("smoothflag",notestr,"=","\r")		sv6=numberByKey("smoothpnts",notestr,"=","\r")		sv7=numberByKey("smoothtimes",notestr,"=","\r")		ss0=StringByKey("CoefList",notestr,"=","\r")		sv8=numberByKey("Fermiflag",notestr,"=","\r")		sv9=numberByKey("bkgEF",notestr,"=","\r")		sv10=numberByKey("bkgT",notestr,"=","\r")		ss1=StringBykey("procwavepath",notestr,"=","\r")		wave w_NumberList=StringListToNumWave(ss0,0,";",Nan,Nan)		return macro_Func_Norm(wave_path,toplayernum,sv0,sv1,sv2,sv3,sv4,sv5,sv6,sv7,w_Numberlist,sv8,sv9,sv10,ss1,appendflag)		break	case 62:  //fermi	case 63: //fermi multiply		sv0=numberByKey("Procflag",notestr,"=","\r")		ss0=StringByKey("CoefList",notestr,"=","\r")		sv1=numberByKey("Cropflag",notestr,"=","\r")		sv2=numberByKey("Cropnum",notestr,"=","\r")		wave w_NumberList=StringListToNumWave(ss0,0,";",Nan,Nan)		return macro_Func_DF(wave_path,toplayernum,sv0,w_Numberlist,sv1,sv2,appendflag)		break		case 7:		sv0=numberByKey("PhotonE",notestr,"=","\r")		sv1=numberByKey("FermiEnergy",notestr,"=","\r")		sv2=numberByKey("WorkFunction",notestr,"=","\r")		return macro_polar_to_k(wave_path,toplayernum,sv0,sv1,sv2,appendflag)		break	case 8:		sv0=numberByKey("PhotonE",notestr,"=","\r")		sv1=numberByKey("FermiEnergy",notestr,"=","\r")		sv2=numberByKey("WorkFunction",notestr,"=","\r")		sv3=numberByKey("theta",notestr,"=","\r")		sv4=numberByKey("phi",notestr,"=","\r")		sv5=numberByKey("azi",notestr,"=","\r")		sv6=numberByKey("gamma",notestr,"=","\r")		sv7=numberByKey("curveflag",notestr,"=","\r")		sv8=numberByKey("DeflectorAngle", notestr, "=","\r")		return macro_flipStage_cut(wave_path,toplayernum,sv0,sv1,sv2,sv3,sv4,sv5,sv6,sv7,appendflag,sv8)		break	case 9:	case 91:		sv0=numberByKey("Reducefactor",notestr,"=","\r")		sv1=numberByKey("Reduceflag",notestr,"=","\r")		return  macro_reduce_pnts(wave_path,toplayernum,sv0,sv1,appendflag)		break	case 10:	case 101:	case 102:	case 103:		sv0=numberByKey("p0",notestr,"=","\r")		sv1=numberByKey("p1",notestr,"=","\r")		sv2=numberByKey("q0",notestr,"=","\r")		sv3=numberByKey("q1",notestr,"=","\r")		sv4=numberByKey("cropflag",notestr,"=","\r")		return macro_crop_image(wave_path,toplayernum,sv0,sv2,sv1,sv3,sv4,appendflag)		break	case 11: 	case 111:		sv0=numberByKey("Smoothpnts",notestr,"=","\r")		sv1=numberByKey("Smoothtimes",notestr,"=","\r")		sv2=numberByKey("Dimflag",notestr,"=","\r")		if (sv2)			return macro_smoothxory(wave_path,toplayernum,0,sv0,sv1,sv2,appendflag)		else			return macro_smoothxory(wave_path,toplayernum,sv0,0,sv1,sv2,appendflag)		endif		break	case 12:	case 121:	case 122:		sv0=numberByKey("derivativetimes",notestr,"=","\r")		sv1=numberByKey("Dimflag",notestr,"=","\r")		sv2=numberByKey("MDCweight",notestr,"=","\r")		return macro_derivative(wave_path,toplayernum,sv0,sv1,sv2,appendflag)		break	case 13:		sv0=numberByKey("symEF",notestr,"=","\r")		return macro_sym_image(wave_path,toplayernum,sv0,appendflag)		break	case 14:	case 141:	case 142:		sv0=numberByKey("Curvaturetimes",notestr,"=","\r")		sv1=numberByKey("Dimflag",notestr,"=","\r")		sv2=numberByKey("MDCweight",notestr,"=","\r")		sv3=numberByKey("curveFactor",notestr,"=","\r")		return macro_Curvature(wave_path,toplayernum,sv0,sv1,sv2,sv3,appendflag)		break		case 15:		sv0=numberByKey("tmfflag",notestr,"=","\r")		sv1=numberByKey("dimflag",notestr,"=","\r")			ss0=StringByKey("procwavepath",notestr,"=","\r")		return macro_nonlinear_corr_image(wave_path,toplayernum,sv0,sv1,ss0,appendflag)	endswitchEnd/////////////////notestr function ////////////////////Function /S procstring(procnum)	Variable procnum	String notestring=""	notestring+="Wavetype=\r"	notestring+="ProcessNumber=\r"	notestring+="RawLayerNumber=\r"	notestring+="RawProcNumber=\r"	notestring+="Appendflag=\r"	notestring+="xpnts=\r"	notestring+="ypnts=\r"	notestring+="x0=\r"	notestring+="x1=\r"	notestring+="y0=\r"	notestring+="y1=\r"	switch(procnum)	case 1: //deadline		notestring+="Procstr=\r"		notestring+="bkgrange=\r"		break	case 2: //tmf		notestring+="Funcflag=\r"		notestring+="Dataflag=\r"		notestring+="tmfwave=\r"		notestring+="scaleflag=\r"		break	case 3: //disp		notestring+="dispwave=\r"		notestring+="initialflag=\r"		notestring+="FermiEnergy=\r"		notestring+="normflag=\r"		notestring+="scaleflag=\r"		break	case 4: //SetEF	case 41: //Shift Energy		notestring+="EnergyInitial=\r"		notestring+="EnergyFinal=\r"		notestring+="initialflag=\r"		notestring+="FermiEnergy=\r"		break		case 5: //csr shift 	case 51: //csr scale 	case 52: //center shift 	case 53: //center scale 	case 54: //ratio	case 55: //Set axis		notestring+="M0Initial=\r"		notestring+="M0Final=\r"		notestring+="M1Initial=\r"		notestring+="M1Final=\r"		notestring+="scaleflag=\r"		notestring+="scalechangeflag=\r"		break	case 56: //axis profile		notestring+="M0Initial=\r"		notestring+="M0Final=\r"		notestring+="M1Initial=\r"		notestring+="M1Final=\r"		notestring+="scaleflag=\r"		notestring+="scalechangeflag=\r"		notestring+="xprofile=\r"		break	case 6: //bkg corr //MDC	case 60: //bkg corr //EDC	case 601: // MDC wave	case 602: // EDC wave	case 603: // 2D wave		notestring+="Funcflag=\r"		notestring+="DCflag=\r"		notestring+="Range0=\r"		notestring+="Range1=\r"		notestring+="smoothflag=\r"		notestring+="smoothpnts=\r"		notestring+="smoothtimes=\r"		notestring+="CoefList=\r"		notestring+="Fermiflag=\r"		notestring+="bkgEF=\r"		notestring+="bkgT=\r"		notestring+="procwavepath=\r"		break		case 61: //mdc multi	case 611:  //mdc devide	case 612:  //edc multi	case 613:  //edc devide	case 614: //MDC wave multi	case 615: // EDC wave multi	case 616: // 2D wave multi	case 617: //MDC wave devide	case 618: // EDC wave devide	case 619: // 2D wave devide		notestring+="Procflag=\r"		notestring+="Funcflag=\r"		notestring+="DCflag=\r"		notestring+="Range0=\r"		notestring+="Range1=\r"		notestring+="smoothflag=\r"		notestring+="smoothpnts=\r"		notestring+="smoothtimes=\r"		notestring+="CoefList=\r"		notestring+="Fermiflag=\r"		notestring+="bkgEF=\r"		notestring+="bkgT=\r"		notestring+="procwavepath=\r"		break	case 62: //Fn_Divide	case 63: //Fn_Multi		notestring+="Procflag=\r"		notestring+="CoefList=\r"		notestring+="Cropflag=\r"		notestring+="Cropnum=\r"		notestring+="CCDFirstXChannel=\r"		notestring+="CCDLastXChannel=\r"		break	case 7: //polar k		notestring+="PhotonE=\r"		notestring+="FermiEnergy=\r"		notestring+="WorkFunction=\r"	break	case 8: //flip k		notestring+="PhotonE=\r"		notestring+="FermiEnergy=\r"		notestring+="WorkFunction=\r"		notestring+="theta=\r"		notestring+="phi=\r"		notestring+="azi=\r"		notestring+="gamma=\r"		notestring+="curveflag=\r"		notestring+="deflectorangle=\r"	break	case 9: //reduce x pnts	case 91://reduce ypnts		notestring+="Reducefactor=\r"		notestring+="Reduceflag=\r"	break	case 10: //x crop	case 101://y crop	case 102://both crop	case 103://smart crop		notestring+="p0=\r"		notestring+="p1=\r"		notestring+="q0=\r"		notestring+="q1=\r"		notestring+="cropflag=\r"		notestring+="CCDFirstXChannel=\r"		notestring+="CCDLastXChannel=\r"		notestring+="CCDFirstYChannel=\r"		notestring+="CCDLastYChannel=\r"	break	case 11: //smooth y	case 111://smoth x		notestring+="Smoothpnts=\r"		notestring+="Smoothtimes=\r"		notestring+="Dimflag=\r"	break	case 12: //derivative y	case 121: //derivative x	case 122: //derivative xy		notestring+="Derivativetimes=\r"		notestring+="Dimflag=\r"		notestring+="MDCwegiht=\r"	break	case 13: //Symmetrize		notestring+="symEF=\r"	break	case 14: //Curvature y	case 141: //Curvature x	case 142: //Curvature xy		notestring+="Curvaturetimes=\r"		notestring+="Dimflag=\r"		notestring+="MDCwegiht=\r"		notestring+="curveFactor=\r"	break	case 15://nonlinear		notestring+="tmfflag=\r"		notestring+="dimflag=\r"		notestring+="procwavepath=\r"	break	endswitch	return notestringEndFunction /S Tryimport_iphoto_note(data,notestrlist)	Wave data	String notestrlist		//comment keywords	String WaveN=nameofwave(Data)	String Filename=StringbyKey("FileName",noteStrList,"=","\r")	String RawDataWave=StringbyKey("RawDataWave",noteStrList,"=","\r")		String user = StringbyKey("User",noteStrList,"=","\r")	String sample = StringbyKey("Sample",noteStrList,"=","\r")	String instrument = StringbyKey("Instrument",noteStrList,"=","\r")	String Measuresoft = StringbyKey("MeasurementSoftware",noteStrList,"=","\r")	String gammaA=Stringbykey("ScientaOrientation",notestrList,"=","\r")	String firstXchannel = StringbyKey("CCDFirstXChannel",noteStrList,"=","\r")	String lastXchannel = StringbyKey("CCDLastXChannel",noteStrList,"=","\r")	String firstYchannel = StringbyKey("CCDFirstYChannel",noteStrList,"=","\r")	String lastYchannel = StringbyKey("CCDLastYChannel",noteStrList,"=","\r")	String degreeperchannel= StringbyKey("CCDDegreePerChannel",noteStrList,"=","\r")	String AnalyzerSlit=Stringbykey("AnalyzerSlit",notestrList,"=","\r")	String stepTime = StringbyKey("DwellTime",noteStrList,"=","\r")		String regionName = StringbyKey("RegionName",noteStrList,"=","\r")	String startDate = StringbyKey("StartDate",noteStrList,"=","\r")	String startTime = StringbyKey("StartTime",noteStrList,"=","\r")	String Lensmode=""	String aquisitionmode = "Sweep"//StringbyKey("Acquisition Mode",noteStrList,"=","\r"	String passEnergy = StringbyKey("PassEnergy",noteStrList,"=","\r")		Variable excitationEnergy =NumberbyKey("PhotonEnergy",noteStrList,"=","\r")	Variable Workfn=Numberbykey("WorkFunction",noteStrlist,"=","\r")		String Energyscale = StringbyKey("EnergyScale",noteStrList,"=","\r")	//	if(stringmatch(Energyscale,"*kinetic*"))//		Energyscale = kinetic//	endif//	//	//	variable initialflag//	if (stringmatch(Energyscale,"kinetic*"))//		Energyscale="Kinetic"//		initialflag=0//	else//		Energyscale="Kinetic"//		initialflag=1//		String Addstr="initialflag=1\r"//		Addstr+="FermiEnergy=\r"//		//		Variable Fermilevel=Numberbykey("FermiNorm",notestrlist,"=","\r")//		if (numtype(Fermilevel)==2)//			FermiLevel=Numberbykey("FermiLevel",notestrlist,"=","\r")//			if (numtype(Fermilevel)==2)//				excitationEnergy=(numtype(excitationenergy)==2)?(21):(excitationenergy)//				workFn=(numtype(workfn)==2)?(4.35):(workfn)//				Fermilevel=excitationEnergy-workfn//			endif//		endif//		Addstr=replacenumberbykey("FermiEnergy",addstr,Fermilevel,"=","\r")//	endif		String numberofsweeps = StringbyKey("NumberofSweeps",noteStrList,"=","\r")	String temperature=Stringbykey("SampleTemperature",notestrList,"=","\r")				String lowEnergy = StringbyKey("FirstEnergy",noteStrList,"=","\r")	String highEnergy = StringbyKey("LastEnergy",noteStrList,"=","\r")     	STring numEnergy=StringbyKey("NumberOfEnergies",noteStrList,"=","\r")     	String EnergyStep = num2str(dimdelta(data,1))//StringbyKey("Energy Step",noteStrList,"=","\r")     	     	     	String FirstSlice=num2str(M_x0(data))	String LastSlice=num2str(M_x1(data))	String numberofslices = StringbyKey("NumberOfSlices",noteStrList,"=","\r")	String degreeslices=num2str(dimdelta(data,0))		Variable theta=numberbykey("InitialThetaManipulator",noteStrList,"=","\r")	Variable phi=numberbykey("InitialPhiManipulator",noteStrList,"=","\r")	Variable azi=numberbykey("InitialAzimuthManipulator",noteStrList,"=","\r")	Variable thetaoff=numberbykey("OffsetThetaManipulator",noteStrList,"=","\r")	Variable phioff=numberbykey("OffsetPhiManipulator",noteStrList,"=","\r")	Variable azioff=numberbykey("OffsetAzimuthManipulator",noteStrList,"=","\r")	Variable deflector_angle =numberbykey("DeflectorAngle",noteStrList,"=","\r")		variable manipulatorX = numberbykey("X_Manipulator",noteStrList,"=","\r")	variable manipulatorY = numberbykey("Y_Manipulator",noteStrList,"=","\r")	variable manipulatorZ = numberbykey("Z_Manipulator",noteStrList,"=","\r")			variable beamcurrent = numberbykey("BeamCurrent",noteStrList,"=","\r")	String comments=Stringbykey("Comments",notestrlist,"=","\r")			// make the correct note	String noteStr = wave_keyList(2)		// with the scienta keywords	noteStr = ReplaceStringByKey("WaveName", noteStr,WaveN,"=","\r")	noteStr = ReplaceStringByKey("RawWaveName", noteStr,WaveN,"=","\r")	noteStr = ReplaceStringByKey("RawDataWave", noteStr,RawDataWave,"=","\r")	noteStr = ReplaceStringByKey("FileName", noteStr,filename,"=","\r")	//noteStr = ReplaceStringByKey("FilePath", noteStr,S_path,"=","\r")	noteStr = ReplaceStringByKey("User", noteStr,user,"=","\r")	noteStr = ReplaceStringByKey("Sample", noteStr,Sample,"=","\r")		noteStr = ReplaceNumberByKey("BeamCurrent", noteStr,Beamcurrent,"=","\r")		noteStr = ReplaceStringByKey("Instrument", noteStr,Instrument,"=","\r")	noteStr = ReplaceStringByKey("MeasurementSoftware", noteStr,Measuresoft,"=","\r")	noteStr = ReplaceStringByKey("ScientaOrientation", noteStr,gammaA,"=","\r")	noteStr = ReplaceStringByKey("CCDFirstXChannel", noteStr,firstXchannel,"=","\r")	noteStr = ReplaceStringByKey("CCDLastXChannel", noteStr,lastXchannel,"=","\r")	noteStr = ReplaceStringByKey("CCDFirstYChannel", noteStr,firstYchannel,"=","\r")	noteStr = ReplaceStringByKey("CCDLastYChannel", noteStr,lastYchannel,"=","\r")	noteStr = ReplaceStringByKey("CCDDegreePerChannel", noteStr,degreeperchannel,"=","\r")	noteStr = ReplaceStringByKey("AnalyzerSlit", noteStr,AnalyzerSlit,"=","\r")	noteStr = ReplaceStringByKey("DwellTime", noteStr,stepTime,"=","\r")		noteStr = ReplaceStringByKey("RegionName", noteStr,regionName,"=","\r")	noteStr = ReplaceStringByKey("StartDate", noteStr,StartDate,"=","\r")	noteStr = ReplaceStringByKey("StartTime", noteStr,StartTime,"=","\r")	noteStr = ReplaceStringByKey("LensMode", noteStr,lensmode,"=","\r")	noteStr = ReplaceStringByKey("AcquisitionMode", noteStr,aquisitionmode,"=","\r")	noteStr = ReplaceStringByKey("PassEnergy", noteStr,passEnergy,"=","\r")	noteStr = ReplaceStringByKey("EnergyScale", noteStr,Energyscale,"=","\r")	noteStr = ReplaceStringByKey("NumberOfSweeps", noteStr,numberofsweeps,"=","\r")	noteStr = ReplaceStringbykey("SampleTemperature",noteStr,temperature,"=","\r")	//noteStr = ReplaceStringBykey("AreaIntensity",noteStr,AreaI,"=","\r")	//noteStr = ReplaceStringBykey("BeamCurrent",noteStr,Beamcurrent,"=","\r")	noteStr = ReplaceNumberByKey("PhotonEnergy", noteStr, excitationEnergy,"=","\r")	noteStr = ReplaceNumberByKey("WorkFunction", noteStr, Workfn,"=","\r")		noteStr = ReplaceStringByKey("FirstEnergy", noteStr,lowEnergy,"=","\r")	// do all Scienta's scan from low to high??	noteStr = ReplaceStringByKey("LastEnergy", noteStr,highEnergy,"=","\r")	noteStr = ReplaceStringByKey("NumberOfEnergies", noteStr,numEnergy,"=","\r")	noteStr = ReplaceStringByKey("Energy Step",noteStr,Energystep,"=","\r")		noteStr = ReplaceStringByKey("FirstSlice",notestr,FirstSlice,"=","\r")	noteStr = ReplaceStringByKey("LastSlice",notestr,LastSlice,"=","\r")	noteStr = ReplaceStringByKey("NumberOfSlices", noteStr,numberofslices,"=","\r")	noteStr = ReplaceStringByKey("DegreeSlices", noteStr,degreeslices,"=","\r")	noteStr = ReplaceNumberByKey("InitialThetaManipulator", noteStr,theta,"=","\r")	noteStr = ReplaceNumberByKey("OffsetThetaManipulator", noteStr,thetaoff,"=","\r")	noteStr = ReplaceNumberByKey("InitialPhiManipulator", noteStr,Phi,"=","\r")	noteStr = ReplaceNumberByKey("OffsetPhiManipulator", noteStr,phioff,"=","\r")	noteStr = ReplaceNumberByKey("InitialAzimuthManipulator", noteStr,azi,"=","\r")	noteStr = ReplaceNumberByKey("OffsetAzimuthManipulator", noteStr,azioff,"=","\r")	noteStr = ReplaceNumberByKey("DeflectorAngle",noteStr,deflector_angle,"=","\r")		noteStr = ReplaceNumberByKey("X_Manipulator", noteStr,manipulatorX,"=","\r")	noteStr = ReplaceNumberByKey("Y_Manipulator", noteStr,manipulatorY,"=","\r")	noteStr = ReplaceNumberByKey("Z_Manipulator", noteStr,manipulatorZ,"=","\r")	noteStr = ReplaceStringByKey("Comments", noteStr,Comments,"=","\r")	//noteStr = ReplaceStringByKey("LeftNotes",noteStr,LeftNotes,"=","\r")	//	if (initialflag)//		notestr+=addstr//	endif	return noteStrEndFunction InitialprocNotestr2D(data,initialstr)	Wave data	String initialstr	String notestr=note(data)	if (strsearch(notestr,"numofLayers",0)>=0)		Variable aux0=strsearch(notestr,"Processing Information:",0)		Variable aux1=strsearch(notestr,"\r",aux0,1)		Variable aux2=strsearch(notestr,"numofLayers",0)		Variable aux3=strsearch(notestr,"\r",aux2)		String tempstr=notestr[aux3+2,inf]		tempstr=replacestring("Layer_",tempstr,"rawL_")		notestr=notestr[0,aux1+1]+tempstr	else		notestr=TryImport_iphoto_note(data,notestr)	endif	String layerstr=""	layerstr+="\r"	layerstr+="Processing Information:\r"	layerstr+="numofLayers=1\r"	layerstr+="Layer_0"+"\r"	layerstr+="Wavetype="+initialstr+"\r"	layerstr+="ProcessNumber=0\r"	layerstr+="RawLayerNumber=-1\r"	layerstr+="RawProcNumber=-1\r"	layerstr+="Appendflag=0\r"	layerstr+="xpnts=\r"	layerstr+="ypnts=\r"	layerstr+="x0=\r"	layerstr+="x1=\r"	layerstr+="y0=\r"	layerstr+="y1=\r"	layerstr+="Layer_0"+"\r"	layerstr=ReplacenumberByKey("xpnts",layerstr,dimsize(data,0),"=","\r")	layerstr=ReplacenumberByKey("ypnts",layerstr,dimsize(data,1),"=","\r")	layerstr=ReplacenumberByKey("x0",layerstr,M_x0(data),"=","\r")	layerstr=ReplacenumberByKey("x1",layerstr,M_x1(data),"=","\r")	layerstr=ReplacenumberByKey("y0",layerstr,M_y0(data),"=","\r")	layerstr=ReplacenumberByKey("y1",layerstr,M_y1(data),"=","\r")	notestr+=layerstr	note /K data	note data notestr			End///////////Auto lock layers///////////////Function c_locklayerproc(name,value)	String name	Variable value	String panelname=winname(0,65)	SetActiveSubwindow $winname(0,65)	String DF_panel="root:internalUse:"+panelName	DFREF DFR_common=$(DF_panel+":panel_common")	//NVAR autolayerflag=DFR_common:gv_autolayerflag	//autolayerflag=(value==0)		SVAR toppath=DFR_common:gs_TopItemPath	Wave data=$toppath	GetProList(DFR_common,data,nan)End	Function Check_Autosimilar_layer(DF_common,flag)	DFREF DF_common	Variable flag		WAVE/t w_sourcePathes=DF_common:w_sourcePathes	Wave/b w_sourceNamesSel=DF_common:w_sourceNamesSel	NVAR toplayernum=DF_common:gv_toplayernum	NVAR topprocnum=DF_common:gv_topprocnum		NVAR autolayerflag=DF_common:gv_autolayerflag		if (autolayerflag==1)		if (Check_Autosimilar_layer_list(w_sourcePathes,w_sourceNamessel,toplayernum,topprocnum,flag)==-1)			doalert 0,"Not similar layer, change auto."			autolayerflag=0		endif	endifEndFunction Check_Autosimilar_layer_list(w_sourcePathes,w_sourceNamessel,toplayernum,topprocnum,flag)	WAVE/T w_sourcePathes 	WAVE/B w_sourceNamesSel 		Variable toplayernum,topprocnum,flag		Variable index=0	do		if (index>=numpnts(w_sourcePathes))			break		endif				if (flag==0)			Wave data=$w_sourcePathes[index]		else			if ((w_sourceNamesSel[index] == 1)||(w_sourceNamesSel[index] == 8)||(w_sourceNamesSel[index] == 9))				Wave data=$w_sourcePathes[index]			else				index+=1				continue			endif		endif				Variable beforlayernum=toplayernum		Variable beforprocnum=topprocnum				Autofindsimilar_Layer(data,beforlayernum,beforprocnum)				if (beforlayernum<0)   			return -1   		endif				index+=1	while (index<(numpnts(w_sourcePathes)))		return 1	EndFunction Autolayer_wavelist(data,toplayernum,topprocnum,autolayerflag)	Wave data	Variable toplayernum	Variable topprocnum	variable autolayerflag		if (autolayerflag==0)		return (dimsize(data,2)-1)	else		Autofindsimilar_Layer(data,toplayernum, topprocnum)		return toplayernum	endifEndFunction Autofindsimilar_Layer(data,beforelayernum, beforeprocnum)	Wave data	Variable &beforelayernum, &beforeprocnum	make /o /n=0 tempsavewave,Aprocnumlist	string notestr=note(Data)	String layerstr	Variable numlayer=Numberbykey("numofLayers",notestr,"=","\r")	redimension /N=(numlayer),Aprocnumlist	Variable index=0	do		layerstr=Getlayernotestr(notestr,index,1)		Aprocnumlist[index]=numberbykey("ProcessNumber",layerstr,"=","\r")		index+=1	while (index<numlayer)	Variable cindex=0	index=0	do 		if (Aprocnumlist[index]==beforeprocnum)			Insertpoints inf,1,tempsavewave			tempsavewave[cindex]=index			cindex+=1		endif		index+=1	while (index<numpnts(aprocnumlist))	//variable returnproc	if (numpnts(tempsavewave)>0)		if  (numpnts(tempsavewave)==1)			beforelayernum=tempsavewave[0]			//returnproc=tempsavewave[0]			Killwaves/Z aprocnumlist,tempsavewave			//return returnproc		else			duplicate /o  tempsavewave, tempwave			tempwave=abs(tempsavewave[p]-beforelayernum)			wavestats /Q /Z tempwave			beforelayernum=tempsavewave[V_minloc]			//returnproc=tempsavewave[V_minloc]			Killwaves/Z aprocnumlist,tempsavewave,tempwave			//return 	returnproc		endif	else		Killwaves/Z aprocnumlist,tempsavewave		beforelayernum=-1		//return -1	endif		return beforelayernumEnd//////////////// Layer related return function////////////function /S deleteString(rawstring,startpos,endpos)	String rawstring	Variable startpos,endpos	String returnstring	returnstring=rawstring[0,startpos-1]+rawstring[endpos+1,inf]	return returnstringEndFunction /S RemoveallLayernum(notestr,flag)		String notestr	Variable flag	Variable layerpos0,layerpos1	variable index	String templayername	do			templayername="Layer_"		layerpos0=strsearch(notestr,templayername,0)		if (layerpos0!=-1)			layerpos1=strsearch(notestr,"\r",layerpos0)			notestr=deletestring(notestr,layerpos0,layerpos1)			layerpos0=strsearch(notestr,"xpnts=",0)			if (layerpos0!=-1)				layerpos1=strsearch(notestr,"y1=",layerpos0)				layerpos1=strsearch(notestr,"\r",layerpos1)				notestr=deletestring(notestr,layerpos0,layerpos1)			endif		else			break		endif	while (1)		return notestrEndFunction /S Getlayernotestr(notestr,layernum,flag)	String notestr	Variable layernum,flag	String layername="Layer_"+num2str(layernum)	Variable tempx0=strsearch(notestr,layername,0)	if (tempx0==-1)		return ""	endif	Variable tempx1=strsearch(notestr,layername,tempx0+1)	if (flag==1)		return notestr[tempx0,tempx1-1]+layername //layernote	elseif (flag==0)		return notestr[0,tempx1-1]+layername //before+layernum//	elseif (flag==3)		return notestr[0,tempx0-1] //before without layernum//	elseif (flag==2)		return notestr[tempx0,inf] //after//	endifEndFunction /S GetLayerprocname(data,layernum)	wave data	Variable layernum		String notestr=note(Data)	String layerstr	layerstr=Getlayernotestr(notestr,layernum,1)	return Stringbykey("Wavetype",layerstr,"=","\r")	EndFunction Getlayerprocnum(data,layernum)	wave data	Variable layernum	String notestr=note(Data)	String layerstr	layerstr=Getlayernotestr(notestr,layernum,1)	return numberbykey("ProcessNumber",layerstr,"=","\r")EndFunction  GetProList(DFR_common,data,flag)	DFREF DFR_common	Wave data	Variable flag		DFREF DF=GetdatafolderdfR()		Wave/T w_proclist=DFR_common:w_proclist	Wave w_procnum=DFR_common:w_procnum	Wave/b w_proclistsel=DFR_common:w_proclistsel	NVAR toplayernum=DFR_common:gv_toplayernum	NVAR topprocnum=DFR_common:gv_topprocnum	NVAR autolayerflag=DFR_common:gv_autolayerflag		String notestr=note(Data)	String layerstr		Variable numlayer=Numberbykey("numofLayers",notestr,"=","\r")	if (numtype(numlayer)==2)		InitialprocNotestr2D(data,"rawdata")		notestr=note(Data)		numlayer=Numberbykey("numofLayers",notestr,"=","\r")	endif	redimension /N=(numlayer),w_proclist,w_procnum	redimension /N=(numlayer,1,3) w_proclistsel		Variable colorindex=0	Variable index=0	do		layerstr=Getlayernotestr(notestr,index,1)		w_proclist[index]=Stringbykey("Wavetype",layerstr,"=","\r")		w_procnum[index]=numberbykey("ProcessNumber",layerstr,"=","\r")		Variable appendflag=numberbykey("Appendflag",layerstr,"=","\r")		if (appendflag==1)			colorindex+=1		endif		w_proclistsel[index][0][1]=0		w_proclistsel[index][0][2]=colorindex		index+=1	while (index<numlayer)	w_proclistsel[][][0]=0	switch (numtype(flag))	case 0: //Control selection		toplayernum+=flag		topprocnum=w_procnum[toplayernum]	break	case 1:		toplayernum=dimsize(data,2)-1 //?		topprocnum=w_procnum[toplayernum]	break	case 2:		if (autolayerflag==0)			toplayernum=dimsize(data,2)-1			topprocnum=w_procnum[toplayernum]		else			Variable beforlayernum=toplayernum			Variable beforprocnum=topprocnum			toplayernum=Autofindsimilar_Layer(data,beforlayernum,beforprocnum)			if (beforlayernum<0)   				print "Not similar layer, change auto."   				//doalert 0,"Not similar layer, change auto."   				autolayerflag=0   				toplayernum=dimsize(data,2)-1   				topprocnum=w_procnum[toplayernum]   			else   				toplayernum=beforlayernum   				topprocnum=w_procnum[toplayernum]   			endif		endif	break	endswitch	w_proclistsel[toplayernum][][0]=1		SetDatafolder DF		return toplayernumEndFunction GetLayerimage(data,layernum)	Wave data	Variable layernum	String notestr=note(data)	if (WaveDims(data)==3)		string layerstr=GetLayernotestr(notestr,layernum,1)		Variable xpnts=Numberbykey("xpnts",layerstr,"=","\r")		Variable ypnts=Numberbykey("ypnts",layerstr,"=","\r")		Variable x0=Numberbykey("x0",layerstr,"=","\r")		Variable x1=Numberbykey("x1",layerstr,"=","\r")		Variable y0=Numberbykey("y0",layerstr,"=","\r")		Variable y1=Numberbykey("y1",layerstr,"=","\r")		if ((numtype(xpnts)==2)||(numtype(ypnts)==2)||(numtype(x0)==2)||(numtype(x1)==2)||(numtype(y0)==2)||(numtype(y1)==2))			make /o/n=(10,10) templayerimage			templayerimage=nan		else			make /o/n=(xpnts,ypnts) templayerimage			templayerimage=data[p][q][layernum]			setscale /I x,x0,x1,templayerimage			Setscale /I y,y0,y1,templayerimage			layerstr=GetLayernotestr(notestr,layernum,0)			note templayerimage,layerstr		endif	else				duplicate /o data templayerimage	endifEndFunction Add_proc_layer(data,tempimage,layernum)	Wave data	Wave tempimage	Variable layernum	Variable xpnts=dimsize(tempimage,0)	Variable ypnts=dimsize(tempimage,1)	Variable xpntsraw=dimsize(data,0)	Variable ypntsraw=dimsize(data,1)		Variable xpntsproc=max(xpnts,xpntsraw)	Variable ypntsproc=max(ypnts,ypntsraw)	//if ((xpntsraw<xpnts)||(ypntsraw<ypnts))	//	redimension /N=(xpnts,ypnts,(layernum+1)) data	//else	redimension /N=(xpntsproc,ypntsproc,(layernum+1)) data	//endif	data[][][layernum]=((p<xpnts)||(q<ypnts))?(tempimage[p][q]):(0)EndFunction set_proc_layer(data,layernum)	Wave data	Variable layernum	if (layernum>=0)		Variable xpntsraw=dimsize(data,0)		Variable ypntsraw=dimsize(data,1)		redimension /N=(xpntsraw,ypntsraw,(layernum+1)) data		set_proc_note(data,layernum)		return -1	else		return 0	endifEndFunction set_proc_note(data,layernum)Wave dataVariable layernum	String notestr = note(data)	note /K data	String layername="Layer_"+num2str(layernum+1)	Variable tempx=strsearch(notestr,layername,0)	if (tempx>0)		notestr=notestr[0,tempx-1]	endif	notestr=Replacenumberbykey("numoflayers",notestr,layernum+1,"=","\r")	note data,notestrEndFunction Add_proc_note(data,layernum,procstr)	Wave data	Variable layernum	String procstr	String notestr = note(data)	note /K data	String layername="Layer_"+num2str(layernum)	if (strsearch(notestr,layername,0)>0)		Variable tempx=strsearch(notestr,layername,0)		notestr=notestr[0,(tempx-1)]	endif	notestr=replacenumberbykey("numofLayers",notestr,(layernum+1),"=","\r")	notestr+=layername+"\r"	notestr+=procstr	notestr+=layername+"\r"	note data,notestrEndFunction Check_wavelist_layer(wavepathlist,layernum)	String wavepathlist	Variable layernum	String wpath	Variable index=0	do		wpath=stringfromlist(index,wavepathlist,";")		wave data=$wpath		if ((dimsize(data,2)-1)<layernum)		return 0		endif		index+=1	while (index<itemsinlist(wavepathlist,";"))	return 1End//////////////////////AUTO PROCESS PROMOPT PANEL/////////////////Function initialdialogwindow()	DFREF DF=getdatafolderDFR()	newDatafolder /o/s root:InternalUse:User_panel	Variable /G gv_autoprocessflag=0	Variable /G gv_processallflag=0	Variable /G gv_forceInsertflag=0	//String /G gs_prefix=""	String /G gs_suffix=""	String /G gs_new_Wavename=""	SetDatafolder DFEndFunction Setdialogwindow(graphname,data,suffixstr)	String graphname	Wave data	String suffixstr	DFREF DF=getdatafolderDFR()	DFREF DF_userpanel=root:InternalUse:User_panel	NVAR processallflag=DF_userpanel:gv_processallflag		NVAR autoprocessflag=DF_userpanel:gv_autoprocessflag	SVAR suffix=DF_userpanel:gs_suffix	SVAR new_wavename=DF_userpanel:gs_new_Wavename	newDatafolder /o/s root:InternalUse:User_panel	suffix=suffixstr	new_Wavename=uniquename(nameofwave(data)+"_",1,0)	SetDatafolder DFEndFunction openautosavewindow(graphname)	String graphName	DFREF DF=getdatafolderDFR()	SetDatafolder root:InternalUse:User_panel	DoWindow/F $graphName			Variable SC= Screensize(5)		Variable SR = ScreenSize(3) //* SC	Variable ST = ScreenSize(2)// * SC	Variable SL = ScreenSize(1)//* SC   	Variable SB = ScreenSize(4)// * SC	//Variable SR = Igorsize(3) 	//Variable ST = Igorsize(2)	//Variable SL = Igorsize(1)    //Variable SB = Igorsize(4)	Variable Width = 320*SC 	// panel size  	Variable height = 180*SC		Variable xOffset = (SR-SL)/2-width/2	Variable yOffset = (SB-ST)/2-height/2	NewPanel /K=2 /W=(xoffset, yoffset,xOffset+width,Height+yOffset) as "Pause for Selection"	DoWindow/K/Z  Pauseforautoproc			DoWindow/C Pauseforautoproc					// Set to an unlikely name	//AutoPositionWindow/E/M=1/R=$graphName			// Put panel near the graph	DrawText 21*SC,30*SC,"Overwrite selection"	checkbox all_ck0,pos={170*SC,15*SC},size={140*SC,20*SC},title="All",value=0	Button button1,pos={20*SC,40*SC},size={85*SC,20*SC},title="Overwrite",proc=autoprocess_ContButtonProc	Button button4,pos={115*SC,40*SC},size={85*SC,20*SC},title="Replace Raw",proc=autoprocess_ContButtonProc	Button button0,pos={210*SC,40*SC},size={85*SC,20*SC},title="Do nothing",proc=autoprocess_ContButtonProc	Button button2,pos={20*SC,65*SC},size={275*SC,20*SC},title="New Wave with suffix.",proc=autoprocess_ContButtonProc	//SetVariable sv_prefix,pos={20,90},size={80,20},title="prefix",value=gs_prefix	SetVariable sv_suffix,pos={20*SC,90*SC},size={80*SC,20*SC},title="suffix",value=gs_suffix	Button button3,pos={20*SC,115*SC},size={275*SC,20*SC},title="New Wave with new Wavename",proc=autoprocess_ContButtonProc	SetVariable sv_newWavename,pos={20*SC,140*SC},size={170*SC,20*SC},title="New name",value=gs_new_Wavename	//Button button4,pos={20,165},size={290,20},title="Overwrite next layer and Auto process.",proc=autoprocess_ContButtonProc	//Button button5,pos={20,190},size={290,20},title="Insert new layer and Auto process.",proc=autoprocess_ContButtonProc	PauseForUser  Pauseforautoproc,$graphName	SetDatafolder DFEndFunction openautoprocesswindow(graphname)	String graphName	DFREF DF=getdatafolderDFR()	SetDatafolder root:InternalUse:User_panel	DoWindow/F $graphName		Variable SC= Screensize(5)	Variable SR = Screensize(3) 	Variable ST = Screensize(2)	Variable SL = Screensize(1)   	 Variable SB = Screensize(4)	Variable Width = 320*SC 	// panel size  	Variable height = 120*SC		Variable xOffset = (SR-SL)/2-width/2	Variable yOffset = (SB-ST)/2-height/2	NewPanel /K=2 /W=(xoffset, yoffset,xOffset+width,Height+yOffset)	/N=Auto_Process as "Pause for Selection"	Modifypanel /W=Auto_process noedit=1,fixedsize=1	DoWindow/K/Z  Pauseforautoproc			DoWindow/C Pauseforautoproc					// Set to an unlikely name	//AutoPositionWindow/E/M=1/R=$graphName			// Put panel near the graph	DrawText 21*SC,30*SC,"AutoProcess selection"	checkbox all_ck0,pos={160*SC,15*SC},size={140*SC,20*SC},title="All",value=0	//checkbox all_ck1,pos={210,15},size={140,20},title="Force Insert",value=0	Button button1,pos={20*SC,40*SC},size={140*SC,20*SC},title="Insert with auto processing",proc=autoprocess_ContButtonProc		Button button0,pos={170*SC,40*SC},size={140*SC,20*SC},title="Do nothing.",proc=autoprocess_ContButtonProc	Button button2,pos={20*SC,65*SC},size={140*SC,20*SC},title="Insert without auto processing.",proc=autoprocess_ContButtonProc       Button button10,pos={170*SC,65*SC},size={140*SC,20*SC},title="Append",proc=autoprocess_ContButtonProc       	PauseForUser  Pauseforautoproc,$graphName	SetDatafolder DFEndFunction autoprocess_ContButtonProc(ctrlName) : ButtonControl	String ctrlName	NVAR autoprocessflag=root:Internaluse:User_panel:gv_autoprocessflag	NVAR processallflag=root:Internaluse:User_panel:gv_processallflag	NVAR ForceInsertflag=root:Internaluse:User_panel:gv_forceinsertflag	strswitch(ctrlname)		case "Button1":			autoprocessflag=1			break		case "Button10":			autoprocessflag=10			break		case "Button0":			autoprocessflag=0			break		case "Button2":			autoprocessflag=2			break		case "Button3":			autoprocessflag=3			break		case "Button4":			autoprocessflag=4			break	endswitch	controlinfo all_ck0	processallflag=v_value	//controlinfo all_ck1	//ForceInsertflag=v_value		DoWindow/K Pauseforautoproc			// Kill selfEnd/////////////////////////////FOLDER LIST PANEL COMMON FUNCTION///////////////Function /DF init_panelcommon()    DFREF DF = GetDataFolderDFR()     String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetDatafolder DFR_panel		DFREF DFR_common=init_sourceList(DF_panel)       Update_sourcelist(DFR_common)	wave w_image=DFR_common:w_image       String panelcommonPath= GetDatafolder(1,DFR_common)	if(waveexists(w_image)==0)		make_init_panelWaves(panelcommonPath)	endif		SetDatafolder DF		return DFR_commonEnd// create the waves: w_DF, w_sourceNames, w_sourceNamesSel in: 'root:internalUse:panel_common'// called by init_norm_panel, i.e. when the normalization-panel or the gold-panel is createdFunction Update_sourcelist(DFR_common)DFREF DFR_common	DFREF DF=GetDatafolderDFR()	SetDatafolder DFR_common		SVAR gs_currentDF 	SVAR gs_sourcePathList	SVAR gs_sourceNameList	SVAR gs_TopItemPath	SVAR gs_TopItemName	NVAR gv_topdfrow	NVAR gv_topwaverow	NVAR gv_sortopt	NVAR gv_toplayernum	NVAR gv_autolayerflag		SVAR gs_matchString//=""	SVAR gs_DFlist//="process:;gold:;"	Wave /T w_proclist	Wave w_procnum	Wave /b w_proclistSel		Wave/b w_sourceNamesSel//=0	Wave/T w_sourceNames//=""	Wave/T w_sourcePathes//="		String List, name		controlinfo source_ck1	Variable dim=(v_value)?(2):(3)			String DFList=FoldertoList(root:spectra:,"*",0)	DFlist=removeStringfromlist(DFlist,"root:spectra:",";",0)	if (strlen(gs_DFlist)<2)	gs_DFlist="process:;gold:;"	else	gs_DFlist="process:;gold:;"+DFlist	endif	// textwaves for the source list-boxes	List = FoldertoList(root:,"!*internal*",dim)	// all folders which do not match to *internal* and contain 2D waves	String mstring=("*"+gs_matchString+"*")	List = ListMatch(List,mString)	if (strlen(list) >= 1)	    SetDataFolder DFR_common	  	SListToWave(List,1,";",Nan,Nan)		duplicate/o/t w_StringList w_DF		KillWaves/z w_StringList		gs_currentDF = w_DF[0]		//Make/o/n=(numpnts(w_DF))/b w_DFlistSel=0		//w_DFlistSel[0]=1		SetDataFolder $gs_currentDF			List = wavelist("*",";", "DIMS:"+num2str(dim))		SetDataFolder DFR_common		SListToWave(list,gv_sortopt,";",Nan,Nan)		Duplicate/o/t w_stringList w_sourceNames,w_sourcePathes		KillWaves/z w_StringList		Make/o/n=(numpnts(w_sourceNames))/b w_sourceNamesSel=0		w_sourceNamesSel[0]=1		// update the strings			Variable i=0		do			name = w_sourceNames[i]			if (w_sourceNamesSel[i] == 1)				gs_sourcenameList += name+";"				gs_sourcePathList += gs_currentDF+name+";"			endif			w_sourcePathes[i]=gs_currentDF+name		i += 1		while (i < numpnts(w_sourceNamesSel))		gs_TopItemPath = StringFromList(0,gs_sourcePathList)		gs_TopItemName = StringFromList(0,gs_sourcenameList)		w_sourceNamesSel[0]=1		wave data=$gs_TopItemPath		gv_toplayernum=dimsize(data,2)-1		GetProList(DFR_common,data,inf)	else		SetDataFolder DFR_common		Make/o/n=0/b w_sourceNamesSel=0	endif			SetDatafolder DFEndFunction /DF init_sourceList(DF_panel)    DFREF DF_panel	DFREF DF = getdatafolderDFR()	SetDataFolder DF_panel//root:internalUse:panel_common	newDatafolder /o/s panel_common	DFREF DFR_common=getdatafolderDFR()	String/G gs_currentDF 	//= "root:carpets:rawData:"	// default to start with	String/G gs_sourcePathList = ""	String/G gs_sourceNameList = ""	String/G gs_TopItemPath	String/G gs_TopItemName	Variable/G gv_topdfrow=0	Variable/G gv_topwaverow=0	Variable/G gv_sortopt=1	Variable/G gv_toplayernum=0	Variable /G gv_topprocnum=0	Variable/G gv_autolayerflag=0	String/G gs_matchString=""	String/G gs_DFlist="process:;gold:;"	make /o/T/n=0,w_proclist	make /o/n=0,w_procnum	make/o/n=(0,1,3)/b, w_proclistSel	make/o/W/U proclist_color={{0,0,0},{65358,0,0},{0,0,65358},{0,26214,13293},{26411,1,52428},{65535,0,52428}}	MatrixTranspose proclist_color		SetDimLabel 2,1,backColors,w_proclistSel    	SetDimLabel 2,2,foreColors,w_proclistSel		Variable/G gv_p0, gv_p1, gv_q0, gv_q1, gv_ppnts, gv_qpnts	Variable/G gv_x0, gv_x1, gv_y0, gv_y1,gv_dx,gv_dy	Variable/G gv_E0, gv_E1, gv_M0, gv_M1		Variable/G gv_pA, gv_qA, gv_pB, gv_qB			Variable/G gv_hn = 21.2	Variable/G gv_EF = 16.7	Variable/G gv_workfunc = 4.35	Variable/G gv_innerE	Variable/G gv_th	Variable/G gv_ph	Variable/G gv_alpha	Variable/G gv_gamma	Variable/G gv_thoff	Variable/G gv_phoff	Variable/G gv_azioff	Variable/G gv_curveflag	Variable/G gv_sampletem	Variable/G gv_deflectorY		Make/o/n=0/b w_sourceNamesSel=0	Make/o/n=0/T w_sourceNames=""	Make/o/n=0/T w_sourcePathes=""	make /o/n=0/T w_DF=""			setdatafolder DF	return DFR_common	EndFunction source_Listbox_Proc(ctrlname, row, col, event)	String ctrlName	Variable row	Variable col	Variable event		String fList, wList,name		DFREF Df = getdatafolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common			controlinfo source_ck1	Variable dim=(v_value)?(2):(3)    	if(event == 1 || event == 4 || event == 5)	// click in the control or select a row		WAVE/t w_DF; WAVE/t w_sourceNames; WAVE/b w_sourceNamesSel		Wave/T w_sourcePathes		//Wave /b w_DFlistsel		SVAR pList = gs_sourcePathList		SVAR nList = gs_sourceNameList		SVAR topPath = gs_TopItemPath		SVAR topName = gs_TopItemName		NVAR toplayernum=gv_toplayernum		SVAR DF_data = gs_currentDF		SVAR matchstring=gs_matchstring		NVAR sortopt=gv_sortopt		SVAR gs_DFlist=gs_DFlist		NVAR topwaverow=gv_topwaverow		NVAR topdfrow=gv_topdfrow		// click in the DF - box -> update the current DF		ControlInfo /W=$winname(0,65) $ctrlName		Variable DFswitch = stringmatch(s_value,"w_DF")		Variable toprow=row						String DFList=FoldertoList(root:spectra,"*",0)		DFlist=removeStringfromlist(DFlist,"root:spectra:",";",0)		if (strlen(gs_DFlist)<2)			gs_DFlist="process:;gold:;"		else			gs_DFlist="process:;gold:;"+DFlist		endif				// update folder-list		if (DFswitch)	// folder control			fList = FoldertoList(root:,"!*internal*",dim)	// all folders which do not match to *internal*			String mstring="*"+matchstring+"*"			fList = ListMatch(flist,mstring)			SetDatafolder DFR_common			SListToWave(fList,1,";",Nan,Nan)			WAVE/t w_Stringlist			duplicate/o/t w_StringList w_DF			topdfrow=row			DF_data = w_DF[row]		endif			if (strlen(DF_data)>0)			// update wave-list			SetDataFolder $DF_data			wList = wavelist("*",";", "DIMS:"+num2str(dim))			SetDatafolder DFR_common			SListToWave(wList,sortopt,";",Nan,Nan)			WAVE/t w_Stringlist			Duplicate/o/t w_stringList w_sourceNames,w_sourcePathes			w_sourcePathes=DF_data+w_sourceNames[p]			Make/o/n=(numpnts(w_sourceNames))/b w_sourceNamesSel		else			SetDatafolder DFR_common			Make/o/n=(0)/t w_sourceNames,w_sourcePathes			Make/o/n=(numpnts(w_sourceNames))/b w_sourceNamesSel		endif								Killwaves/z w_stringList			if (DFswitch)			w_sourceNamesSel = 0			w_sourceNamesSel[0] = 1			toprow=0			//toplayernum=0		endif						// update the strings			if (event == 4 || event == 5)							Variable i=0,lastrow,multselflag=0			pList = ""			nList = ""			do				if ((w_sourceNamesSel[i] == 1)||(w_sourceNamesSel[i] == 8)||(w_sourceNamesSel[i] == 9))		// list with all selected items					name = w_sourceNames[i]					nList += name+";"					pList += w_sourcePathes[i]+";"					lastrow=i					multselflag+=1				endif			i += 1			while (i < numpnts(w_sourceNamesSel))	     			//i = 0	// first active item			//do								if (w_sourceNamesSel[toprow] == 0)					toprow=lastrow				endif								if (multselflag==0)					toprow=numpnts(w_sourceNames)-1					w_sourceNamesSel[toprow]=1					nList+= w_sourceNames[toprow]					plist+=w_sourcePathes[toprow]				endif									topwaverow=toprow					topPath = w_sourcePathes[toprow]					topName = w_sourceNames[toprow]//StringFromList(0,nList)																if (strlen(topPath)>0)					Wave tImage=$topPath					GetProList(DFR_common,tImage,NAN)  					Panelimageupdate(dim)  //////////////all the updates are here//////						  endif 											endif		endif						SetDataFolder DF	// execute the function for the panel specific stuff (if it exists)	//if (event == 4|| event == 5)	//	String cmd = WinName(0,65)+"_SLB_proc"		// top graph OR panel	//	if (strlen (FunctionList(cmd,";","KIND:2")) > 0)	// function exists	//		execute cmd+"()"	//	endif	//endif	return 0EndFunction Default_Folder_proc(ctrlname)	String ctrlname    DFREF Df = getdatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common	SVAR matchstring=gs_matchstring	controlinfo $ctrlname	strswitch (ctrlname)	case "source_bt0":	matchstring=""	break	case "source_bt1":	matchstring="process"	break	case "source_bt2":	matchstring="spectra"	break	case "source_bt3":	matchstring="gold"	break	endswitch	source_Listbox_Proc("source_lb1", 0, 0, 4)	SetDatafolder DFEndFunction Folder_list_search_proc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	source_Listbox_Proc("source_lb1", 0, 0, 4)EndFunction wave_list_sort_proc(ctrlname,value)	String ctrlname	Variable value		DFREF Df = getdatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common	NVAR sortopt=gv_sortopt	sortopt=value	source_Listbox_Proc("global_waves_list", 0, 0, 4)		SetDatafolder DFEndFunction wave_reorder_proc(ctrlname)	String ctrlname  	DFREF Df = getdatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common	SVAR DF_data=gs_currentDF	DuplicateDataFolder $DF_data :temp	Wave/T wlist=w_sourceNames	Variable index	String path,path1	do		path=DF_data+wlist[index]		path1=":temp:"+wlist[index]		Killwaves /Z $path		movewave $path1,$path		index+=1	while (index<numpnts(w_sourceNames))	killdatafolder :temp	    SetDatafolder DFEndFunction lock_aspect(ctrlname,value)	String ctrlname	Variable value		DFREF DF=GetDatafolderDFR()	String DFS_panel="root:internalUse:"+winname(0,65)	SetActivesubwindow $winname(0,65)	DFREF DFR_panel=$DFS_panel		String wname=winname(0,65)		if (stringmatch(wname,"mapper3D_panel_*"))		Adjustdisplayratio(3)  	 endif  	 if (stringmatch(wname,"mapper_panel_*"))  	 	Adjustdisplayratio(2)  	 endif  	 if (Stringmatch(wname,"BZ_panel_*"))  	 	Adjustdisplayratio(4)  	 endif	endFunction Adjustdisplayratio(dim)	Variable dim	DFREF DF = GetDataFolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	DFREF DFR_panel=$DF_panel	SetDataFolder DFR_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common	if (dim==1) //normal    	 	Modifygraph axisEnab(image_en)={0.42,1}    	   	Modifygraph axisEnab(edc_en)={0.42,1}    	  	 Modifygraph axisEnab(image_m)={0,0.55}       	Modifygraph axisEnab(bottom)={0,0.55}       	Modifygraph axisEnab(left)={0,0.38}       	Modifygraph axisEnab(edc_int)={0.65,1}       	ModifyGraph height=0	endif	if (dim==2) //mapping		controlinfo global_ck5				if (v_value)			return 0		endif				controlinfo global_ck10				if (v_value==0)			ModifyGraph axisEnab(image_en)={0.32,1},axisEnab(image_m)={0,0.65}  	 		Modifygraph axisEnab(bottom)={0,0.65}  	 		ModifyGraph axisEnab(edc_en)={0.32,1}  	 		Modifygraph axisEnab(edc_int)={0.9,1}  	 		Modifygraph height=0		else	       		Variable xlen=abs(M_x1(w_image)-M_x0(w_image))			Variable ylen=abs(M_y1(w_image)-M_y0(w_image))			if (xlen>(ylen*2))      		 		Modifygraph axisEnab(image_en)={(1-1.6/xlen*ylen),1}       			Modifygraph axisEnab(edc_en)={(1-1.6/xlen*ylen),1}       			Modifygraph axisEnab(image_m)={0,0.80}       			Modifygraph axisEnab(bottom)={0,0.80}       			ModifyGraph axisEnab(left)={0,0.10},axisEnab(edc_int)={0.9,1}       			ModifyGraph height={Aspect,0.5}              		else       			Modifygraph axisEnab(image_m)={0,(0.4/ylen*xlen)}       			Modifygraph axisEnab(bottom)={0,(0.4/ylen*xlen)}       			Modifygraph axisEnab(image_en)={0.20,1}       			Modifygraph axisEnab(edc_en)={0.20,1}              			ModifyGraph axisEnab(left)={0,0.10},axisEnab(edc_int)={0.9,1}       			ModifyGraph height={Aspect,0.5}      			 endif      		endif	endif		if (dim==3)//mapping3D		Wave xyFSM=DFR_panel:xyFSM		controlinfo global_ck5		if (v_Value==0)			controlinfo global_ck10			if (v_value==1)				xlen=abs(M_x1(xyFSM)-M_x0(xyFSM))				ylen=abs(M_y1(xyFSM)-M_y0(xyFSM))				if (xlen>(ylen/0.7))       				Modifygraph axisEnab(image_en)={(1-0.785714/xlen*ylen),1}       				Modifygraph axisEnab(edc_en)={(1-0.785714/xlen*ylen),1}       				Modifygraph axisEnab(image_m)={0,0.55}      	 				Modifygraph axisEnab(bottom)={0,0.55}    	   			else       				Modifygraph axisEnab(image_m)={0,( 0.385/ylen*xlen)}       				Modifygraph axisEnab(bottom)={0,( 0.385/ylen*xlen)}       				Modifygraph axisEnab(image_en)={0.45,1}       				Modifygraph axisEnab(edc_en)={0.45,1}  	 			endif  	 			ModifyGraph axisEnab(edc_int)={0.65,1}  	 			ModifyGraph axisEnab(left)={0,0.38}  	 			ModifyGraph axisEnab(lineimage_m)={0.65,1}				ModifyGraph axisEnab(lineimage_e)={0,0.38}				ModifyGraph height={Aspect,0.7}  	 		else  	 			ModifyGraph axisEnab(image_en)={0.42,1},axisEnab(image_m)={0,0.55}  	 			Modifygraph axisEnab(bottom)={0,0.55}  	 			ModifyGraph axisEnab(edc_en)={0.42,1}  	 			ModifyGraph axisEnab(edc_int)={0.65,1}  	 			ModifyGraph axisEnab(left)={0,0.38}  	 			ModifyGraph axisEnab(lineimage_m)={0.65,1}				ModifyGraph axisEnab(lineimage_e)={0,0.38}				ModifyGraph height=0				  	 		endif  		endif	endif		if (dim==4) //BZ		controlinfo global_ck10		if (v_value==0)			ModifyGraph height=0			ModifyGraph axisEnab(bottom)={0,0.6}		else			ModifyGraph height={Plan,1,left,bottom}   			ModifyGraph axisEnab(bottom)={0,0.6}		endif		endifEndFunction Panelimageupdate(dim)	Variable dim	DFREF DF = GetDataFolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetActiveSubwindow $winname(0,65)	DFREF DFR_common=$DF_panel+":panel_common"	SetDatafolder DFR_common	String wname=winname(0,65)	if (dim==-1) ///only update edc mdc		Wave w_image=DFR_common:w_image		Make/N=(dimsize(w_image,0))/O n_mdc, n_mdc2		Make/N=(dimsize(w_image,1))/O n_edc, n_edc2// n_edc_x		SetScale/I x, M_x0(w_image),M_x1(w_image), n_mdc, n_mdc2		SetScale/I x, M_y0(w_image),M_y1(w_image), n_edc, n_edc2//, n_edc_x		//n_edc_x = x				Cursor/P/I/H=1 A w_image pcsr(A),qcsr(A)		Cursor/P/I/H=1 B w_image pcsr(B),qcsr(B)			else		SVAR pList = gs_sourcePathList		SVAR topPath = gs_TopItemPath		NVAR toplayernum=gv_toplayernum		if (strlen(pList) == 0)			Make/o/n=(10,10) w_image=nan		else			if (dim==2)				Duplicate/o $topPath w_image			elseif (dim==3)				Wave data=$topPath				if (toplayernum>(dimsize(data,2)-1))					toplayernum=dimsize(data,2)-1					Wave/b w_proclistsel=DFR_common:w_proclistsel					w_proclistsel=0					w_proclistsel[toplayernum]=1				endif				Getlayerimage(data,toplayernum)				Wave templayerimage				Duplicate/o templayerimage w_image			endif		endif		Make/N=(dimsize(w_image,0))/O n_mdc, n_mdc2		Make/N=(dimsize(w_image,1))/O n_edc, n_edc2// n_edc_x		SetScale/I x, M_x0(w_image),M_x1(w_image), n_mdc, n_mdc2		SetScale/I x, M_y0(w_image),M_y1(w_image), n_edc, n_edc2//, n_edc_x		//n_edc_x = x			   	Update_panel_par()	   	   		      	   	ReadDetailWaveNote(w_image,toplayernum,1)	   			Wave /T WaveInfoL		Wave WaveVars		NVAR gv_hn		NVAR gv_EF		NVAR gv_workfunc		NVAR gv_innerE		NVAR gv_th		NVAR gv_ph		NVAR gv_alpha		NVAR gv_gamma		NVAR gv_thoff		NVAR gv_phoff		NVAR gv_azioff		NVAR gv_curveflag		NVAR gv_sampletem		NVAR  gv_deflectorY				ControlInfo  /W=$wname global_ck0		if(v_value)		else			gv_hn=WaveVars[6]			gv_EF=WaveVars[7]			//if (numtype(gv_EF)==2)			//gv_EF=gv_hn-gv_workfunc			//else			//gv_workfunc=gv_hn-gv_EF			//endif			gv_innerE=WaveVars[8]			gv_th=WaveVars[0]			gv_ph=WaveVars[2]			gv_alpha=WaveVars[4]			gv_thoff=WaveVars[1]			gv_phoff=WaveVars[3]			gv_azioff=WaveVars[5]			gv_gamma=WaveVars[9]					gv_sampletem=WaveVars[13]					gv_curveflag=WaveVars[12]			gv_deflectorY=WaveVars[14]		endif				Variable SD=Screensize(6)				DFREF DFR_prefs=$DF_prefs        	NVAR Dfontsize=DFR_prefs:gv_Dfontsize			String WaveinfoS="\Z"+num2indstr(round(DFontsize*SD),2)+WaveInfoL[0]+"\r"+WaveInfoL[1]+"\r"+WaveInfoL[2]+"\r"+WaveInfoL[3]+"\r"+WaveInfoL[4]				  // print waveinfoS		TextBox/W=$winname(0,65)/B=3/C/N=text0/F=0/A=MC/LS=3/Z=1/X=32.00/Y=-32 WaveinfoS	    	killWaves /Z waveinfoL,WaveVars,WaveInfoStrings,WaveinfoVars	    		    		    ////// AUTO LOCK CSR/////////	    	    if  (stringmatch(winname(0,65),"main_panel*")||stringmatch(winname(0,65),"Analysis_panel*"))	   		NVAR csrstep=DFR_panel:gv_csrstepnum	   		NVAR autodimflag=DFR_panel:gv_autodimflag			NVAR autoDCflag=DFR_panel:gv_autoDCflag			NVAR autoposition=DFR_panel:gv_autoposition								Variable setpoint									if (autoDCflag)				if (autodimflag==1)					setpoint=x2pntsmult(w_image,autoposition,0)					Cursor/W=$wname /P/I/H=1 B w_image trunc(setpoint-(csrstep-1)/2)+csrstep-1,qcsr(B,wname)					Cursor/W=$wname /P/I/H=1 A w_image trunc(setpoint-(csrstep-1)/2),qcsr(A,wname)				else					setpoint=x2pntsmult(w_image,autoposition,1)					Cursor/W=$wname /P/I/H=1 B w_image pcsr(B,wname),trunc(setpoint-(csrstep-1)/2)+csrstep-1					Cursor/W=$wname /P/I/H=1 A w_image pcsr(A,wname),trunc(setpoint-(csrstep-1)/2)				endif	   		else	   			   			   			Cursor /P/I/H=1/W=$wname A w_image pcsr(A,wname),qcsr(A,wname)				Cursor /P/I/H=1/W=$wname B w_image pcsr(B,wname),qcsr(B,wname)	   			   		endif	   	else	  	 	Cursor/W=$wname /P/I/H=1 A w_image pcsr(A,wname),qcsr(A,wname)			Cursor/W=$wname /P/I/H=1 B w_image pcsr(B,wname),qcsr(B,wname)	   	endif   		endif							/////SEPCIAL FUNCTION//////		Variable temp=strsearch(wname,"_panel",0)		   	String cmd = wname[0,temp+5]+"_SLB_proc"		// top graph OR panel	if (strlen (FunctionList(cmd,";","KIND:2")) > 0)	// function exists			execute cmd+"()"	endif		String Cwnamelist=ChildWindowList(wname)	if (Findlistitem("Image_Process",Cwnamelist,";",0)!=-1)		proc_update_imgpvar_forpanel("w_image")   	endif   		SetDatafolder DFEndFunction update_panel_par()	DFREF DF = GetDataFolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetActiveSubwindow $winname(0,65)	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common	NVAR gv_p0, gv_p1, gv_q0, gv_q1, gv_ppnts, gv_qpnts	NVAR gv_x0, gv_x1, gv_y0, gv_y1,gv_dx,gv_dy	wave w_image			gv_p0=0	gv_p1=dimsize(w_image,0)-1	gv_q0=0	gv_q1=dimsize(w_image,1)-1	gv_ppnts=dimsize(w_image,0)	gv_qpnts=dimsize(w_image,1)	gv_x0=M_x0(w_image)	gv_x1=M_x1(w_image)	gv_y0=M_y0(w_image)	gv_y1=M_y1(w_image)	gv_dx=dimdelta(w_image,0)	gv_dy=dimdelta(w_image,1)EndFunction proc_Listbox_Proc(ctrlname, row, col, event)	String ctrlName	Variable row	Variable col	Variable event		String fList, wList,name		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)		DFREF DFR_common=$DF_panel+":panel_common"	NVAR toplayernum=DFR_common:gv_toplayernum	NVAR topprocnum=DFR_common:gv_topprocnum	NVAR gv_autolayerflag=DFR_common:gv_autolayerflag		Wave w_proclistSel=DFR_common:w_proclistSel	Wave w_procnum=DFR_common:w_procnum	wave w_image=DFR_common:w_image		if ((event==4)||(Event==5))	//Variable index=0		if (row>(dimsize(w_proclistsel,0)-1))			row=dimsize(w_proclistsel,0)-1		endif		toplayernum=row		topprocnum=w_procnum[row]		w_proclistsel[row][0][0]=1		if (row<(dimsize(w_proclistsel,0)-1))			gv_autolayerflag=1		endif		Panelimageupdate(3)	endif	return 0EndFunction remove_image_DCs(panelName)	String panelName	DFREF Df = getdatafolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$DF_panel+":panel_common"	SetDatafolder DFR_common	Cursor/K A 	removefromgraph/Z w_image,n_mdc,n_mdc2,n_edc,n_edc2//_x,n_edc_x#1		SetDatafolder DFEndFunction add_image_DCs(panelName)	String panelName	DFREF Df = getdatafolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	DFREF DFR_panel=$DF_panel	SetDataFolder DFR_panel	DFREF DFR_common=$DF_panel+":panel_common"	SetDatafolder DFR_common		String panelcommonPath=GetDatafolder(1,DFR_common) 		Wave w_image	if (waveexists(w_image) == 0)		make_init_panelWaves(panelcommonPath)	endif		WAVE w_image; WAVE n_mdc; WAVE n_edc//; WAVE n_edc_x	Wave n_mdc2; Wave n_edc2		Checkdisplayed /W=$winname(0,65) n_edc	if (V_flag==0)		AppendToGraph/Q/VERT/L=edc_en/T=edc_int n_edc//n_edc_x vs n_edc	endif		Checkdisplayed /W=$winname(0,65) n_mdc	if (V_flag==0)		AppendToGraph/Q n_mdc	endif		Checkdisplayed /W=$winname(0,65) w_image	if (V_flag==0)		AppendImage/T=image_m/L=image_en w_image	endif		ShowInfo; Cursor/P/I/H=1 B w_image 20,20; 			ModifyGraph margin(left)=36,margin(bottom)=22,margin(top)=18	ModifyGraph gfSize=10	ModifyGraph btLen=3,stLen=2	ModifyGraph rgb(n_mdc)=(1,26214,0),rgb(n_edc)=(1,26214,0)//rgb(n_edc_x)=(1,26214,0)		if (stringmatch(panelname,"gold_panel")==0)		Checkdisplayed /W=$winname(0,65) n_edc2		if (V_flag==0)			AppendToGraph/Q/VERT/L=edc_en/T=edc_int n_edc2//n_edc_x vs n_edc2		endif		Checkdisplayed /W=$winname(0,65) n_mdc2		if (V_flag==0)			AppendToGraph/Q n_mdc2		endif		Cursor/P/I/H=1 A w_image 10,10		ModifyGraph rgb(n_edc2)=(52428,1,1), rgb(n_mdc2)=(52428,1,1)    endif    	ModifyGraph nticks(image_m)=0, nticks(image_en)=0	ModifyGraph noLabel(image_m)=2	ModifyGraph axThick(image_m)=0,axThick(image_en)=0		ModifyGraph freePos(edc_en)={0,edc_int}	//ModifyGraph freePos(edc_int)={0,edc_en}	ModifyGraph freePos(edc_int)={Inf,edc_en}	ModifyGraph freePos(image_en)=0	ModifyGraph freePos(image_m)={0,image_en}	ModifyGraph axisEnab(left)={0,0.38},axisEnab(bottom)={0,0.55}	ModifyGraph axisEnab(edc_en)={0.42,1},axisEnab(edc_int)={0.65,1}	ModifyGraph axisEnab(image_en)={0.42,1},axisEnab(image_m)={0,0.55}		Label image_en "\\u#2"	//AddPlotFrame()		SetDataFolder DFEndFunction make_init_panelWaves(SDF)    String SDF	DFREF DF = getdatafolderDFR()	Setdatafolder $SDF		Make/o/n=(10,10) w_image=nan		//Duplicate/o w_image// w_image_u1, w_image_u2		// the 'undo' images		Make/N=10/O n_mdc, n_mdc2//, w_norm		Make/N=10/O n_edc, n_edc2//, n_edc_x	SetDataFolder DFEnd// this is executed whenever any cursors on any graphs are moved...Function CursorMovedHook(info)	String info		String graphName = StringByKey("GRAPH",info,":",";")	String cursorName = StringByKey("CURSOR",info,":",";")	DFREF Df=GetDatafolderDFR()	SetActiveSubwindow $winname(0,65)		String Cwnamelist=ChildWindowList(graphName)		if (Findlistitem("CrossCursor_panel",Cwnamelist,";",0)!=-1) 		Update_CrossCursor_panel(graphname) 		if (stringmatch(cursorName,"A")) 			UpdateCursorMagnifier(Graphname,1) 		elseif (stringmatch(cursorName,"B")) 			UpdateCursorMagnifier(Graphname,2) 		endif 		Doupdate /W=$graphname#CrossCursor_Panel#Magnifier 		//controlupdate /W=$graphname#CrossCursor_Panel#Magnifier	endif				if (strsearch(graphname,"panel",0)<0)		return 1	endif		if (stringmatch(graphname,"BZ_panel*")) //BZ 		return 1	endif		if (stringmatch(graphName,"Analysis_panel*"))		return 1				endif				if (stringmatch(graphname,"Mapper3D_panel*")) //mapper 3D 		String DF_panel="root:internalUse:"+graphName		DFREF DFR_panel=$DF_panel		NVAR xpos=DFR_panel:xpos		NVAR ypos=DFR_panel:ypos		NVAR xApos=DFR_panel:xApos		NVAR yApos=DFR_panel:yApos				NVAR xvalue=DFR_panel:xvalue		NVAR xAvalue=DFR_panel:xAvalue		NVAR yvalue=DFR_panel:yvalue		NVAR yAvalue=DFR_panel:yAvalue				Wave plotcube=DFR_panel:plotcube			Wave xyFSM=DFR_panel:xyFSM		Variable bExists= strlen(CsrInfo(B)) > 0		Variable aExists= strlen(CsrInfo(A)) > 0		if (bExists == 0)			ShowInfo /W=$graphName; Cursor/W=$graphName/P/I/H=1 B xyFSM 10,10		endif				if (aExists == 0)			ShowInfo /W=$graphName; Cursor/W=$graphName/P/I/H=0 A xyFSM 10,10		endif			xpos=pcsr(B)		ypos=qcsr(B)				xvalue=M_x0(plotcube)+xpos*dimdelta(plotcube,0)		yvalue=M_y0(plotcube)+ypos*dimdelta(plotcube,1)						xApos=pcsr(A)		yApos=qcsr(A)				xAvalue=M_x0(plotcube)+xApos*dimdelta(plotcube,0)		yAvalue=M_y0(plotcube)+yApos*dimdelta(plotcube,1)				update3Dlayers()		return 1	endif		if (stringmatch(graphname,"Fit_panel*")) // fitpanel		DF_panel="root:internalUse:"+graphName		DFREF DFR_panel=$DF_panel		NVAR Fit_leftrange=DFR_panel:gv_fit_leftrange		NVAR Fit_rightrange=DFR_panel:gv_fit_rightrange						aExists= strlen(CsrInfo(A)) > 0				bExists= strlen(CsrInfo(B)) > 0		if (bExists == 0)			ShowInfo; Cursor /P/H=2 B w_trace 30		endif		if (aExists == 0)			ShowInfo; Cursor /P/H=2 A w_trace 10		endif				Variable xA=xcsr(A,graphName)		Variable xb=xcsr(B,graphName)		Fit_leftrange=min(xA,xb)		Fit_rightrange=max(xA,xb)		return 1	endif			DF_panel="root:internalUse:"+graphName	DFREF DFR_common=$(DF_panel+":panel_common")	DFREF DFR_panel=$DF_panel		NVAR M0=DFR_common:gv_M0	NVAR M1=DFR_common:gv_M1	NVAR E0=DFR_common:gv_E0	NVAR E1=DFR_common:gv_E1	NVAR pA=DFR_common:gv_pA	NVAR qA=DFR_common:gv_qA	NVAR pB=DFR_common:gv_pB	NVAR qB=DFR_common:gv_qB			if (Datafolderexists(Df_panel))		SetDataFolder $DF_panel		WAVE w_image=DFR_common:w_image		WAVE n_edc=DFR_common:n_edc		WAVE n_edc2=DFR_common:n_edc2		WAVE n_mdc=DFR_common:n_mdc		WAVE n_mdc2=DFR_common:n_mec2				aExists= strlen(CsrInfo(A,graphName)) > 0		bExists= strlen(CsrInfo(B,graphName)) > 0		if (bExists == 0)			ShowInfo /W=$graphName; Cursor /W=$graphName/P/I/H=1 B w_image 10,10		endif		if (aExists == 0)			ShowInfo/W=$graphName ; Cursor /W=$graphName/P/I/H=1 A w_image 10,10		endif		pA = pcsr(A,graphName)		pB = pcsr(B,graphName)		qA = qcsr(A,graphName)		qB = qcsr(B,graphName)		//if (pA>pB)		M0= (dimoffset(w_image,0)+pB*dimdelta(w_image,0))		M1= (dimoffset(w_image,0)+pA*dimdelta(w_image,0))		//else		//M0= (dimoffset(w_image,0)+pA*dimdelta(w_image,0))		//M1= (dimoffset(w_image,0)+pB*dimdelta(w_image,0))		//endif				//if (qA>qB)		E0= (dimoffset(w_image,1)+qB*dimdelta(w_image,1))		E1= (dimoffset(w_image,1)+qA*dimdelta(w_image,1))		//else		//E0= (dimoffset(w_image,1)+qA*dimdelta(w_image,1))		//E1= (dimoffset(w_image,1)+qB*dimdelta(w_image,1))		//endif				if (stringmatch(graphName,"gold_panel*"))			collapse_Proc("dummy",0)				controlinfo /W=$graphName gold				String tabname=s_value					Strswitch (tabname)					case "TMF":				controlupdate  /W=$graphName tmf_sv0				controlupdate /W=$graphName tmf_sv1				GoldPanel#new_TMF("dummy")				break			case "disp":				controlupdate /W=$graphName disp_sv_7				controlupdate /W=$graphName  disp_sv_8				break			endswitch		endif			if (stringmatch(graphName,"mapper_panel*"))			NVAR  gv_tmf_e0=DFR_panel:gv_tmf_e0			NVAR  gv_tmf_e1=DFR_panel:gv_tmf_e1			controlinfo /W=$graphName map			tabname=s_value			collapse_Proc("dummy",0)			Strswitch (tabname)			case "source":				gv_tmf_e0=E0				gv_tmf_e1=E1				break			case "select":				gv_tmf_e0=E0				gv_tmf_e1=E1				break			case "settings":				break					endswitch		endif				Variable d_limit				if (stringmatch(graphName,"main_panel*"))			String DF_normal="root:internalUse:"+graphName+":process"			DFREF DFR_normal=$DF_normal			NVAR csr_e=DFR_normal:gv_csr_e			NVAR csr_e_sub=DFR_normal:gv_csr_e_sub						ControlInfo /W=$graphName DCs_c0	// EDCs/MDCs					NVAR first = DFR_panel:gv_first			NVAR last = DFR_panel:gv_last			NVAR step = DFR_panel:gv_step			NVAR Dcnum=DFR_panel:gv_Dcnum			NVAR col=DFR_panel:gv_col			  			if (stringmatch(cursorName,"B"))				if (v_value)					last = pB					else					last = qB					endif			elseif (stringmatch(cursorName,"A"))				if (v_value)					first = 	pA	//xPoint	//NumberByKey("POINT",info,":",";")				else					first = qA 	//yPoint	//NumberByKey("YPOINT",info,":",";")				endif			endif					d_limit=abs(last-first)					SetVariable DCs_sv2, win=$graphName,limits={1,(d_limit+1),1}					if (Dcnum>(abs(last-first)+1))				Dcnum=abs(last-first)+1			endif    						step=(last==first)?(1):((last-first)/abs(last-first)*round((abs(last-first)+1)/DCnum))					d_limit=step					SetVariable DCs_sv16, win=$graphName,limits={1,abs(d_limit),1}       		// if ((col==0)||(col>abs(d_limit)))			col=abs(d_limit)			//endif					collapse_Proc("dummy",0)					ControlInfo  /W=$graphName global_ck0			if(v_value)			else				csr_e=(dimoffset(w_image,1)+qB*dimdelta(w_image,1))				csr_e_sub=M_y1(w_image)-csr_e			endif				controlinfo /W=$graphName main			tabname=s_value					Strswitch (tabname)			case "DCs":				controlUpdate /W=$graphName DCs_sv0				ControlUpdate /W=$graphName DCs_sv1				ControlUpdate /W=$graphName DCs_sv2				ControlUpdate /W=$graphName DCs_sv15				ControlUpdate /W=$graphName DCs_sv16				break			case "TMF":				controlupdate  /W=$graphName tmf_sv0				controlupdate  /W=$graphName tmf_sv1				controlupdate  /W=$graphName tmf_sv11			//	controlinfo /W=$graphName tmf_c1			//	if (v_value) 			//		update_proc_wave()			//	endif				break			case "Disp":				controlupdate  /W=$graphName disp_sv0				break			case "Scale":				controlupdate  /W=$graphName Scale_sv0				//controlupdate  Scale_sv10				//controlupdate  Scale_sv11				controlupdate  /W=$graphName Scale_sv12				controlupdate  /W=$graphName Scale_sv13				controlupdate  /W=$graphName Scale_sv14				break			case "Bkg":				controlupdate  /W=$graphName Norm_sv0				controlupdate  /W=$graphName Norm_sv1				controlupdate  /W=$graphName Norm_sv4				controlupdate  /W=$graphName Norm_sv5				//controlinfo /W=$graphName bkg_ck4				//if (v_value)				//else				update_proc_wave(0)				//endif			break 			case "Norm":				controlupdate  /W=$graphName Norm_sv0				controlupdate  /W=$graphName Norm_sv1				controlupdate  /W=$graphName Norm_sv4				controlupdate  /W=$graphName Norm_sv5				controlinfo /W=$graphName Norm_ck4				if (v_value==0)					update_proc_wave(0)				else					update_Fermi_wave()				endif			break		endswitch				autosynBZCuts(DFR_common)			endif		endif		SetDatafolder DF		EndFunction/S WMGetRECREATIONFromInfoOnly(info)	String info	// from ImageInfo, ContourInfo, TraceInfo, or AxisInfo	String key=";RECREATION:"	Variable sstop= strsearch(info, key, 0)	info= info[sstop+strlen(key),inf]		sstop= strsearch(info, ";", 0)	info= info[0,sstop-1]		// want just recreation stuff	return infoendFunction lock_intensity(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked		String topGraphName = WinName(0,65)	SetActiveSubwindow $winname(0,65)	if (stringmatch(ctrlname,"global_ck1"))	if (checked)		GetAxis/q/w=$topGraphName edc_int		SetAxis edc_int v_min,v_max				GetAxis/q/w=$topGraphName left		SetAxis left v_min,v_max		Wave w_image=ImageNameToWaveRef("","w_image")		String info=WMGetRECREATIONFromInfoOnly(imageinfo("","w_image",0))		String text = ReplaceString(";", info, ",")       if (strsearch(text,"*",0)!=-1)           text=ReplaceString("*", text, num2str(wavemin(w_image)),0,1)       endif       if (strsearch(text,"*",0)!=-1)           text=ReplaceString("*", text, num2str(wavemax(w_image)),0,1)       endif       Execute /Q "ModifyImage w_image " + text	else	    SetAxis/A edc_int		SetAxis/A left		info=WMGetRECREATIONFromInfoOnly(imageinfo("","w_image",0))		Variable temp1=strsearch(info,",",inf,1)		temp1=strsearch(info,",",temp1-1,1)		text="ctab= {*,*,"+info[temp1+1,inf]		Execute /Q "ModifyImage w_image " + text	endif	endif	if (stringmatch(ctrlname,"global_ck5"))	if (checked)		GetAxis/q/w=$topGraphName image_en		SetAxis  image_en v_min,v_max				GetAxis/q/w=$topGraphName image_m		SetAxis  image_m v_min,v_max				GetAxis/q/w=$topGraphName edc_en		SetAxis  edc_en v_min,v_max				GetAxis/q/w=$topGraphName bottom		SetAxis  bottom v_min,v_max	else		SetAxis/A image_en		SetAxis/A image_m		SetAxis/A edc_en		SetAxis/A bottom			endif	endif	endFunction collapse_Proc(ctrlName,checked)	String ctrlName	Variable checked		DFREF DF = GetDataFolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder  DFR_common		WAVE n_edc; WAVE w_image	String GraphName = WinName(0,65)		Variable aExists= strlen(CsrInfo(A,GraphName)) > 0	Variable bExists= strlen(CsrInfo(B,GraphName)) > 0	Variable goldpanel = stringmatch(GraphName,"gold_panel_*")	Variable x0, x1, y0, y1	Variable csrCheck, eCollapse, kCollapse		if (! bExists)		ShowInfo /W=$GraphName; Cursor/W=$GraphName/P/I/H=1 B w_image 20,20	endif		if (goldpanel==0)		if (aExists == 0)			ShowInfo /W=$GraphName; Cursor/W=$GraphName/P/I/H=1 A w_image 10,10		endif		ControlInfo /W=$GraphName global_ck4		csrCheck = v_value		NVAR col=DFR_panel:gv_col		x0 = dimoffset(w_image,0) + pcsr(A,GraphName) * dimdelta(w_image,0)		x1 = dimoffset(w_image,0) + pcsr(B,GraphName) * dimdelta(w_image,0)		y0 = dimoffset(w_image,1) + qcsr(A,GraphName) * dimdelta(w_image,1)		y1 = dimoffset(w_image,1) + qcsr(B,GraphName) * dimdelta(w_image,1)	endif		ControlInfo /W=$GraphName global_ck2	eCollapse = v_value	ControlInfo /W=$GraphName global_ck3	kCollapse = v_value		if (kCollapse)	// collapse k		if (csrCheck)			m_avg_subrange(w_image, 1, x0, x1)		else			m_avg(w_image,1)		endif		WAVE w_avg		Duplicate/o w_avg n_edc, n_edc2	else		n_edc = w_image[pcsr(B,GraphName)][p]		if (goldpanel==0)			n_edc2 = w_image[pcsr(A,GraphName)][p]		endif			endif			if (eCollapse)		if (csrCheck)			m_avg_subrange(w_image, 0, y0, y1)		else			m_avg(w_image,0)		endif		WAVE w_avg		Duplicate/o w_avg n_mdc, n_mdc2	else		n_mdc = w_image[p][qcsr(B,GraphName)]		if (goldpanel==0)			n_mdc2 = w_image[p][qcsr(A,GraphName)]		endif	endif		//doupdate		SetDataFolder DFEnd/////////////////////////////////panel_common graph/////////////////////////Function /DF init_graph_panelcommon()	DFREF DF = GetDataFolderDFR()    	 String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetActiveSubwindow $winname(0,65)		SetDatafolder DFR_panel		newDatafolder /o/s panel_common	DFREF DFR_common=GetDatafolderdfR()		String/G gs_currentDF 	//= "root:carpets:rawData:"	// default to start with	String/G gs_sourcePathList = ""	String/G gs_sourcePathXList = ""	String/G gs_sourceNameList = ""	String/G gs_TopItemPath	String/G gs_TopItemPathX	String/G gs_TopItemName	Variable/G gv_topdfrow=0	Variable/G gv_topwaverow=0	Variable/G gv_sortopt=0	Variable/G gv_toplayernum=0	String/G gs_matchString=""	//Variable/G gv_azioff		Make/o/n=0/b w_sourceNamesSel=0	Make/o/n=0/T w_sourceNames=""	Make/o/n=0/T w_sourcePathes=""	Make/o/n=0/T w_sourcePathesX=""	make /o/n=0/T w_DF		String List, name		controlinfo source_ck1	Variable dim=(v_value)?(2):(1)	// textwaves for the source list-boxes	List = WinList("!"+winname(0,65)+"*", ";", "WIN:1")	// all folders which do not match to *internal* and contain 2D waves	String mstring=("*"+gs_matchString+"*")	List = ListMatch(List,mString)	List = returnGraphlist_dim(List,dim)		if (strlen(list) > 0)	    SetDataFolder DFR_common	  	SListToWave(List,1,";",Nan,Nan)		duplicate/o/t w_StringList w_DF		KillWaves/z w_StringList		gs_currentDF = w_DF[0]			if (dim==1)			list=tracenamelist(gs_currentDF,";",1)		else			list=imagenamelist(gs_currentDF,";")		endif				//List = wavelist("*",";", "DIMS:"+num2str(dim))		SetDataFolder DFR_common		SListToWave(list,gv_sortopt,";",Nan,Nan)		Duplicate/o/t w_stringList w_sourceNames,w_sourcePathes,w_sourcePathesX		w_sourcePathesX=""		KillWaves/z w_StringList		Make/o/n=(numpnts(w_sourceNames))/b w_sourceNamesSel=0		w_sourceNamesSel[0]=1		// update the strings			Variable i=0		do			name = w_sourceNames[i]			if (dim==1)				Wave /Z data=tracenametowaveref(gs_currentDF,name)				Wave /Z Xdata=XWaveRefFromTrace(gs_currentDF,name)				w_sourcePathes[i]=GetWavesDatafolder(data,2)//gs_currentDF+name				if (waveexists(Xdata))					w_sourcePathesX[i]=GetWavesDatafolder(Xdata,2)				endif			else				Wave /Z data=imagenametowaveref(gs_currentDF,name)				w_sourcePathes[i]=GetWavesDatafolder(data,2)			//list=imagenamelist(gs_currentDF,";")			endif						if (w_sourceNamesSel[i] == 1)				gs_sourcenameList += name+";"				gs_sourcePathList += w_sourcePathes[i]+";"//gs_currentDF+name+";"			endif					i += 1		while (i < numpnts(w_sourceNamesSel))				gs_TopItemPath = StringFromList(0,gs_sourcePathList)		gs_TopItemPathX=	w_sourcePathesX[0]		gs_TopItemName = StringFromList(0,gs_sourcenameList)		w_sourceNamesSel[0]=1		wave data=$gs_TopItemPath		//gv_toplayernum=dimsize(data,2)-1		//GetProList(DFR_common,data,inf)	else		SetDataFolder DFR_common		Make/o/n=0/b w_sourceNamesSel=0	endif			SetDatafolder DF	return DFR_commonEndFunction Default_graph_proc(ctrlname)	String ctrlname    DFREF Df = getdatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common	SVAR matchstring=gs_matchstring	controlinfo $ctrlname	strswitch (ctrlname)	case "source_bt0":	matchstring=""	break	case "source_bt1":	matchstring="EDC*"	break	case "source_bt2":	matchstring="MDC*"	break	case "source_bt3":	matchstring="IMG*"	break	endswitch	graph_Listbox_Proc("source_lb1", 0, 0, 4)	SetDatafolder DFEndFunction graph_list_search_proc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	Graph_Listbox_Proc("source_lb1", 0, 0, 4)EndFunction Graph_Listbox_Proc(ctrlname, row, col, event)	String ctrlName	Variable row	Variable col	Variable event		String fList, wList,name		DFREF Df = getdatafolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	SetDataFolder $DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common			controlinfo source_ck1	Variable dim=(v_value)?(2):(1)    	if(event == 1 || event == 4 || event == 5)	// click in the control or select a row		WAVE/t w_DF; WAVE/t w_sourceNames; WAVE/b w_sourceNamesSel		Wave/T w_sourcePathes; Wave/T w_SourcePathesX		//Wave /b w_DFlistsel		SVAR pList = gs_sourcePathList		SVAR pxlist= gs_sourcePathXlist		SVAR nList = gs_sourceNameList		SVAR topPath = gs_TopItemPath		SVAR topXPath = gs_TopItemPathX		SVAR topName = gs_TopItemName		//NVAR toplayernum=gv_toplayernum		SVAR gs_currentDF = gs_currentDF		SVAR gs_matchString=gs_matchstring		NVAR sortopt=gv_sortopt		SVAR gs_DFlist=gs_DFlist		NVAR topwaverow=gv_topwaverow		NVAR topdfrow=gv_topdfrow		// click in the DF - box -> update the current DF		ControlInfo /W=$winname(0,65) $ctrlName		Variable DFswitch = stringmatch(s_value,"w_DF")		Variable toprow=row				//String DFList=FoldertoList(root:spectra,"*",0)		//DFlist=removeStringfromlist(DFlist,"root:spectra:",";",0)		//if (strlen(gs_DFlist)<2)		//gs_DFlist="process:;gold:;"		//else		//gs_DFlist="process:;gold:;"+DFlist		//endif				// update folder-list		if (DFswitch)	// folder control			fList = WinList("!"+winname(0,65), ";", "WIN:1")	// all folders which do not match to *internal* and contain 2D waves			String mstring=("*"+gs_matchString+"*")			fList = ListMatch(fList,mString)			fList = returnGraphlist_dim(fList,dim)						SetDataFolder DFR_common	  		SListToWave(fList,1,";",Nan,Nan)			duplicate/o/t w_StringList w_DF			KillWaves/z w_StringList			topdfrow=row			gs_currentDF = w_DF[row]			   				endif			if (strlen(gs_currentDF)>0)			// update wave-list			if (dim==1)				wlist=tracenamelist(gs_currentDF,";",1)			else				wlist=imagenamelist(gs_currentDF,";")			endif						SetDatafolder DFR_common			SListToWave(wList,sortopt,";",Nan,Nan)			WAVE/t w_Stringlist			Duplicate/o/t w_stringList w_sourceNames,w_sourcePathes,w_sourcePathesX			KillWaves/z w_StringList			Make/o/n=(numpnts(w_sourceNames))/b w_sourceNamesSel//=0			//w_sourceNamesSel[0]=1			// update the strings				Variable i=0			do				name = w_sourceNames[i]				if (dim==1)					Wave /Z data=tracenametowaveref(gs_currentDF,name)					Wave /Z Xdata=XWaveRefFromTrace(gs_currentDF,name)					w_sourcePathes[i]=GetWavesDatafolder(data,2)//gs_currentDF+name					if (waveexists(Xdata))						w_sourcePathesX[i]=GetWavesDatafolder(Xdata,2)					else						w_sourcePathesX[i]=""					endif				else					Wave /Z data=imagenametowaveref(gs_currentDF,name)					w_sourcePathes[i]=GetWavesDatafolder(data,2)					w_sourcePathesX[i]=""			//list=imagenamelist(gs_currentDF,";")				endif								i += 1			while (i < numpnts(w_sourceNamesSel))						if (DFswitch)				w_sourceNamesSel = 0				w_sourceNamesSel[0] = 1				toprow=0			endif				// update the strings				if (event == 4 || event == 5)						Variable lastrow,multselflag=0			pList = ""			pxlist =""			nList = ""			i=0			do				if ((w_sourceNamesSel[i] == 1)||(w_sourceNamesSel[i] == 8)||(w_sourceNamesSel[i] == 9))		// list with all selected items					name = w_sourceNames[i]					nList += name+";"					pList += w_sourcePathes[i]+";"					pxlist += w_sourcePathesX[i]+";"					lastrow=i					multselflag+=1				endif			i += 1			while (i < numpnts(w_sourceNamesSel))	     			//i = 0	// first active item			//do								if (w_sourceNamesSel[toprow] == 0)					toprow=lastrow				endif								if (multselflag==0)					toprow=numpnts(w_sourceNames)-1					w_sourceNamesSel[toprow]=1					nList+=w_sourceNames[toprow]+";"					plist+=w_sourcePathes[toprow]+";"					pxlist += w_sourcePathesX[toprow]+";"				endif									topwaverow=toprow					topPath = w_sourcePathes[toprow]					topXPath= w_sourcePathesX[toprow]					topName = w_sourceNames[toprow]//StringFromList(0,nList)																update_select_data(dim)					//panelimageupdate(-1)			endif								else			SetDatafolder DFR_common			make /o/T/n=0 w_sourceNames,w_sourcePathes			Make /o/B/n=0 w_sourceNamesSel			topPath=""			topname=""			update_select_data(dim)		endif										endif						SetDataFolder DF	// execute the function for the panel specific stuff (if it exists)	//if (event == 4|| event == 5)	//	String cmd = WinName(0,65)+"_SLB_proc"		// top graph OR panel	//	if (strlen (FunctionList(cmd,";","KIND:2")) > 0)	// function exists	//		execute cmd+"()"	//	endif	//endif	return 0EndFunction Graphsel_Listbox_proc(ctrlname,row,col,event)	String ctrlName	Variable row	Variable col	Variable event		DFREF Df = getdatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")		SVAR topPath =DFR_common: gs_TopItemPath	SVAR topXPath = DFR_common:gs_TopItemPathX	SVAR topName = DFR_common:gs_TopItemName	SVAR pList = DFR_common:gs_sourcePathList	SVAR pxlist= DFR_common:gs_sourcePathXlist	SVAR nList = DFR_common:gs_sourceNameList	NVAR topwaverow=DFR_common:topwaverow		WAVE/T w_sourcePathes = DFR_panel:FitWavePath_list	Wave/T w_sourcePathesX= DFR_panel:FitWavePathX_list	WAVE/T w_sourceNames = DFR_panel:FitWavename_list	Wave/B w_sourceNamessel=DFR_panel:fitWaveName_list_sel	NVAR gv_dimflag=DFR_panel:gv_dimflag		controlinfo main	if (Stringmatch(S_value,"source"))		SetDatafolder DF		return 0	endif		SetDatafolder DFR_panel		String name	variable toprow		if(event == 4 || event == 5)			Variable lastrow,multselflag=0			pList = ""			pxlist =""			nList = ""			Variable i=0			do				if ((w_sourceNamesSel[i] == 1)||(w_sourceNamesSel[i] == 8)||(w_sourceNamesSel[i] == 9))		// list with all selected items					Wave /Z data=$w_sourcePathes[i]					Wave /Z xdata=$w_sourcePathesX[i]					name = w_sourceNames[i]					nList += name+";"					pList +=GetWavesDatafolder(data,2)+";"					if (waveexists(xdata))						pxlist += GetWavesDatafolder(xdata,2)+";"					else						pxlist+=";"					endif					lastrow=i					multselflag+=1				endif			i += 1			while (i < numpnts(w_sourceNamesSel))	    				if (w_sourceNamesSel[toprow] == 0)					toprow=lastrow				endif								if (multselflag==0)					toprow=numpnts(w_sourceNames)-1					w_sourceNamesSel[toprow]=1					Wave /Z data=$w_sourcePathes[toprow]					Wave /Z xdata=$w_sourcePathesX[toprow]										nList+=w_sourceNames[toprow]+";"					plist+=GetWavesDatafolder(data,2)+";"					if (waveexists(xdata))						pxlist += GetWavesDatafolder(xdata,2)+";"					else						pxlist+=";"					endif				endif									topwaverow=toprow					Wave /Z data=$w_sourcePathes[toprow]					Wave /Z xdata=$w_sourcePathesX[toprow]					topPath = GetWavesDatafolder(data,2)					if (waveexists(xdata))						topXPath= GetWavesDatafolder(xdata,2)					else						topXPath=""					endif					topName = w_sourceNames[toprow]//StringFromList(0,nList)																update_select_data(gv_dimflag)					//panelimageupdate(-1)	endif		SetDatafolder DFEndFunction  BringFrontGraph(ctrlname)	String ctrlname	DFREF DF=GetDatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")		SetActiveSubwindow $winname(0,65)		SVAR gs_currentDF= DFR_common:gs_currentDF	if (strlen(gs_currentDF)>0)		Dowindow /Z /F $gs_currentDF	EndifEndfunction proc_ck_sortopt(ctrlname,value)	String ctrlname	Variable value		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetActiveSubwindow $winname(0,65)	NVAR gv_dimflag=DFR_panel:gv_dimflag		Graph_Listbox_Proc("source_lb1", 0, 0, 4)	Endfunction proc_ck_dimsel(ctrlname,value)	String ctrlname	Variable value		DFREF DF=GetdatafolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	SetActivesubwindow $winname(0,65)	NVAR gv_dimflag=DFR_panel:gv_dimflag	DFREF DFR_rawdata=$(DF_panel+":raw_data")				Wave /T FitWavename_list=DFR_panel:FitWavename_list	Wave /B FitWavename_list_sel=DFR_panel:FitWavename_list_sel	Wave/T FitWavePath_list=DFR_panel:FitWavePath_list	Wave/T FitWavePathX_list= DFR_panel:FitWavePathX_list		Variable predim=gv_dimflag		Variable ckvalue	Strswitch(ctrlname)	case "source_ck0":		ckvalue=0		gv_dimflag=1	break	case "source_ck1":		ckvalue=1		gv_dimflag=2	break	endswitch				if (predim!=gv_dimflag)		if (numpnts(FitWavename_list)>0)			doalert 1,"Clear all selective wave?"			if (V_flag==2)				ckvalue=predim-1				gv_dimflag=predim				checkbox source_ck0,value=ckvalue==0				checkbox source_ck1,value=ckvalue==1				return 0			endif		endif		SetDatafolder DFR_rawdata		redimension /n=0 FitWavename_list,FitWavename_list_sel,FitWavepath_list,FitWavePathX_list		Killwaves /A /Z		//update_fitdata_wave(gv_dimflag,"",0,-1)						endif	checkbox source_ck0,value=ckvalue==0	checkbox source_ck1,value=ckvalue==1	Graph_Listbox_Proc("source_lb1", 0, 0, 4)		SetDatafolder DF			EndFunction update_select_data(dim)	Variable dim			DFREF Df = getdatafolderDFR()		String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetDatafolder DFR_common		SVAR topPath = DFR_common:gs_TopItemPath	SVAR topPathX= DFR_common:gs_topItemPathX	SVAR topName = DFR_common:gs_TopItemName		if (strlen(topPath)==0)		if (dim==1)			make /o/n=100, w_trace			SetScale /I x,-1,1,w_trace			w_trace=0.04/(x^2+0.04)*sin(50*x)			checkdisplayed w_trace			if (V_flag==0)				appendtograph w_trace				ModifyGraph grid=2,gridStyle=1				ModifyGraph mode=4,marker=8,msize=1.5			//modifygraph 			endif			removeimage /Z w_image		else			make /o/n=(100,100) w_image			w_image=cos(x)*sin(y)			checkdisplayed w_image			if (V_flag==0)				appendimage w_image				ModifyGraph grid=0			endif			removefromgraph /Z w_trace		endif	else			if (dim==1)			Wave trace=$topPath			duplicate /o trace w_trace			if (strlen(topPathX)>0)				Wave Xtrace=$topPathX				setscale /I x,wavemin(Xtrace),wavemax(Xtrace),w_trace				w_trace=interp(x,Xtrace,trace)			endif					checkdisplayed w_trace			if (V_flag==0)				appendtograph w_trace				ModifyGraph grid=2,gridStyle=1				ModifyGraph mode=4,marker=8,msize=1.5				//ModifyGraph axisEnab(bottom)={0,0.6}				ModifyGraph mirror(left)=0			//modifygraph 			endif			removeimage /Z w_image		else			Wave image=$topPath			duplicate /o image w_image			checkdisplayed w_image			if (V_flag==0)				appendimage w_image				ModifyGraph grid=0				//ModifyGraph axisEnab(bottom)={0,0.55}				ModifyGraph mirror(left)=0			endif			removefromgraph /Z w_trace		endif	endif		if (dim==1)		ReadDetailWaveNote(w_trace,Nan,1)	else 		ReadDetailWaveNote(w_image,Nan,1)	endif		Wave /T WaveInfoL	Wave WaveVars		Variable SD=Screensize(6)			DFREF DFR_prefs=$DF_prefs       NVAR Dfontsize=DFR_prefs:gv_Dfontsize		String WaveinfoS="\Z"+num2indstr(round(DFontsize*SD),2)+"\K(65535,0,0)"+WaveInfoL[0]+"\r"+WaveInfoL[1]+"\r"+WaveInfoL[4] //+WaveInfoL[3]+"\r"+WaveInfoL[2]+"\r"		if (dim==1)		textBox/W=$winname(0,65)/B=1/C/N=text0/F=0/A=MC/LS=3/Z=1/X=27/Y=37 WaveinfoS	else		textBox/W=$winname(0,65)/B=1/C/N=text0/F=0/A=MC/LS=3/Z=1/X=27/Y=-37 WaveinfoS	endifEndFunction update_xwave_output()	String ctrlname    	DFREF Df = getdatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	SetActiveSubwindow $winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")		Wave /T FitWavePath_list=DFR_panel:FitWavePath_list		if (numpnts(FitWavepath_list)==0)		return 0	endif		SetDatafolder DFR_panel	Make /o/n=(numpnts(FitWavepath_list)) xwave_tem,xwave_photonE,xwave_Energy,xwave_momentum	Variable index=0	do		Wave data=$FitWavePath_list[index]		String notestr=note(data)		Variable tempvar=numberbykey("SampleTemperature", notestr, "=","\r")		tempvar= (numtype(tempvar)==2)?(index):(tempvar)		xwave_tem[index]=tempvar		tempvar=numberbykey("PhotonEnergy", notestr, "=","\r")		tempvar= (numtype(tempvar)==2)?(index):(tempvar)		xwave_photonE[index]=tempvar		tempvar=numberbykey("Energy", notestr, "=","\r")		tempvar= (numtype(tempvar)==2)?(index):(tempvar)		xwave_Energy[index]=tempvar		tempvar=numberbykey("Momentum", notestr, "=","\r")		tempvar= (numtype(tempvar)==2)?(index):(tempvar)		xwave_momentum[index]=tempvar				index+=1	while(index<numpnts(FitWavePath_list))		SetDatafolder DFEndFunction AddmainpanelSel(ctrlName)	string ctrlname	DFREF DF=GetDatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetActiveSubwindow $winname(0,65)			SVAR sourcePathlist=DFR_common:gs_sourcePathlist	SVAR sourcePathXlist=DFR_common:gs_sourcePathXlist	SVAR sourcenamelist=DFR_common:gs_sourcenamelist	WAVE/T w_sourcePathes = DFR_common:w_sourcePathes	WAVE/T w_sourcePathesX = DFR_common:w_sourcePathesX	WAVE/T w_sourceNames = DFR_common:w_sourceNames	Wave/B w_sourceNamessel=DFR_common:w_sourceNamessel		WAVE/T w_sourcePathes_fit = DFR_panel:FitWavePath_list	Wave/T w_sourcePathesX_fit= DFR_panel:FitWavePathX_list	WAVE/T w_sourceNames_fit = DFR_panel:FitWavename_list	Wave/B w_sourceNamessel_fit=DFR_panel:fitWaveName_list_sel		NVAR gv_dimflag=DFR_panel:gv_dimflag		DFREF DFR_rawdata=$(DF_panel+":raw_data")		SetDatafolder DFR_panel		if (stringmatch (ctrlname,"source_b2")) //all			Variable index=0,pindex=0			do								String waveN=w_sourceNames[index]								if (SearchStringInWave(w_sourceNames_fit,waveN)==-1)					Wave rawdata=$w_sourcePathes[index]					Duplicate /o rawData, DFR_rawdata:$waveN					Wave rawdata=DFR_rawdata:$waveN										AppendstringtoList_norepeat(w_sourceNames_fit,waveN,0,0)					AppendstringtoList_norepeat(w_sourcePathes_fit,GetwavesDatafolder(rawdata,4),0,0)										Wave /Z rawdatax=$w_sourcePathesX[index]					if (waveexists(rawdatax))						String xwaveN=nameofwave(rawdatax)						Duplicate /o rawdatax, DFR_rawdata:$xwaveN						Wave rawdatax=DFR_rawdata:$xwaveN						AppendstringtoList_norepeat(w_sourcePathesX_fit,GetwavesDatafolder(rawdatax,4),0,0)					else						AppendstringtoList_norepeat(w_sourcePathesX_fit,"",0,0)					endif									endif				index+=1			while (index<numpnts(w_sourcePathes))		        Variable add_pnts = numpnts(w_sourcePathes_fit)	        Redimension/N=(add_pnts) w_sourceNamessel_fit		 w_sourceNamessel_fit=0		 //   sort /A w_sourceNames_fit,w_sourceNames_fit,w_sourcePathes_fit,w_sourceNamessel_fit		    	elseif (stringmatch (ctrlname,"source_b3"))			String	objpathlist=sourcePathlist		String  objpathXlist=sourcePathXlist		String	objnamelist=sourcenamelist			index=0			do				if (itemsinlist(objpathlist)==0)					break				endif								waveN=Stringfromlist(index,objnamelist)												if (SearchStringInWave(w_sourceNames_fit,waveN)==-1)					Wave rawdata=$Stringfromlist(index,objpathlist)					Duplicate /o rawData, DFR_rawdata:$waveN					Wave rawdata=DFR_rawdata:$waveN										AppendstringtoList_norepeat(w_sourceNames_fit,waveN,0,0)					AppendstringtoList_norepeat(w_sourcePathes_fit,GetwavesDatafolder(rawdata,4),0,0)										Wave /Z rawdatax=$stringfromlist(index,objpathXlist)										if (waveexists(rawdatax))						xwaveN=nameofwave(rawdatax)						Duplicate /o rawdatax, DFR_rawdata:$xwaveN						Wave rawdatax=DFR_rawdata:$xwaveN						AppendstringtoList_norepeat(w_sourcePathesX_fit,GetwavesDatafolder(rawdatax,4),0,0)					else						AppendstringtoList_norepeat(w_sourcePathesX_fit,"",0,0)					endif												endif								index+=1				while (index<itemsinlist(objpathlist))					add_pnts = numpnts(w_sourcePathes_fit)	        	Redimension/N=(add_pnts) w_sourceNamessel_fit		    	w_sourceNamessel_fit=0		  else	    	        	   	objpathlist=sourcePathlist	   	objpathXlist=sourcePathXlist	      	objnamelist=sourcenamelist	     	do				if (itemsinlist(objpathlist)==0)					break				endif								waveN=Stringfromlist(index,objnamelist)								Variable removeindex=RemovestringfromList_norepeat(w_sourceNames_fit,waveN,0)				if (numtype(removeindex)==0)					Wave rawdata=DFR_rawdata:$waveN										DeletePoints /M=0 removeindex, 1 ,w_sourcePathes_fit,w_sourcePathesX_fit												Killwaves /Z rawdata				endif			index+=1			while (index<itemsinlist(objpathlist))					add_pnts = numpnts(w_sourcePathes_fit)	       Redimension/N=(add_pnts) w_sourceNamessel_fit		 w_sourceNamessel_fit=0		  endif		SetDatafolder DF        	update_xwave_output()	endFunction RemoveListSel(ctrlName)	string ctrlname		DFREF DF=GetDatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetActiveSubwindow $winname(0,65)		DFREF DFR_rawdata=$(DF_panel+":raw_data")		SetDatafolder DFR_panel		WAVE/T w_sourcePathes = DFR_panel:FitWavePath_list	Wave/T w_sourcePathesX= DFR_panel:FitWavePathX_list	WAVE/T w_sourceNames = DFR_panel:FitWavename_list	Wave/B w_sourceNamessel=DFR_panel:fitWaveName_list_sel		NVAR gv_dimflag=DFR_panel:gv_dimflag			Variable index=0		if (stringmatch(ctrlname,"source_b4")||stringmatch(ctrlname,"select_b4"))		do 			if ((w_sourceNamesSel[index]==1)||(w_sourceNamesSel[index]==8)||(w_sourceNamesSel[index] == 9))				Wave rawdata=$w_sourcePathes[index]				DeletePoints index,1, w_sourcePathes,w_sourceNames,w_sourceNamesSel,w_sourcePathesX				Killwaves /Z rawdata			endif		index+=1		while (index<numpnts(w_sourceNamesSel))			else		redimension /N=0 w_sourcePathes,w_sourceNames,w_sourcePathesX,w_sourceNamesSel		SetDatafolder DFR_rawdata		Killwaves /Z /A	endif		update_xwave_output()		SetDatafolder DFEndFunction AddBrowserSel(ctrlName)	string ctrlname	DFREF DF=GetDatafolderDFR()	String DF_panel="root:internalUse:"+winname(0,65)	DFREF DFR_panel=$DF_panel	DFREF DFR_common=$(DF_panel+":panel_common")	SetActiveSubwindow $winname(0,65)		WAVE/T w_sourcePathes = DFR_panel:FitWavePath_list	Wave/T w_sourcePathesX= DFR_panel:FitWavePathX_list	WAVE/T w_sourceNames = DFR_panel:FitWavename_list	Wave/B w_sourceNamessel=DFR_panel:fitWaveName_list_sel			NVAR gv_dimflag=DFR_panel:gv_dimflag		DFREF DFR_rawdata=$(DF_panel+":raw_data")		SetDatafolder DFR_panel		//SVAR scurrentDF=MDF_common:gs_currentDF	  	//if (gv_dimflag==2)	//	Redimension/N=(0) w_sourceNames,w_sourcePathes,w_sourceNamessel,w_sourcePathesX	//	KillWaves/A/Z	//endif			String name, notestr		String cmd = "CreateBrowser prompt=\"select soucre data to add, and click 'ok'\""	execute /Q cmd	SVAR S_BrowserList=S_BrowserList	NVAR V_Flag=V_Flag	if(V_Flag==0)		SetDatafolder Df		return -1 	endif		String objlist,objname,DF_data		 if (strlen(s_BrowserList)>0)	  		objname=stringfromlist(0,s_BrowserList,";")		if (exists(objname)!=1)			if (Datafolderexists(objname))				String currentDF=objname				SetDatafolder $currentDF				objlist=wavelist("*",";","")						else				SetDatafolder Df				return -1			endif		else			objlist=s_BrowserList		endif				Variable index=0			do				if (itemsinlist(objlist)==0)				break				endif							Wave rawdata=$Stringfromlist(index,objlist)								String WaveN=nameofwave(rawdata)								if (SearchStringInWave(w_sourceNames,waveN)==-1)					Duplicate /o rawData, DFR_rawdata:$waveN					Wave rawdata=DFR_rawdata:$waveN										AppendstringtoList_norepeat(w_sourceNames,waveN,0,0)					AppendstringtoList_norepeat(w_sourcePathes,GetwavesDatafolder(rawdata,4),0,0)					AppendstringtoList_norepeat(w_sourcePathesX,"",0,0)								endif				index+=1				while (index<itemsinlist(objlist))				Variable add_pnts = numpnts(w_sourcePathes)	       Redimension/N=(add_pnts) w_sourceNamessel		 w_sourceNamessel=0	else		SetDatafolder Df		return -1	endif    		update_xwave_output()		SetDatafolder DF	end