#pragma rtGlobals=1		// Use modern global access method.#pragma version = 0.01#include <Extract Contours As Waves>override StrConstant DF_global="root:internalUse:global_panel"override StrConstant DFS_global="root:internalUse:global_panel:"//StrConstant DF_IMGP="root:internalUse:IMG_Macro:"//StrConstant DFS_IMGP="root:internalUse:IMG_Macro"override StrConstant DF_prefs="root:internalUse:global_panel:Prefs:"override StrConstant DFS_prefs="root:internalUse:global_panel:Prefs"override Constant constant_Macro_Version=102//#include <All IP Procedures>//#include <KBColorizeTraces>override StrConstant ksiProcPath = ":User procedures:ARPESMacro:"		// all the procedures must be stored here!!! (compiles much faster with full pathes)override StrConstant NotebookPath = ":User procedures:ARPESMacro:Explog:"	Menu "Our Panels"	"Main Process/F5",open_main_panel("Mene")	 "Mapping/F6",open_mapper_panel("Mene")	 "Cube", FSM_enable3DShow("Mene")	"Cut Planner/F7",open_BZ_panel("Mene")    	"Gold Fitting/F8",open_gold_panel("Mene")    	"Analysis",Open_Analysis_Panel("Mene")    	"Fit Data",open_fit_panel("Mene")    	//"Merge",open_merge_panel("Mene")    	"Load files/F12",open_loadfile_panel("Mene")    	"-"	"Auto Load/OF11",Auto_load_quickFn()	"Auto Map/OF12",Auto_map_quickFn()	"-"	"Open Data Table/O8",/q, DF_opendatatable()	"-"	//"JoinRawData By sweep",/q,JoinRawData()	"Seperate Append",/q, Sep_Append()	"-"	"Save Preview Notebook",/q,	NBP_Save()	"Open Previewer Panel",/q, Open_Previewer_Panel("Mene")End///InitializeFunction AfterFileOpenHook(refNum, fileNameStr, pathNameStr, fileTypeStr, fileCreatorStr, fileKind)	Variable refNum, fileKind	String fileNameStr, pathNameStr, filetypeStr , fileCreatorStr	String user_files_path=specialDirPath("Igor Pro User Files",0,0,0)			NewPath/Q/C/O iPath user_files_path+ksiProcPath[1,strlen(ksiProcPath)-1]		// symbolic path to the i_photo Folder	NewPath/Q/C/O NBPath  user_files_path+NotebookPath[1,strlen(NotebookPath)-1]	NewDataFolder/O/S root:internalUse	NewDataFolder/o/S $DF_global	//NewDataFolder/o/S $DFS_IMGP		NewDataFolder/O root:process	NewDataFolder/O/S root:graphsave	NewDataFolder/O EDCs	NewDataFolder/O MDCs	NewDataFolder/O Images	NewDataFolder/O FSMs	NewDataFolder/O Others	NewDataFolder /O Cubes		NewDataFolder/O root:rawData	NewDataFolder/O/S root:spectra	NewDataFolder/O/S root:gold	NewDataFolder/O NormWaves		String s,wname=""	sprintf s,"Dowindow /N/S=quickStyle %s",wname ///for control 6 and 7 	Execute /P /Q/Z s		// load the prefs:		NewDataFolder/O/S  $DFS_prefs	pathinfo ipath	print s_path	LoadWave/O/Q/T/P = iPath "Pref_waves.itx"		//ImageLoad /O/Q/N=Iconpic/P=iPath /T=jpeg "Icon.jpg"			WAVE/T strNames = Pref_strNames	WAVE/T varNames = Pref_varNames	WAVE/T strValues = Pref_strValues	WAVE varValues = Pref_varValues			Variable index = 0	do		Variable/G $varNames[index]=varValues[index]		index+=1	while ( index < numpnts(varNames) )	index = 0	do		String/G $strNames[index]=strValues[index]		index+=1	while ( index < numpnts(strNames) )				SetDatafolder root:		String IgorVers = StringByKey("IGORFILEVERSION",IgorInfo(3))		String Platform = IgorInfo(2)	String OS = StringByKey("OS",IgorInfo(3))	String OSversion = StringByKey("OSVERSION",IgorInfo(3))				If(str2num(IgorVers[0]) < 6)		DoAlert 0, "ARPES Macro is written for IGOR 6.22 Please upgrade!!!"		DoAlert 1,"Quit IGOR now?"		If(V_Flag==1)			Execute "Quit/N"		else			DoAlert 0,"Be aware: Macro will NOT run properly with your version of IGOR Pro!"		endif	endif		Print "... starting '"+fileNameStr+"' under IGOR PRO "+IgorVers+" on "+OS+" "+OSversion		// compile a basic set of procedures		include_ipf("Initialize", 0.01)	include_ipf("Matrix_Utilities", 0.01)	include_ipf("StringList_Utilities",0.01)	include_ipf("Utilities", 0.01)	include_ipf("Panel_common", 0.01)	include_ipf("Prefs", 0.01)	include_ipf("LoadFiles", 0.01)	include_ipf("Loadfile_panel", 0.01)		include_ipf("Main_panel",0.01)	include_ipf("DC",0.01)	include_ipf("DCs_panel",0.01)	include_ipf("Normalize", 0.01)	include_ipf("Normalize_panel", 0.01)	include_ipf("Process", 0.01)	include_ipf("Process_panel",0.01)		include_ipf("Mapper",0.01)	include_ipf("Mapper_panel",0.01)	include_ipf("Mapper_3D_show",0.01)		include_ipf("Gold_Panel", 0.01)		include_ipf("Datatable_panel", 0.01)		include_ipf("BZ_panel", 0.01)		include_ipf("Merger_panel", 0.01)		include_ipf("Anal_panel",0.01)	include_ipf("Correlation",0)		include_ipf("Graph_Style",0.01)	include_ipf("Graph_Process",0.01)	include_ipf("Make_different",0.01)	include_ipf("Image_process",0.01)			include_ipf("Fit_core",0.01)	include_ipf("Fit_interface", 0.01)	include_ipf("Fitfunction", 0.01)	include_ipf("Fit_panel",0.01)			include_ipf("LEED", 0)		include_ipf("TempPro",0)			include_ipf("SProc:U_proc",0)	include_ipf("SProc:AN_proc",0)	include_ipf("SProc:F_proc",0)	include_ipf("SProc:NLC_proc",0)	include_ipf("SProc:Simu_utility",0)			//include_ipf("loadfile_DA30_SES",0)		//include_ipf("chunkLoader:buildMask",0)	//include_ipf("chunkLoader:chunkLoader",0)	//include_ipf("chunkLoader:DA_indexBoundaryCheck",0)	//include_ipf("chunkLoader:extractPlane",0)	//include_ipf("chunkLoader:load3Doverview",0)	//include_ipf("chunkLoader:loadDimAndScales",0)	//include_ipf("Arpes_mapping_shin",0.01)			execute/P/Q "COMPILEPROCEDURES "		DefaultFont_proc()			DFREF DFR_global=$DF_global	NVAR /Z OldVersion=DFR_global:gv_MacroVersion	SVAR /Z Oldfolder=DFR_global:gs_filefolder	if (NVAR_Exists(OldVersion))		update_all_panels(OldVersion)	elseif (SVAR_Exists(Oldfolder))		update_all_panels(0)	else		execute/P/Q "Open_loadfile_Panel_start()"		// Put Command-Window where it belongs and open the main panel:		Variable height, x_offset, y_offset		Variable SC = ScreenSize(5)		Variable SB = ScreenSize(4) * SC		Variable SR = ScreenSize(3) * SC		Variable rOffset = 270 // larger than the main panel in the bottom right corner			if (SB <= 768)	// reduced command window size for small screens			height = 135			x_offset = 2			y_offset = 2			if ( stringmatch(OS[0,2],"win"))				y_offset += 100 * SC				x_offset += 6			endif			MoveWindow/C x_offset,SB-y_offset-height,SR - rOffset,SB - y_offset		else			//height = 180			x_offset = 4			y_offset = 6			if ( stringmatch(OS[0,2],"win"))				y_offset += 100 * SC				x_offset += 6			endif			DoWindow /H/B		endif		endif	EndFunction DefaultFont_proc()	DefaultFont/U "Arial"	Variable SC=Screensize(5)	String Dfont="arial"//"Century Gothic"		 DFREF DFR_prefs=$DF_prefs    	NVAR panelscale=DFR_prefs:gv_panelscale    	NVAR Dfontsize=DFR_prefs:gv_Dfontsize			DefaultGUIFont/Win all={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win button={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win checkbox={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win tabcontrol={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win popup={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win panel={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win graph={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Win table={Dfont,Dfontsize*SC,0}		DefaultGUIFont/Mac all={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac button={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac checkbox={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac tabcontrol={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac popup={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac panel={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac graph={Dfont,Dfontsize*SC,0}	DefaultGUIFont/Mac table={Dfont,Dfontsize*SC,0}End// include an igor procedure file from the folder specified by the string 'root:internalUse:gs_xpdPath'// (INSERTINCLUDE generates the include statements in the main procedure window)Function include_ipf(name, version)	String name	Variable version		String cmd0	cmd0 = "INSERTINCLUDE  \""+ksiProcPath+name+"\""+", version>="+num2str(version)	execute/P cmd0End// 1: screen-left, 2: screen-top, 3: screen-right, 4: screen-bottom, 5: size-correctionFunction ScreenSize(num)	Variable num		String dumstr		Variable from,to		Variable SL,ST,SR,SB, SC,SD				DFREF DFR_prefs=$DF_prefs    		NVAR panelscale=DFR_prefs:gv_panelscale    		NVAR macscale=DFR_prefs:gv_macscale				dumstr	= StringByKey("SCREEN1",IgorInfo(0))			from	=	strsearch(dumstr,"RECT=",0)+5	// screen-left		to		=	strsearch(dumstr,",",from)		SL		=	str2num(dumstr[from,to-1])			from	=	to+1			to		=	strsearch(dumstr,",",from)		// screen-top		ST		=	str2num(dumstr[from,to-1])			from	=	to+1			to		=	strsearch(dumstr,",",from)		// screen-right		SR		=	str2num(dumstr[from,to-1])		from	=	to+1			to		=	strlen(dumstr)						// screen-bottom		SB		=	str2num(dumstr[from,to-1])				String OS = StringByKey("OS",IgorInfo(3))				if ( strsearch(OS,"Mac",0)==-1)			SC = screenresolution/96*panelscale  			SD = panelscale/(screenresolution/96)			macscale=1		else			SC = screenresolution/72*panelscale			SD = panelscale/(screenresolution/72)		endif 						// size correction				if (num==1)			return SL		elseif (num==2)			return ST		elseif (num==3) 			return SR		elseif (num==4)			return SB		elseif (num==5)			return SC		elseif (num==6)			return SD		endifEndFunction Igorsize(num)		Variable num	String OS = StringByKey("OS",IgorInfo(3))		if (strsearch(OS,"Macintosh",0)>=0)		switch (num)		case 1:			return  ScreenSize(num)//*panelscale *MacScale			break		case 2:			return ScreenSize(num)//*panelscale *MacScale			break		case 3:			return ScreenSize(num)//*panelscale *MacScale			break		case 4:			return ScreenSize(num)//*panelscale *MacScale			break		endswitch		else			GetWindow kwFrameInner,wsize			switch (num)		case 1:			return V_left			break		case 2:			return V_top			break		case 3:			return V_right			break		case 4:			return V_bottom			break		endswitch	endifEnd	Function update_all_panels(OldVersion)	Variable OldVersion			if (oldVersion<constant_Macro_Version)		doalert 1, "New Macro Version found. Update all the panels?"		if (V_flag==2)			return 0		endif				update_panels(oldVersion,"loadfile")		update_panels(oldVersion,"mapper")		update_panels(oldVersion,"gold")		update_panels(oldVersion,"BZ")		update_panels(oldVersion,"fit")		update_panels(oldVersion,"Analysis")	else		return 0	endif		EndFunction update_panels(oldversion,panelname)	Variable OldVersion	String panelname		String basename=panelname+"_panel*"		String panellist=winlist(basename,";","WIN:65")		if (Strlen(panellist)==0)		return 0	else		Variable index=0		do			String panelN=Stringfromlist(index,panellist,";")			Dowindow /F /HIDE=0 $panelN			String cmd="re_"+panelname+"("+num2str(oldversion)+")"			Execute /Q/Z cmd						index+=1		while (index<itemsinlist(panellist,";"))	endifEnd